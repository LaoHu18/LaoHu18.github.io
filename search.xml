<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>小破站创建之旅</title>
      <link href="/posts/5aed.html"/>
      <url>/posts/5aed.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>偶然间了解到了 Hexo 这个静态博客网站，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来。</p><p><strong>如果有错的话，请给我留言，我会及时修改，直接上教程。</strong></p><h2 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h2><ul><li>本文系统环境信息：win10</li><li>Node.js：v16.14.0</li><li>Git：2.34.1</li><li>修改配置文件的软件：Sublime Text</li></ul><hr><h3 id="1-1、下载Node-js和Git"><a href="#1-1、下载Node-js和Git" class="headerlink" title="1.1、下载Node.js和Git"></a>1.1、下载Node.js和Git</h3><h4 id="1-1-1、Node-js-的安装与配置"><a href="#1-1-1、Node-js-的安装与配置" class="headerlink" title="1.1.1、Node.js 的安装与配置"></a>1.1.1、Node.js 的安装与配置</h4><ul><li>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</li></ul><p><img src="/posts/5aed/1.png"></p><p>下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，并测试 Node.js 是否加入环境变量，运行cmd，当出现如下图的情况，Node.js 安装大功告成。</li></ul><p><img src="/posts/5aed/2.png"></p><ul><li>设置npm的镜像源</li></ul><pre class="language-none"><code class="language-none"># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org</code></pre><p>设置完成后就可以进行Git的安装了。</p><h4 id="1-1-2、Git的安装与配置"><a href="#1-1-2、Git的安装与配置" class="headerlink" title="1.1.2、Git的安装与配置"></a>1.1.2、Git的安装与配置</h4><ul><li>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的安装。</li></ul><p><img src="/posts/5aed/3.png"></p><p>同样下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，回到桌面，点击鼠标右键，出现两个选项<code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ul><p><img src="/posts/5aed/4.png"></p><p><img src="/posts/5aed/5.png"></p><hr><h3 id="1-2、Github-注册以及-Github-Pages-创建"><a href="#1-2、Github-注册以及-Github-Pages-创建" class="headerlink" title="1.2、Github 注册以及 Github Pages 创建"></a>1.2、Github 注册以及 Github Pages 创建</h3><ul><li>打开 Github <a href="https://github.com/">官网首页</a>，点击右上角的 <strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ul><p><img src="/posts/5aed/6.png"></p><p>按照流程创建完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code> 为描述仓库，自定义写，填写必要的描述，也可不填。勾选 <code>Add a README file</code> 点击 <code>Creat repository</code> 进行创建。</p><p><img src="/posts/5aed/7.png"></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="/posts/5aed/8.png"></p><p>此时可以进行测试，点击 <code>Create new file</code>，出现如下界面，然后命名文件名为 <code>index.html</code>，在填写如图的内容，再点击 <code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址 <code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="/posts/5aed/9.png"></p><p><img src="/posts/5aed/10.png"></p><p>若出现对应的内容，则Github 的注册以及 Github Pages 已经创建完成了。</p><hr><h3 id="1-3、配置Git用户名和邮箱"><a href="#1-3、配置Git用户名和邮箱" class="headerlink" title="1.3、配置Git用户名和邮箱"></a>1.3、配置Git用户名和邮箱</h3><p>在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，进入git界面：</p><p><img src="/posts/5aed/11.png"></p><p>然后分别输入下面的两个命令，并回车：</p><pre class="language-none"><code class="language-none">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"</code></pre><p>在 <code>C:/Users/[username]/</code>目录下找到<code>.gitconfig</code> 文件,若未找到，开启显示隐藏文件夹的功能即可。同时用编辑器打开，看到如下图所示的信息，即配置成功。</p><p><img src="/posts/5aed/12.png"></p><h2 id="二、本地安装-hexo-静态博客框架并发布到-Github-Pages"><a href="#二、本地安装-hexo-静态博客框架并发布到-Github-Pages" class="headerlink" title="二、本地安装 hexo 静态博客框架并发布到 Github Pages"></a>二、本地安装 hexo 静态博客框架并发布到 Github Pages</h2><h3 id="2-1、本地安装hexo静态博客框架"><a href="#2-1、本地安装hexo静态博客框架" class="headerlink" title="2.1、本地安装hexo静态博客框架"></a>2.1、本地安装hexo静态博客框架</h3><ul><li>选择一个磁盘作为你博客文件的存放位置，并在该位置新建一个文件夹，比如名为MyBlog 的文件夹，创建完成后，不要点进去，在此处点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令：</li></ul><pre class="language-none"><code class="language-none"># hexo框架的安装npm install -g hexo-cli# 初始化文件夹hexo init &lt;新建文件夹的名称&gt; # 切换到该文件夹cd &lt;新建文件夹的名称&gt;# 安装博客所需要的依赖文件npm install  </code></pre><p>依次运行完成后，文件夹内会多出如下图所示的一些文件，此时 Hexo 框架的本地搭建已经完成了，<strong>后续操作均需在该站点目录内进行完成</strong>。</p><p><img src="/posts/5aed/13.png"></p><ul><li><p>此时 Hexo 框架的本地搭建已经完成了，进行本地测试</p><p>进入站点文件夹，鼠标右键选择<code>Git Bash Here</code>，然后依次输入以下命令：</p></li></ul><pre class="language-none"><code class="language-none">hexo ghexo s</code></pre><p>浏览器中打开 [<a href="http://localhost:4000]可以看到一个网页，说明">http://localhost:4000]可以看到一个网页，说明</a> Hexo 博客已经成功在本地运行。</p><p><img src="/posts/5aed/14.png"></p><hr><h3 id="2-2、本地博客发布到-Github-Pages"><a href="#2-2、本地博客发布到-Github-Pages" class="headerlink" title="2.2、本地博客发布到 Github Pages"></a>2.2、本地博客发布到 Github Pages</h3><ul><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><ul><li>将本地目录与github进行关联，执行以下命令</li></ul><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C "github注册邮箱地址"</code></pre><p>输入后一直进行回车，然后在 <code>C:/Users/[username]</code> 目录下找到名为<code>.ssh</code> 的文件夹， 文件夹内有两个文件 <code>id_rsa.pub</code> 、 <code>id_rsa</code>，用文本编辑器打开 </p><p><code>id_rsa.pub</code>，复制里面的的内容。 然后打开 Github，点击右上角的头像 <strong>Settings</strong> 选择 <strong>SSH and GPG keys</strong></p><p><img src="/posts/5aed/15.png"></p><ul><li>测试是否与GitHub链接成功，输入下面的命令行</li></ul><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><p>点击回车，会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi ! You've successfully authenticated, but GitHub doesnot provide shell </code></p><p><code>access.</code>。 说明连接成功。此处这个 `` 应该是你 Github 的用户名。</p><ul><li>进入站点目录，打开博客的配置文件<code>_config.yml</code>，修改如下图所示的几个地方</li></ul><pre class="language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种，中文是zh-CN  timezone: 时区，可以不用管</code></pre><p>同时在该配置文件的最底部修改deploy，修改为如下代码：</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo:       github: git@github.com:Github用户名/Github用户名.github.io.git   branch: master</code></pre><ul><li>执行以下命令，生成页面，并发布至 Github Pages</li></ul><pre class="language-none"><code class="language-none"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 可以直接输入此命令，直接完成渲染和上传hexo g -d</code></pre><h2 id="三、博客主题修改及个性化修改"><a href="#三、博客主题修改及个性化修改" class="headerlink" title="三、博客主题修改及个性化修改"></a>三、博客主题修改及个性化修改</h2><h3 id="3-1、主题的下载与安装"><a href="#3-1、主题的下载与安装" class="headerlink" title="3.1、主题的下载与安装"></a>3.1、主题的下载与安装</h3><p>在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本 (不</p><p>定期更新优化)，自主选择版本。</p><pre class="language-none"><code class="language-none">git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><p>下载完成后，在站点目录的 <code>themes</code>文件夹内会出现一个 <code>matery</code>主题文件夹</p><p><strong>什么是站点配置文件，什么是主题配置文件：</strong></p><ul><li>站点配置文件就是根目录下的配置文件，假设你的博客文件在 <code>D:\MyBlog</code> 下，那么站点配置文件就是 <code>D:\MyBlog\_config.yml</code>，主题配置文件就是 <code>D:\MyBlog\themes\matery\_config.yml</code>。</li></ul><hr><h3 id="3-2、主题配置"><a href="#3-2、主题配置" class="headerlink" title="3.2、主题配置"></a>3.2、主题配置</h3><h4 id="3-2-1、主题切换"><a href="#3-2-1、主题切换" class="headerlink" title="3.2.1、主题切换"></a>3.2.1、主题切换</h4><ul><li><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>matery</code>，那么值就修改为 <code>theme: matery</code>。</p></li><li><p>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</p></li></ul><h4 id="3-2-2、新建-tags-标签页面"><a href="#3-2-2、新建-tags-标签页面" class="headerlink" title="3.2.2、新建 tags 标签页面"></a>3.2.2、新建 tags 标签页面</h4><ul><li><code>tags</code> 页是用来展示所有标签的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>tags/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "tags"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: tagsdate: 2022-02-22 12:23:38type: "tags"layout: "tags"---</code></pre><h4 id="3-2-3、-新建-categories-分类页面"><a href="#3-2-3、-新建-categories-分类页面" class="headerlink" title="3.2.3、 新建 categories 分类页面"></a>3.2.3、 新建 categories 分类页面</h4><p><code>categories</code> 页是用来展示所有分类的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>categories/index.md</code> 文件，如若已有，则此步骤跳过：</p><pre class="language-none"><code class="language-none">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，加入以下内容：</p><pre class="language-none"><code class="language-none">---title: categoriesdate: 2022-02-22 12:24:38type: "categories"layout: "categories"---</code></pre><h4 id="3-2-4、新建-about-关于我页面"><a href="#3-2-4、新建-about-关于我页面" class="headerlink" title="3.2.4、新建 about 关于我页面"></a>3.2.4、新建 about 关于我页面</h4><ul><li><code>about</code> 页是用来展示关于我和我的博客信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>about/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "about"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: aboutdate: 2022-02-22 12:25:32type: "about"layout: "about"---</code></pre><h4 id="3-2-5、新建-contact-留言板页面"><a href="#3-2-5、新建-contact-留言板页面" class="headerlink" title="3.2.5、新建 contact 留言板页面"></a>3.2.5、新建 contact 留言板页面</h4><ul><li><code>contact</code> 页是用来展示留言板信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>contact/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "contact"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: contactdate: 2022-02-22 12:26:32type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p></blockquote><h4 id="3-2-6、新建-friends-友情链接页面"><a href="#3-2-6、新建-friends-友情链接页面" class="headerlink" title="3.2.6、新建 friends 友情链接页面"></a>3.2.6、新建 friends 友情链接页面</h4><ul><li><code>friends</code> 页是用来展示友情链接信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>friends/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "friends"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">Code---title: friendsdate: 2022-02-22 12:27:02type: "friends"layout: "friends"---</code></pre><ul><li>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</li></ul><pre class="language-none"><code class="language-none">Code[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h4 id="3-2-7、菜单导航配置"><a href="#3-2-7、菜单导航配置" class="headerlink" title="3.2.7、菜单导航配置"></a>3.2.7、菜单导航配置</h4><ul><li><strong>主题配置文件配置基本菜单导航的名称、路径 url 和图标 icon。</strong><ul><li>菜单导航名称可以是中文也可以是英文 (如：<code>Index</code> 或<code>主页</code>)</li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li></ul></li></ul><pre class="language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><ul><li><strong>二级菜单配置方法</strong><ul><li>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作：<ul><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字 (如:<code>About</code> 菜单下添加 <code>children</code>)</li><li>在 <code>children</code> 下创建二级菜单的 名称 name, 路径 url 和图标 icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ul></li></ul></li></ul><pre class="language-none"><code class="language-none">Codemenu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h4 id="3-2-8、添加-emoji-表情支持"><a href="#3-2-8、添加-emoji-表情支持" class="headerlink" title="3.2.8、添加 emoji 表情支持"></a>3.2.8、添加 emoji 表情支持</h4><ul><li>matery主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code> 表情的生成，把对应的 <code>markdown emoji</code> 语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的 <code>emoji</code> 表情，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-filter-github-emojis --save</code></pre><ul><li>在站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h4 id="3-2-9、代码高亮"><a href="#3-2-9、代码高亮" class="headerlink" title="3.2.9、代码高亮"></a>3.2.9、代码高亮</h4><ul><li> Hexo 自带的代码主题显示不好看，主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i -S hexo-prism-plugin</code></pre><ul><li>修改 Hexo 站点目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</li></ul><pre class="language-none"><code class="language-none">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="3-2-10、-搜索"><a href="#3-2-10、-搜索" class="headerlink" title="3.2.10、 搜索"></a>3.2.10、 搜索</h4><ul><li>matery主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-search --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">search:  path: search.xml  field: post</code></pre><h4 id="3-2-11、中文链接转拼音"><a href="#3-2-11、中文链接转拼音" class="headerlink" title="3.2.11、中文链接转拼音"></a>3.2.11、中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> 的Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i hexo-permalink-pinyin --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h4 id="3-2-12、文章字数统计插件"><a href="#3-2-12、文章字数统计插件" class="headerlink" title="3.2.12、文章字数统计插件"></a>3.2.12、文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i --save hexo-wordcount</code></pre><ul><li>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</li></ul><pre class="language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="3-2-13、添加-RSS-订阅支持"><a href="#3-2-13、添加-RSS-订阅支持" class="headerlink" title="3.2.13、添加 RSS 订阅支持"></a>3.2.13、添加 RSS 订阅支持</h4><ul><li>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-feed --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">Codefeed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="3-2-14、修改社交链接信息"><a href="#3-2-14、修改社交链接信息" class="headerlink" title="3.2.14、修改社交链接信息"></a>3.2.14、修改社交链接信息</h4><ul><li>在主题配置文件<code>_config.yml</code> 中，修改以下配置项：</li></ul><pre class="language-none"><code class="language-none">socialLink:  github:  # https://github.com/xxx  email: #xxxx  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: #xxxx  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: true # true、false</code></pre><h4 id="3-2-15、修改打赏的二维码图片"><a href="#3-2-15、修改打赏的二维码图片" class="headerlink" title="3.2.15、修改打赏的二维码图片"></a>3.2.15、修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="3-2-16、配置音乐播放器"><a href="#3-2-16、配置音乐播放器" class="headerlink" title="3.2.16、配置音乐播放器"></a>3.2.16、配置音乐播放器</h4><blockquote><p>新版主题支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活 music 配置即可：</p><pre class="language-none"><code class="language-none"># 是否在首页显示音乐music:  enable: true  title:            #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code> 可选 <code>netease</code>（网易云音乐），<code>tencent</code>（QQ 音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code> 可选 <code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code> 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code> 的 <code>id</code> 即为这串数字。</p></blockquote><hr><h3 id="3-3、Front-matter"><a href="#3-3、Front-matter" class="headerlink" title="3.3、Front-matter"></a>3.3、Front-matter</h3><p>在站点目录的 <code>scaffold</code> 的文件夹下找到 <code>post.md</code>文件，进行 Front-matter修改，修改配置如下：</p><pre class="language-none"><code class="language-none">---# 文章标题title: {{ title }}# 文件创建日期date: {{ date }}# 作者author:# 文章摘要summary:# 文章特征图img:# 是否置顶top:# 文章是否需要加入到首页轮播封面中cover:toc: truemathjax: true# 文章分类categories:# 文章标签tags:---</code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code> 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code> 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><hr><h3 id="3-4、自定制修改"><a href="#3-4、自定制修改" class="headerlink" title="3.4、自定制修改"></a>3.4、自定制修改</h3><h4 id="3-4-1、修改主题颜色"><a href="#3-4-1、修改主题颜色" class="headerlink" title="3.4.1、修改主题颜色"></a>3.4.1、修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="3-4-2、修改-banner-图和文章特色图"><a href="#3-4-2、修改-banner-图和文章特色图" class="headerlink" title="3.4.2、修改 banner 图和文章特色图"></a>3.4.2、修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，</p><p>可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="language-none"><code class="language-none">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><h4 id="3-4-3、修改网站相关信息"><a href="#3-4-3、修改网站相关信息" class="headerlink" title="3.4.3、修改网站相关信息"></a>3.4.3、修改网站相关信息</h4><pre class="language-none"><code class="language-none">#这是站点目录下的配置文件信息title:    #这是网站标题subtitle:     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description:   #网站描述keywords:  #网站的关键词author:   #作者，文章版权所显示的language: zh-CN  #网站语言，不填写，默认为英文timezone:   #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png</code></pre><h2 id="四、其他DIY"><a href="#四、其他DIY" class="headerlink" title="四、其他DIY"></a>四、其他DIY</h2><h3 id="4-1、外链跳转插件"><a href="#4-1、外链跳转插件" class="headerlink" title="4.1、外链跳转插件"></a>4.1、外链跳转插件</h3><blockquote><p><a href="https://blog.hvnobug.com/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2h2bm9idWcvaGV4by1leHRlcm5hbC1saW5r">hexo-external-link</a> 是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接，不要将该链接计入权重。 同时自动生成外链跳转页面，默认在根目录下 go.html;</p></blockquote><ul><li>使用 npm安装</li></ul><pre class="language-none"><code class="language-none">## npm 安装npm install hexo-external-link --save</code></pre><ul><li>之后再 hexo 博客站点根目录下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: 'u'  html_file_name: 'go.html'  target_blank: true  link_rel: 'external nofollow noopener noreferrer'  domain: 'your_domain' # 如果开启了防盗链，填写你的域名  safety_chain: true</code></pre><hr><h3 id="4-2、添加动态科技线条背景"><a href="#4-2、添加动态科技线条背景" class="headerlink" title="4.2、添加动态科技线条背景"></a>4.2、添加动态科技线条背景</h3><p>在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre class="language-none"><code class="language-none">&lt;!--动态线条背景--&gt;&lt;script type="text/javascript"color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;</code></pre><ul><li>color：表示线条颜色，三个数字分别为 (R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的 z-index 属性，css 属性用于控制所在层的位置，默认：-1</li></ul><hr><h3 id="4-3、文章生成永久链接"><a href="#4-3、文章生成永久链接" class="headerlink" title="4.3、文章生成永久链接"></a>4.3、文章生成永久链接</h3><p>主题默认的文章链接配置是</p><pre class="language-none"><code class="language-none">permalink: :year/:month/:day/:title</code></pre><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><ul><li>在站点目录下执行下面的命令：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-abbrlink --save</code></pre><ul><li>在站点配置文件下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><ul><li>将站点配置文件的 <code>permalink</code> 的值修改为：</li></ul><pre class="language-none"><code class="language-none">Codepermalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code></pre><hr><h3 id="4-4、页面获取标题"><a href="#4-4、页面获取标题" class="headerlink" title="4.4、页面获取标题"></a>4.4、页面获取标题</h3><p>修改 <code>themes\matery\layout\_partial</code> 中的 <code>bg-cover-content.ejs</code> 文件，其中原主题中这个文件的代码为 (大约在第 4 行)：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;            &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;            subtitle     &lt;% } %&gt;&lt;/div&gt;</code></pre><p>将其修改为：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;        &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;        &lt;%= page.title %&gt;     &lt;% } %&gt;&lt;/div&gt;</code></pre><h2 id="五、添加评论系统"><a href="#五、添加评论系统" class="headerlink" title="五、添加评论系统"></a>五、添加评论系统</h2><p>只说几个常用的评论系统的配置方法：</p><h3 id="5-1、来必力评论系统"><a href="#5-1、来必力评论系统" class="headerlink" title="5.1、来必力评论系统"></a>5.1、来必力评论系统</h3><ul><li>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：<ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul></li></ul><p><img src="/posts/5aed/16.png"></p><ul><li>进行注册登录，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：</li></ul><p><img src="/posts/5aed/17.png"></p><ul><li>把data_uid的值复制后添加到主题配置文件的对应位置</li></ul><pre class="language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-2、添加-Valine-评论系统"><a href="#5-2、添加-Valine-评论系统" class="headerlink" title="5.2、添加 Valine 评论系统"></a>5.2、添加 Valine 评论系统</h3><p><a href="https://valine.js.org/">Valine 官方文档</a></p><p>如果注册过 LeanCloud，请点击此处进行<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>，未注册的请点击<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a></p><ul><li>经过登录或者注册之后再登录，就会进入如下的页面：</li></ul><p><img src="/posts/5aed/18.png"></p><ul><li>创建应用完成后，会出现如下页面，然后点击设置</li></ul><p><img src="/posts/5aed/19.png"></p><ul><li>会出现下面的页面，将其中 APPID 和 APPKey 复制，添加到主题配置文件中。</li></ul><p><img src="/posts/5aed/20.png"></p><pre class="language-none"><code class="language-none"># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  # true即为开启评论系统  appId:   #此处填写你的appid  appKey:  #此处填写你的appkey  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder  background:  https://cdn.jsdelivr.net/gh/Yafine/cdn@3.1.1/social/comment_bg.png</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-3、添加-Gitalk-评论模块"><a href="#5-3、添加-Gitalk-评论模块" class="headerlink" title="5.3、添加 Gitalk 评论模块"></a>5.3、添加 Gitalk 评论模块</h3><ul><li>注册 OAuth Application</li></ul><p>当别人评论你的文章时，会需要它授权。点击<a href="https://github.com/settings/applications/new">注册 OAuth Application</a> 进行注册，注册界面如下：</p><p><img src="/posts/5aed/21.png"></p><ul><li>点击 <strong>Register application</strong>（注册）会出现 <strong>Client ID/Secret</strong>，接下来就是将信息填入配置文件中。</li></ul><p><img src="/posts/5aed/22.png"></p><ul><li>配置 _config.yml 文件</li></ul><pre class="language-none"><code class="language-none"># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: true    # true即开启评论模块  owner: Yafine  # 填写你的 github 账户名即可  repo: Yafine-gitalks   # 新建一个仓库或者使用博客托管的仓库也可  oauth:    clientId: #填写你的clientId    clientSecret:  #填写你的clientSecret  admin: Yafine  #填写你的 github 账户名即可</code></pre><ul><li>然后再进行部署步骤即可，第一次查看效果需要登录 github 账号，关联授权后，就可以使用评论系统了。</li></ul><h2 id="六、新建文章"><a href="#六、新建文章" class="headerlink" title="六、新建文章"></a>六、新建文章</h2><h3 id="6-1、自动打开本地-Markdown-编辑器"><a href="#6-1、自动打开本地-Markdown-编辑器" class="headerlink" title="6.1、自动打开本地 Markdown 编辑器"></a>6.1、自动打开本地 Markdown 编辑器</h3><p>写新文章时，需要控制台执行 <code>hexo new "文章名字"</code>，这样就会在<code>_posts</code> 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class="language-none"><code class="language-none">var spawn = require('child_process').exec;hexo.on('new', function(data){  spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path);});</code></pre><p>其中 <code>"D:\Program Files\Typorae\Typora.exe"</code> 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 <code>hexo cl &amp;&amp; hexo g -d</code>，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><hr><h3 id="6-2、新建文章插入图片"><a href="#6-2、新建文章插入图片" class="headerlink" title="6.2、新建文章插入图片"></a>6.2、新建文章插入图片</h3><ul><li>打开在hexo根目录下的 _config.yml 配置文件，找到 post_asset_folder 属性，默认为 false 改为 true</li></ul><ul><li>在hexo根目录下执行如下命令</li></ul><pre class="language-none"><code class="language-none">npm install hexo-asset-image</code></pre><p>此时再执行命令 hexo n article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片</p><p>资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</p><pre class="language-none"><code class="language-none">![](img_name.jpg) #文章中的图片资源路径格式</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
