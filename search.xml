<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java常见算法</title>
      <link href="/posts/464.html"/>
      <url>/posts/464.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你需要知道的几种数据结构</title>
      <link href="/posts/4cb8.html"/>
      <url>/posts/4cb8.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java枚举知识整理</title>
      <link href="/posts/1879.html"/>
      <url>/posts/1879.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、枚举类的概述"><a href="#一、枚举类的概述" class="headerlink" title="一、枚举类的概述"></a>一、枚举类的概述</h2><ul><li>枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类</li><li>当需要定义一组常量时，强烈建议使用枚举类</li><li>如果枚举类中只一个对象，则可以作为单例模式的实现方式。</li></ul><h2 id="二、枚举类中的常用方法"><a href="#二、枚举类中的常用方法" class="headerlink" title="二、枚举类中的常用方法"></a>二、枚举类中的常用方法</h2><ul><li><p><code>values()</code>方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</p></li><li><p><code>valueOf(String str)</code>：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：<code>IllegalArgumentException</code></p></li><li><p><code>toString()</code>：返回当前枚举类对象常量的名称</p></li></ul><h2 id="三、自定义枚举类"><a href="#三、自定义枚举类" class="headerlink" title="三、自定义枚举类"></a>三、自定义枚举类</h2><ul><li>构造器私有化 (固定值, 所以不允许外界在创建对象)</li></ul><ul><li>对外暴露类中创建的对象(<code>public static final</code>修饰的, 实现底层优化)</li></ul><ul><li>只提供<code>get</code>方法, 不提供<code>set</code>方法 (因为枚举对象值通常为只读)</li></ul><pre class="language-java" data-language="java"><code class="language-java">/** * 一、枚举类的使用 * 1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类 * 2.当需要定义一组常量时，强烈建议使用枚举类 * 3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。 * * 二、如何定义枚举类 * 方式一：jdk5.0之前，自定义枚举类 * 方式二：jdk5.0，可以使用enum关键字定义枚举类 * * 三、Enum类中的常用方法： *    values()方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。 *    valueOf(String str)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常： *    toString()：返回当前枚举类对象常量的名称 * * 四、使用enum关键字定义的枚举类实现接口的情况 *   情况一：实现接口，在enum类中实现抽象方法 *   情况二：让枚举类的对象分别实现接口中的抽象方法 */public class SeasonTest {    public static void main(String[] args) {        Season spring = Season.SPRING;        System.out.println(spring);    }}//自定义枚举类class Season{    //1.声明Season对象的属性:private final修饰    private final String seasonName;    private final String seasonDesc;    //2.私有化类的构造器,并给对象属性赋值    private Season(String seasonName,String seasonDesc){        this.seasonName = seasonName;        this.seasonDesc = seasonDesc;    }    //3.提供当前枚举类的多个对象：public static final的    public static final Season SPRING = new Season("春天","春暖花开");    public static final Season SUMMER = new Season("夏天","夏日炎炎");    public static final Season AUTUMN = new Season("秋天","秋高气爽");    public static final Season WINTER = new Season("冬天","冰天雪地");    //4.其他诉求1：获取枚举类对象的属性    public String getSeasonName() {        return seasonName;    }    public String getSeasonDesc() {        return seasonDesc;    }    //4.其他诉求1：提供toString()    @Override    public String toString() {        return "Season{" +                "seasonName='" + seasonName + '\'' +                ", seasonDesc='" + seasonDesc + '\'' +                '}';    }}</code></pre><h3 id="11-4、使用enum来创建枚举类"><a href="#11-4、使用enum来创建枚举类" class="headerlink" title="11.4、使用enum来创建枚举类"></a>11.4、使用enum来创建枚举类</h3><ul><li>当我们使用 <code>enum</code> 关键字开发一个枚举类时，默认会继承 <code>Enum</code> 类, 而且是一个 <code>final</code> 类[如何证明], 使用 javap 工具来演示</li></ul><ul><li>传统的 <code>public static final Season2 SPRING = new Season2(“春天”, “温暖”)</code>； 简化成 <code>SPRING(“春天”, “温暖”)</code>， 这里必须知道，它调用的是哪个构造器.</li></ul><ul><li>如果使用无参构造器创建枚举对象，则实参列表和小括号都可以省略</li></ul><ul><li>当有多个枚举对象时，使用,间隔，最后有一个分号结尾</li></ul><ul><li>枚举对象必须放在枚举类的行首.</li></ul><pre class="language-java" data-language="java"><code class="language-java">/** * 使用enum关键字定义枚举类 * 说明：定义的枚举类默认继承于java.lang.Enum类 */public class SeasonTest1 {    public static void main(String[] args) {        Season1 summer = Season1.SUMMER;        //toString():返回枚举类对象的名称        System.out.println(summer.toString());        System.out.println("****************");        //values():返回所有的枚举类对象构成的数组        Season1[] values = Season1.values();        for(int i = 0;i &lt; values.length;i++){            System.out.println(values[i]);            values[i].show();        }                System.out.println("****************");        Thread.State[] values1 = Thread.State.values();        for (int i = 0; i &lt; values1.length; i++) {            System.out.println(values1[i]);        }        //valueOf(String objName):返回枚举类中对象名是objName的对象。        Season1 winter = Season1.valueOf("WINTER");        //如果没有objName的枚举类对象，则抛异常：IllegalArgumentException        System.out.println(winter);        winter.show();    }}interface Info{    void show();}//使用enum关键字枚举类enum Season1 implements Info{    //1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束    SPRING("春天","春暖花开"){        @Override        public void show() {            System.out.println("春天在哪里？");        }    },    SUMMER("夏天","夏日炎炎"){        @Override        public void show() {            System.out.println("宁夏");        }    },    AUTUMN("秋天","秋高气爽"){        @Override        public void show() {            System.out.println("秋天不回来");        }    },    WINTER("冬天","冰天雪地"){        @Override        public void show() {            System.out.println("大约在冬季");        }    };    //2.声明Season对象的属性:private final修饰    private final String seasonName;    private final String seasonDesc;    //2.私有化类的构造器,并给对象属性赋值    private Season1(String seasonName,String seasonDesc){        this.seasonName = seasonName;        this.seasonDesc = seasonDesc;    }    //4.其他诉求1：获取枚举类对象的属性    public String getSeasonName() {        return seasonName;    }    public String getSeasonDesc() {        return seasonDesc;    }        //4.其他诉求1：提供toString()    @Override    public String toString() {        return "Season1{" +                "seasonName='" + seasonName + '\'' +                ", seasonDesc='" + seasonDesc + '\'' +                '}';    }    @Override    public void show() {        System.out.println("这是一个季节");    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射知识整理</title>
      <link href="/posts/c50b.html"/>
      <url>/posts/c50b.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、类加载器"><a href="#一、类加载器" class="headerlink" title="一、类加载器"></a>一、类加载器</h2><h3 id="1-1、类加载"><a href="#1-1、类加载" class="headerlink" title="1.1、类加载"></a>1.1、类加载</h3><ul><li>类加载的描述<ul><li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</li></ul></li><li>类的加载<ul><li>就是指将class文件读入内存，并为之创建一个 java.lang.Class 对象</li><li>任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</li></ul></li><li>类的连接<ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li>类的初始化<ul><li>在该阶段，主要就是对类变量进行初始化</li></ul></li><li>类的初始化步骤<ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li><li>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li></ul></li><li>类的初始化时机<ul><li>创建类的实例</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li></ul><h3 id="1-2、类加载器"><a href="#1-2、类加载器" class="headerlink" title="1.2、类加载器"></a>1.2、类加载器</h3><ul><li><p>类加载器的作用：</p><ul><li>负责将.class文件加载到内存中，并为之生成对应的 java.lang.Class 对象。虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行！</li></ul></li><li><p>JVM的类加载机制</p><ul><li>全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li><li>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li><li>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li></ul></li></ul><h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><h3 id="2-1、反射的概述"><a href="#2-1、反射的概述" class="headerlink" title="2.1、反射的概述"></a>2.1、反射的概述</h3><ul><li>是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</li></ul><h3 id="2-2、Class类"><a href="#2-2、Class类" class="headerlink" title="2.2、Class类"></a>2.2、Class类</h3><ul><li><p>获取Class类对象的三种方式：</p><ul><li><code>类名.class</code></li><li><code>对象名.getClass()方法</code></li><li><code>Class.forName(全类名)方法</code></li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ReflectDemo {    public static void main(String[] args) throws ClassNotFoundException {        //使用类的class属性来获取该类对应的Class对象        Class&lt;Student&gt; c1 = Student.class;        //调用对象的getClass()方法，返回该对象所属类对应的Class对象        Student student = new Student();        Class&lt;? extends Student&gt; c2 = student.getClass();        //使用Class类中的静态方法forName(String className)        Class&lt;?&gt; c3 = Class.forName("com.vince.Student");    }}</code></pre><h3 id="2-3、使用Class类创建对象的实例化操作"><a href="#2-3、使用Class类创建对象的实例化操作" class="headerlink" title="2.3、使用Class类创建对象的实例化操作"></a>2.3、使用Class类创建对象的实例化操作</h3><ul><li>方法分类</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor<t> getConstructor(Class&lt;?&gt;… parameterTypes)</t></td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor<t> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</t></td><td>返回单个构造方法对象</td></tr></tbody></table><ul><li>示例</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class test{    public static void main(String[] args) throws ClassNotFoundException {        //进行Class类的创建        Class studentclass = Student.class;        //使用无参构造进行实例化        Student s1 = (Student) studentclass.getDeclaredConstructor().newInstance();        //使用有参构造进行实例化        //获取所有的构造方法        Constructor&lt;?&gt;[] constructors = studentclass.getConstructors();                 for (int i = 0; i &lt; constructors.length; i++) {             //遍历其构造方法，得到构造方法参数            System.out.println(constructors[i]);        }        //创建一个指定的构造方法        Constructor&lt;Student&gt; constructor = studentclass.getConstructor(String.class, String.class, int.class);        //进行实例化        Student s2 = constructor.newInstance("zhangsan","男",21);           }}</code></pre><h3 id="2-4、通过Class类获得其属性"><a href="#2-4、通过Class类获得其属性" class="headerlink" title="2.4、通过Class类获得其属性"></a>2.4、通过Class类获得其属性</h3><ul><li>方法分类</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回其公有的属性对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回其所有的属性对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公有属性对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个属性对象</td></tr><tr><td>String getDeclaredField(String name).getType()</td><td>获取其属性的类型</td></tr><tr><td>Modifier.toString(getDeclaredField(String name).getModifiers())</td><td>获取其属性为公有或私有</td></tr></tbody></table><ul><li>示例</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class test{public static void main(String[] args) throws ClassNotFoundException {        //获得Class类        Class studentclass = Student.class;        //获取其公共属性        Field[] fields = studentclass.getFields();        System.out.println(Arrays.toString(fields));        //获取其所有属性        Field[] declaredFields = studentclass.getDeclaredFields();        System.out.println(Arrays.toString(declaredFields));        //获取其属性是公有还是私有        for (int i = 0; i &lt; declaredFields.length; i++) {            int modifiers = declaredFields[i].getModifiers();       //获取属性的私有或公有            System.out.println(Modifier.toString(modifiers)+"-&gt;"+declaredFields[i].getType()+"-&gt;"+declaredFields[i].getName());        }        System.out.println("以上是获取其属性");        System.out.println(dogclass.getPackageName());      //获取其包名    }}</code></pre><h3 id="2-5、通过Class类获得其方法"><a href="#2-5、通过Class类获得其方法" class="headerlink" title="2.5、通过Class类获得其方法"></a>2.5、通过Class类获得其方法</h3><ul><li>方法分类</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有公共成员方法对象的数组，包括继承的</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，不包括继承的</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象</td></tr><tr><td>getMethod(String name, Class&lt;?&gt;… parameterTypes).invoke(Object object)</td><td>调用其公有方法</td></tr><tr><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes).setAccessible(true)</td><td>使其私有方法可以被访问</td></tr><tr><td>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes).invoke(Object object)</td><td>调用私有方法</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java">public class test{public static void main(String[] args) throws ClassNotFoundException {        //获得Class类        Class studentclass = Student.class;        //创建一个指定的构造方法        Constructor&lt;Student&gt; declaredConstructor = studentclass.getConstructor(String.class, String.class, int.class);        Student student = constructor.newInstance("zhangsan","男",21);         //获取其公共方法(包括父类方法)        Method[] methods = studentclass.getMethods();        for (int i = 0; i &lt; methods.length; i++) {        System.out.println(methods[i]);            //调用其公共方法            if("toString".equals(methods[i].getName())){            String str = (String) methods[i].invoke(student);                System.out.println(str);            }        }        System.out.println("-------------------");        //获取其私有方法Method[] declaredMethods = studentclass.getDeclaredMethods();        for (int i = 0; i &lt; declaredMethods.length; i++) {        System.out.println(declaredMethods[i]);            if("test".equals(declaredMethods[i].getName())){            declaredMethods[i].setAccessible(true);     //使其私有方法可以被访问（去除修饰符的检查）                declaredMethods[i].invoke(student);         //调用私有方法}}    }} </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP</title>
      <link href="/posts/b77c.html"/>
      <url>/posts/b77c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、网络编程"><a href="#一、网络编程" class="headerlink" title="一、网络编程"></a>一、网络编程</h2><h3 id="1-1、网络编程概述"><a href="#1-1、网络编程概述" class="headerlink" title="1.1、网络编程概述"></a>1.1、网络编程概述</h3><ul><li><p>计算机网络</p><p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p></li><li><p>网络编程</p><p>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</p></li></ul><h3 id="1-2、网络编程三要素"><a href="#1-2、网络编程三要素" class="headerlink" title="1.2、网络编程三要素"></a>1.2、网络编程三要素</h3><ul><li><p>IP地址</p><p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p></li><li><p>端口</p><p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p></li><li><p>协议</p><p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p></li></ul><h3 id="1-3、IP地址"><a href="#1-3、IP地址" class="headerlink" title="1.3、IP地址"></a>1.3、IP地址</h3><ul><li>IP地址：是网络中设备的唯一标识</li></ul><ul><li><p>IP地址分为两大类</p><ul><li><p>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照TCP/IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”，这显然比1和0容易记忆得多</p></li><li><p>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量不够的问题</p></li></ul></li><li><p>DOS常用命令：</p><ul><li><p>ipconfig：查看本机IP地址</p></li><li><p>ping IP地址：检查网络是否连通</p></li></ul></li><li><p>特殊IP地址：</p><ul><li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li></ul></li></ul><h3 id="1-4、端口"><a href="#1-4、端口" class="headerlink" title="1.4、端口"></a>1.4、端口</h3><ul><li><p>端口：设备上应用程序的唯一标识</p></li><li><p>端口号</p><p>用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</p></li></ul><h3 id="1-5、协议"><a href="#1-5、协议" class="headerlink" title="1.5、协议"></a>1.5、协议</h3><ul><li><p>协议：计算机网络中，连接和通信的规则被称为网络通信协议</p></li><li><p>UDP协议</p><ul><li>用户数据报协议(<code>User Datagram Protocol</code>)</li><li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li><li>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li><li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li></ul></li><li><p>TCP协议</p><ul><li>传输控制协议 (<code>Transmission Control Protocol</code>)</li><li>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</li><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠<ul><li>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</li><li>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</li><li>第三次握手，客户端再次向服务器端发送确认信息，确认连接</li></ul></li><li>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</li><li>TCP协议四层通信：应用层、传输层、网络层、链路层</li></ul></li></ul><h2 id="二、UDP协议"><a href="#二、UDP协议" class="headerlink" title="二、UDP协议"></a>二、UDP协议</h2><h3 id="2-1、UDP发送数据"><a href="#2-1、UDP发送数据" class="headerlink" title="2.1、UDP发送数据"></a>2.1、UDP发送数据</h3><ul><li><p>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个<code>Socket</code>对象，但是这两个<code>Socket</code>只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</p></li><li><p>Java提供了<code>DatagramSocket</code>类作为基于UDP协议的<code>Socket</code></p></li><li><p>构造方法：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramSocket()</td><td>创建数据报套接字并将其绑定到本机地址上的任何可用端口</td></tr><tr><td>DatagramPacket(byte[] buf,int len,InetAddress add,int port)</td><td>创建数据包,发送长度为len的数据包到指定主机的指定端口</td></tr></tbody></table><ul><li>相关方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void send(DatagramPacket p)</td><td>发送数据报包</td></tr><tr><td>void close()</td><td>关闭数据报套接字</td></tr><tr><td>void receive(DatagramPacket p)</td><td>从此套接字接受数据报包</td></tr></tbody></table><ul><li><p>发送数据的步骤：</p><ul><li>创建发送端的<code>Socket</code>对象(<code>DatagramSocket</code>)</li><li>创建数据，并把数据打包</li><li>调用<code>DatagramSocket</code>对象的方法发送数据</li><li>关闭发送端</li></ul></li><li><p>代码演示：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class SendDemo {    public static void main(String[] args) throws IOException {        //创建发送端的Socket对象(DatagramSocket)        DatagramSocket ds = new DatagramSocket();        //创建数据，并把数据打包        //构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。        byte[] bytes = "hello,udp,我来了".getBytes(StandardCharsets.UTF_8);        DatagramPacket dp = new DatagramPacket(bytes,bytes.length,InetAddress.getByName("127.0.0.1"),8000);        //调用DatagramSocket对象的方法发送数据        ds.send(dp);        //关闭发送端        ds.close();    }}</code></pre><h3 id="2-2、UDP接收数据"><a href="#2-2、UDP接收数据" class="headerlink" title="2.2、UDP接收数据"></a>2.2、UDP接收数据</h3><ul><li>构造方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>DatagramPacket(byte[] buf, int len)</td><td>创建一个DatagramPacket用于接收长度为len的数据包</td></tr></tbody></table><ul><li>相关方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>byte[]  getData()</td><td>返回数据缓冲区</td></tr><tr><td>int  getLength()</td><td>返回要发送的数据的长度或接收的数据的长度</td></tr></tbody></table><ul><li><p>接收数据的步骤：</p><ul><li>创建接收端的<code>Socket</code>对象(<code>DatagramSocket</code>)</li><li>创建一个数据包，用于接收数据</li><li>调用<code>DatagramSocket</code>对象的方法接收数据</li><li>解析数据包，并把数据在控制台显示</li><li>关闭接收端</li></ul></li><li><p>代码演示：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ReceiveDemo {    public static void main(String[] args) throws IOException {        //创建接收端的Socket对象(DatagramSocket)        DatagramSocket ds = new DatagramSocket(8000);        //创建一个数据包，用于接收数据        byte[] bytes = new byte[1024];        DatagramPacket dp = new DatagramPacket(bytes, bytes.length);        //调用DatagramSocket对象的方法接收数据        ds.receive(dp);        //解析数据包，并把数据在控制台显示        System.out.println("数据是：" + new String(dp.getData(),0,dp.getLength()));        }    }}</code></pre><h2 id="三、TCP协议"><a href="#三、TCP协议" class="headerlink" title="三、TCP协议"></a>三、TCP协议</h2><h3 id="3-1、TCP发送数据"><a href="#3-1、TCP发送数据" class="headerlink" title="3.1、TCP发送数据"></a>3.1、TCP发送数据</h3><ul><li><p>Java中的TCP通信</p><ul><li>Java对基于TCP协议的的网络提供了良好的封装，使用<code>Socket</code>对象来代表两端的通信端口，并通过<code>Socket</code>产生IO流来进行网络通信。</li><li>Java为客户端提供了<code>Socket</code>类，为服务器端提供了<code>ServerSocket</code>类</li></ul></li><li><p>构造方法：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket(InetAddress address,int port)</td><td>创建流套接字并将其连接到指定IP指定端口号</td></tr><tr><td>Socket(String host, int port)</td><td>创建流套接字并将其连接到指定主机上的指定端口号</td></tr></tbody></table><ul><li>相关方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>InputStream  getInputStream()</td><td>返回此套接字的输入流</td></tr><tr><td>OutputStream getOutputStream()</td><td>返回此套接字的输出流</td></tr></tbody></table><ul><li>发送数据步骤：<ul><li>创建<code>Socket</code>对象</li><li>获取输出流，写出数据</li><li>释放资源</li></ul></li><li>示例代码：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ClientDemo {    public static void main(String[] args) throws IOException {        //创建客户端的Socket对象Socket(String host, int port) 创建流套接字并将其连接到指定主机上的指定端口号        Socket socket = new Socket("127.0.0.1",6666);        //获取输出流，写数据        OutputStream os = socket.getOutputStream();        os.write("hello,tcp,我来了".getBytes());        //释放资源        socket.close();    }}</code></pre><h3 id="3-2、TCP接收数据"><a href="#3-2、TCP接收数据" class="headerlink" title="3.2、TCP接收数据"></a>3.2、TCP接收数据</h3><ul><li>构造方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ServletSocket(int port)</td><td>创建绑定到指定端口的服务器套接字</td></tr></tbody></table><ul><li>相关方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Socket accept()</td><td>监听要连接到此的套接字并接受它</td></tr></tbody></table><ul><li>接收步骤：<ul><li>创建<code>ServerSocket</code>对象</li><li>等待客户端的连接，造成阻塞，如果客户端连接成功，立即返回一个<code>socket</code>对象</li><li>获取输入流，将数据显示</li><li>释放资源</li></ul></li><li>示例代码</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ServerDemo {    public static void main(String[] args) throws IOException {        //创建服务器端的Socket对象ServerSocket(int port) 创建绑定到指定端口的服务器套接字        ServerSocket serversocket = new ServerSocket(6666);        //Socket accept() 等待客户端的连接，造成阻塞，如果客户端连接成功，立即返回一个socket对象        Socket socket = serversocket.accept();        //获取输入流，读数据，并把数据显示在控制台        InputStream is = socket.getInputStream();        byte[] bytes = new byte[1024];        int len = is.read(bytes);        String data = new String(bytes,0,len);        System.out.println("数据是：" + data);        //释放资源        socket.close();        serversocket.close();    }}</code></pre><h2 id="四、补充：URL"><a href="#四、补充：URL" class="headerlink" title="四、补充：URL"></a>四、补充：URL</h2><ul><li>URL使用字符串形式描述如何在Internet上找寻一个资源</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class URL {    public static void main(String[] args) {        try {            //创建网络url            URL url = new URL("https://wenku.baidu.com/view/a79bbe1a844769eae009ed5a.html?fixfr=SXilVuui%252BsN8MwQyiIDKHQ%253D%253D&amp;fr=income1-search");            //返回连接            // 如果你连接HTTP协议的URL, openConnection() 方法返回 HttpURLConnection 对象。            //如果你连接的URL为一个 JAR 文件, openConnection() 方法将返回 JarURLConnection 对象            HttpURLConnection connection = (HttpURLConnection) url.openConnection();            //创建输入流和输出流：输入流读取网页数据            BufferedInputStream bis = new BufferedInputStream(connection.getInputStream());            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File("D:\\java\\URL\\下载")));            byte[] bytes = new byte[1024];            int len = -1;            while((len = bis.read(bytes))!=-1){                bos.write(bytes,0,len);                bos.flush();            }            bis.close();            bos.close();            System.out.println("下载成功");        } catch (MalformedURLException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程知识整理</title>
      <link href="/posts/5da2.html"/>
      <url>/posts/5da2.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、进程和线程"><a href="#一、进程和线程" class="headerlink" title="一、进程和线程"></a>一、进程和线程</h2><ul><li><p>进程：是正在运行的程序</p><ul><li>是系统进行资源分配和调用的独立单位</li><li>每一个进程都有它自己的内存空间和系统资源</li></ul></li><li><p>线程：是进程中的单个顺序控制流，是一条执行路径</p><ul><li>单线程：一个进程如果只有一条执行路径，则称为单线程程序</li><li>多线程：一个进程如果有多条执行路径，则称为多线程程序</li></ul></li><li><p>并发：指两个或多个事件在同一个时间段内发生，处理器只能处理一个任务，轮流执行。</p></li><li><p>并行：指两个或多个事件在同一时刻发生（同时发生）</p></li></ul><h2 id="二、线程的基本使用"><a href="#二、线程的基本使用" class="headerlink" title="二、线程的基本使用"></a>二、线程的基本使用</h2><ul><li>实现多线程有两种方式：<ul><li>继承<code>Thread</code>类</li><li>实现<code>Runnable</code>接口</li></ul></li><li>线程休眠：<code>Thread.sleep</code><ul><li>使当前正在执行的线程以指定毫秒数暂停，释放CPU时间片</li></ul></li></ul><h3 id="2-1、方式一：继承Thread类"><a href="#2-1、方式一：继承Thread类" class="headerlink" title="2.1、方式一：继承Thread类"></a>2.1、方式一：继承Thread类</h3><ul><li><p>方法介绍：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void run()</td><td>在线程开启后，此方法将被调用执行</td></tr><tr><td>void start()</td><td>使此线程开始执行，Java虚拟机会调用run方法()</td></tr><tr><td>void  setName(String name)</td><td>将此线程的名称更改为等于参数name</td></tr><tr><td>String  getName()</td><td>返回此线程的名称</td></tr><tr><td>Thread  currentThread()</td><td>返回对当前正在执行的线程对象的引用</td></tr></tbody></table></li><li><p>实现步骤：</p><ul><li>定义一个类<code>MyThread</code>继承<code>Thread</code>类</li><li>在<code>MyThread</code>类中重写<code>run()</code>方法</li><li>创建<code>MyThread</code>类的对象</li><li>启动线程</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class MyThread extends Thread{    //第一种方式：继承Thread类    public void run(){        for (int i = 0; i &lt; 10; i++) {            //返回当前正在执行的线程对象的引用,可获取该线程        System.out.println(Thread.currentThread().getName());            try {                Thread.sleep(50);           //使当前正在执行的线程以指定的毫秒数暂停，释放CPU时间片            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}public class ProcessesAndThreads {    public static void main(String[] args) {//创建MyThread对象        MyThread myThread = new MyThread();        //设置线程的名称        myThread.setName("这是线程");//启动线程        myThread.start();               }}</code></pre><blockquote><p>两个小问题：</p><ul><li><p>为什么要重写run()方法？</p><ul><li>因为run()是用来封装被线程执行的代码</li></ul></li><li><p>run()方法和start()方法的区别？</p><ul><li>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</li><li>start()：启动线程；然后由JVM调用此线程的run()方法</li></ul></li></ul></blockquote><h3 id="2-2、方式二：实现Runnable接口"><a href="#2-2、方式二：实现Runnable接口" class="headerlink" title="2.2、方式二：实现Runnable接口"></a>2.2、方式二：实现Runnable接口</h3><ul><li><p><code>Thread</code>构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Thread(Runnable target)</td><td>分配一个新的Thread对象</td></tr><tr><td>Thread(Runnable target, String name)</td><td>分配一个新的Thread对象</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类<code>MyRunnable</code>实现<code>Runnable</code>接口</li><li>在<code>MyRunnable</code>类中重写<code>run()</code>方法</li><li>创建<code>MyRunnable</code>类的对象</li><li>创建<code>Thread</code>类的对象，把<code>MyRunnable</code>对象作为构造方法的参数</li><li>启动线程</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class MyRunnable implements Runnable{    @Override    public void run() {        for (int i = 0; i &lt; 20; i++) {            System.out.println(Thread.currentThread().getName()+"-&gt;"+i);            try {                Thread.sleep(20);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}public class ProcessesAndThreads {    public static void main(String[] args) {        //第二种方式：实现Runnable接口        MyRunnable myRunnable = new MyRunnable();        Thread thread = new Thread(myRunnable);        //启动线程        thread.start();    }}</code></pre><ul><li><p>相比继承<code>Thread</code>类，实现<code>Runnable</code>接口的好处</p><ul><li><p>避免了Java单继承的局限性</p></li><li><p>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</p></li></ul></li></ul><h3 id="2-3、join与中断线程"><a href="#2-3、join与中断线程" class="headerlink" title="2.3、join与中断线程"></a>2.3、join与中断线程</h3><h4 id="2-3-1、join方法"><a href="#2-3-1、join方法" class="headerlink" title="2.3.1、join方法"></a>2.3.1、join方法</h4><ul><li><p><code>Thread.join()</code>：加入线程，让调用的线程先执行指定时间或执行完毕</p></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//定义join线程public class JoinRunnale implements Runnable {    @Override    public void run() {        for (int i = 0; i &lt; 20; i++) {            //得到当前线程的名称            System.out.println(Thread.currentThread().getName() + "-&gt;" + i);                        try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}//主线程测试public class BInterrupt {    public static void main(String[] args) {            //这里是主线程        //开启一个join线程        JoinRunnale joinRunnale = new JoinRunnale();        Thread thread1 = new Thread(joinRunnale);        thread1.start();        for (int i = 0; i &lt; 20; i++) {            System.out.println(Thread.currentThread().getName() + "-&gt;" + i);            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }            if (i == 10) {                  //此时应等待thread1执行完毕后，主线程才开始执行                try {                    thread1.join();                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h4 id="2-3-2、中断线程"><a href="#2-3-2、中断线程" class="headerlink" title="2.3.2、中断线程"></a>2.3.2、中断线程</h4><ul><li><p>中断线程：停止该线程的执行</p></li><li><p>开启中断线程的方法：</p><ul><li>使用<code>interrupt</code>方法中断线程，设置中断标记,通过抛出异常的方式告知中断某一线程</li><li>自定义中断标记</li></ul></li><li><p>interrupt方法中断线程示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//定义线程类public class InterruptRunnable implements Runnable {    @Override    public void run() {        for (int i = 0; i &lt; 20; i++) {            //检测到线程中断，退出该线程            if (Thread.interrupted()) {                break;            }            System.out.println(Thread.currentThread().getName() + "-&gt;" + i);            //得到当前线程的名称            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();                Thread.currentThread().interrupt();            }        }    }}//测试类public class InterruptDemo {     public static void main(String[] args) { //主线程          //开启线程        InterruptRunnable interruptRunnable1 = new InterruptRunnable();        Thread thread1 = new Thread(interruptRunnable1);        thread1.start();        for (int i = 0; i &lt; 20; i++) {            if (i == 10) {                //当i等于10时，开启线程中断                thread1.interrupt();            }            System.out.println(Thread.currentThread().getName() + "-&gt;" + i);            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}</code></pre><ul><li>自定义中断标记示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">//自定义标记的中断方式public class UserInterruptRunnable implements Runnable {    private boolean flag = true;    public UserInterruptRunnable() {        flag = true;    }    public void setFlag(boolean flag) {        this.flag = flag;    }    @Override    public void run() {        int j = 0;        while (flag) {            System.out.println(Thread.currentThread().getName() + "-&gt;" + j);            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}//测试类public class userinterrupt {    public static void main(String[] args) { //主线程          //开启线程        UserInterruptRunnable userInterruptRunnable = new UserInterruptRunnable();        Thread thread1 = new Thread(userInterruptRunnable);        thread1.start();        for (int i = 0; i &lt; 20; i++) {            //当i等于10时，开启线程中断，更改中断标记            if (i == 10) {                userInterruptRunnable.setFlag(false);            }            System.out.println(Thread.currentThread().getName() + "-&gt;" + i);            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}</code></pre><h3 id="2-4、线程优先级和守护线程"><a href="#2-4、线程优先级和守护线程" class="headerlink" title="2.4、线程优先级和守护线程"></a>2.4、线程优先级和守护线程</h3><h4 id="2-4-1、线程优先级"><a href="#2-4-1、线程优先级" class="headerlink" title="2.4.1、线程优先级"></a>2.4.1、线程优先级</h4><ul><li><p>线程调度</p><ul><li><p>两种调度方式</p><ul><li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li></ul></li><li><p>Java使用的是抢占式调度模型</p></li><li><p>随机性</p><ul><li>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</li></ul></li></ul></li><li><p>优先级相关方法</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>final int getPriority()</td><td>返回此线程的优先级</td></tr><tr><td>final void setPriority(int newPriority)</td><td>更改此线程的优先级                                                           线程默认优先级是5；线程优先级的范围是：1-10</td></tr></tbody></table><blockquote><p>Thread.MAX_PRIORITY最大优先级（10）;Thread.MIN_PRIORITY最小优先级（1）；Thread.NORM_PRIORITY默认优先级（5）</p></blockquote><h4 id="2-4-2、守护线程"><a href="#2-4-2、守护线程" class="headerlink" title="2.4.2、守护线程"></a>2.4.2、守护线程</h4><ul><li><p>线程可以分为守护线程和用户线程</p></li><li><p>当运行的唯一线程都是守护线程时，JVM虚拟机会退出</p></li><li><p>守护线程方法：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public final void setDaemon(boolean on)</td><td>将线程标记为守护线程</td></tr><tr><td>public final boolean isDaemon()</td><td>测试该线程是否是守护线程</td></tr><tr><td>public static void yield()</td><td>暂停当前执行线程，并执行其他线程</td></tr></tbody></table><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">//线程类public class MyDaemonRunnable implements Runnable{    @Override    public void run() {        for (int i = 0; i &lt; 20; i++) {            //获取线程名字            System.out.println(Thread.currentThread().getName()+"-&gt;"+i);            try {                //线程休眠20毫秒                Thread.sleep(20);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}//测试类public class DaemonThreadAndYield {    public static void main(String[] args) {        Thread thread = new Thread(new MyDaemonRunnable());        //线程优先级设置:优先级高可以使得该线程抢占CPU时间片的概率大一点        thread.setPriority(Thread.MIN_PRIORITY);            //MAX_PRIORITY最大优先级;MIN_PRIORITY最小优先级；NORM_PRIORITY默认优先级        //将其设置为守护线程        thread.setDaemon(true);//开启线程        thread.start();        for (int i = 0; i &lt; 20; i++) {            System.out.println(Thread.currentThread().getName()+"-&gt;"+i);            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }        }        System.out.println(thread.isDaemon());      //测试该线程是否是守护线程    }}</code></pre><h3 id="2-5、线程的生命周期"><a href="#2-5、线程的生命周期" class="headerlink" title="2.5、线程的生命周期"></a>2.5、线程的生命周期</h3><ul><li>线程一共有五种状态，线程在各种状态之间转换。</li></ul><p><img src="/posts/5da2/1.png"></p><h2 id="三、线程同步"><a href="#三、线程同步" class="headerlink" title="三、线程同步"></a>三、线程同步</h2><ul><li><p>线程安全：如果有多个线程在同时运行，而这些线程可能会同时运行这段代码。</p></li><li><p>程序每次运行的结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，线程就是安全的。</p></li><li><p>线程同步：当我们使用多个线程访问同一个资源的时候，且多个线程中对资源有写的操作，就容易出现线程安全的问题</p></li><li><p>同步操作方法：</p><ul><li>同步代码块  </li><li>同步方法</li><li>线程同步锁</li></ul></li><li><p>案例需求</p><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p></li></ul><h3 id="3-1、使用同步代码块"><a href="#3-1、使用同步代码块" class="headerlink" title="3.1、使用同步代码块"></a>3.1、使用同步代码块</h3><ul><li><p>同步代码块格式：</p><pre class="language-java" data-language="java"><code class="language-java">synchronized(任意对象) { 多条语句操作共享数据的代码 }</code></pre><p><code>synchronized</code>(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</p></li><li><p>同步的好处和弊端  </p><ul><li><p>好处：解决了多线程的数据安全问题</p></li><li><p>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p></li></ul></li><li><p>代码演示：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//线程类public class synchronizedRunnable implements Runnable{    private int ticket = 100;    private Object object = new Object();    @Override    public void run() {        //此处i = ticket/2时，刚好卖完        for (int i = 0; i &lt;50 ; i++) {            synchronized (object){                if(ticket&gt;0){                    System.out.println("你想购买的票还剩余："+ticket+"张");                    try {                        Thread.sleep(50);                    } catch (InterruptedException e) {                        e.printStackTrace();                    }                    ticket--;                    System.out.println("恭喜您:"+Thread.currentThread().getName()+"，购票成功,还剩余："+ticket+"张");                }else{                    System.out.println("对不起，票已卖完");                }            }        }    }}//测试类public class ThreadSynchronization {    public static void main(String[] args) {         synchronizedRunnable sr = new synchronizedRunnable();        Thread thread1 = new Thread(sr,"一号窗口");        Thread thread2 = new Thread(sy,"二号窗口");        Thread thread3 = new Thread(sy,"三号窗口");        thread1.start();        thread2.start();        thread3.start();    }}</code></pre><h3 id="3-2、使用同步方法"><a href="#3-2、使用同步方法" class="headerlink" title="3.2、使用同步方法"></a>3.2、使用同步方法</h3><ul><li><p>同步方法的格式</p><p>同步方法：就是把<code>synchronized</code>关键字加到方法上</p><pre class="language-java" data-language="java"><code class="language-java">修饰符 synchronized 返回值类型 方法名(方法参数) { 方法体；}</code></pre><p>同步方法的锁对象是什么呢?</p><p>​    this</p></li><li><p>静态同步方法</p><p>同步静态方法：就是把synchronized关键字加到静态方法上</p><pre class="language-java" data-language="java"><code class="language-java">修饰符 static synchronized 返回值类型 方法名(方法参数) { 方法体；}</code></pre><p>同步静态方法的锁对象是什么呢?</p><p>​    类名.class</p></li><li><p>代码演示：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//线程类public class MethodRunnable implements Runnable{    private int ticket = 100;    @Override    public void run() {        for(int i = 0;i&lt;10;i++){            method();        }    }    private synchronized void method(){        if(ticket&gt;0){            System.out.println("您购买的票剩余："+ticket+"张");            try {                Thread.sleep(50);            } catch (InterruptedException e) {                e.printStackTrace();            }            ticket--;            System.out.println("恭喜您:"+Thread.currentThread().getName()+"，购买成功，还剩余票数："+ticket+"张");        }else{            System.out.println("对不起，票已卖完");        }    }}//测试类public class ThreadSynchronization {    public static void main(String[] args) {          MethodRunnable mr = new MethodRunnable();        Thread thread1 = new Thread(mr,"一号窗口");        Thread thread2 = new Thread(mr,"二号窗口");        Thread thread3 = new Thread(mr,"三号窗口");        thread1.start();        thread2.start();        thread3.start();    }}</code></pre><h3 id="3-3、使用线程同步锁"><a href="#3-3、使用线程同步锁" class="headerlink" title="3.3、使用线程同步锁"></a>3.3、使用线程同步锁</h3><p><code>Lock</code>是接口不能直接实例化，这里采用它的实现类<code>ReentrantLock</code>来实例化</p><ul><li><code>ReentrantLock</code>构造方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ReentrantLock()</td><td>创建一个ReentrantLock的实例</td></tr></tbody></table><ul><li>加锁解锁方法</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void lock()</td><td>获得锁</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr></tbody></table><ul><li>代码演示：</li></ul><pre class="language-java" data-language="java"><code class="language-java">//线程类public class LockRunnable implements Runnable{    private int ticket = 100;    private ReentrantLock lock = new ReentrantLock();    @Override    public void run() {        for(int i = 0;i&lt;10;i++){            method();        }    }    private void method(){        lock.lock();        //锁        try{            if(ticket&gt;0){                System.out.println("您购买的票剩余："+ticket+"张");                try {                    Thread.sleep(50);                } catch (InterruptedException e) {                    e.printStackTrace();                }                ticket--;                System.out.println("恭喜您:"+Thread.currentThread().getName()+"，购买成功，还剩余票数："+ticket+"张");            }else{                System.out.println("对不起，票已卖完");            }        }finally {            lock.unlock();      //释放锁        }    }}</code></pre><h2 id="四、线程池"><a href="#四、线程池" class="headerlink" title="四、线程池"></a>四、线程池</h2><ul><li>线程池的好处：<ul><li><strong>降低资源消耗。</strong>通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度。</strong>当任务到达时，任务可以不需要等到线程创建就能立即执行</li><li><strong>提高线程的可管理性。</strong>线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。</li></ul></li><li>线程池工作流程：<ul><li>当提交一个新任务到线程池时，线程池判断核心线程数<code>corePoolSize</code>线程池是否都在执行任务，如果有空闲线程，则从核心线程池中取一个线程来执行任务，直到当前线程数等于<code>corePoolSize</code>；</li><li>如果当前线程数为<code>corePoolSize</code>，继续提交的任务被保存到阻塞队列中，等待被执行；</li><li>如果阻塞队列满了，那就创建新的线程执行当前任务，直到线程池中的线程数达到最大线程数<code>maxPoolSize</code>，这时再有任务来，由饱和策略来处理提交的任务；</li></ul></li><li>创建线程池分类：<ul><li><code>newSingleThreadExecutor</code>：创建一个单线程的线程池，只存在一个线程，若该线程因为异常停止，则会有另一个线程接替执行</li><li><code>newFixedThreadPool</code>：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。该固定线程池的大小达到最大值会保持不变，某个线程因为异常而结束，线程池会补上一个新的线程</li><li><code>newCachedThreadPool</code>：创建一个可缓存的线程池，如果线程池的大小超过处理任务所需的线程，会回收部分空闲的线程。线程池的大小依赖于操作系统能够创建的最大线程大小</li><li><code>newScheduledThreadPool</code>：创建一个无限制大小的线程池</li></ul></li><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ThreadRunnable implements Runnable{    @Override    public void run() {        for (int i = 0; i &lt; 10; i++) {            System.out.println(Thread.currentThread().getName()+"-&gt;"+i);            try {                Thread.sleep(100);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}public class EThreadPool {    public static void main(String[] args) {        //创建线程池：4种方法        //1、创建一个单线程的线程池（newSingleThreadExecutor），只存在一个线程，若该线程因为异常停止，则会有另一个线程接替执行//        ExecutorService es = Executors.newSingleThreadExecutor();//        es.execute(new ThreadRunnable());//        es.shutdown();        //2、创建固定大小的线程池（newFixedThreadPool），每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小        //该固定线程池的大小达到最大值会保持不变，某个线程因为异常而结束，线程池会补上一个新的线程//        ExecutorService es = Executors.newFixedThreadPool(2);//        es.execute(new ThreadRunnable());//        es.execute(new ThreadRunnable());//        es.shutdown();        //3、创建一个可缓存的线程池newCachedThreadPool，如果线程池的大小超过处理任务所需的线程，会回收部分空闲的线程        //线程池的大小依赖于操作系统能够创建的最大线程大小//        ExecutorService es = Executors.newCachedThreadPool();//        es.execute(new ThreadRunnable());//        es.shutdown();        //4、创建一个无限制大小的线程池        ScheduledExecutorService es = Executors.newScheduledThreadPool(3);        es.schedule(new ThreadRunnable(),3000, TimeUnit.MILLISECONDS);      //延时3秒后执行        es.shutdown();    }}</code></pre><h2 id="五、生产者与消费者案例"><a href="#五、生产者与消费者案例" class="headerlink" title="五、生产者与消费者案例"></a>五、生产者与消费者案例</h2><ul><li><p>案例需求</p><p>生产者消费者案例中包含的类：</p><p>奶箱类(Box)：定义一个成员变量，表示第x瓶奶，提供存储牛奶和获取牛奶的操作</p><p>生产者类(Producer)：实现Runnable接口，重写run()方法，调用存储牛奶的操作</p><p>消费者类(Customer)：实现Runnable接口，重写run()方法，调用获取牛奶的操作</p><p>测试类(BoxDemo)：里面有main方法，main方法中的代码步骤如下</p><p>①创建奶箱对象，这是共享数据区域</p><p>②创建消费者创建生产者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作</p><p>③对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作</p><p>④创建2个线程对象，分别把生产者对象和消费者对象作为构造方法参数传递</p><p>⑤启动线程</p></li><li><p>代码实现</p><pre class="language-java" data-language="java"><code class="language-java">public class Box {    //定义一个成员变量，表示第x瓶奶    private int milk;    //定义一个成员变量，表示奶箱的状态    private boolean state = false;    //提供存储牛奶和获取牛奶的操作    public synchronized void put(int milk) {        //如果有牛奶，等待消费        if(state) {            try {                wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        //如果没有牛奶，就生产牛奶        this.milk = milk;        System.out.println("送奶工将第" + this.milk + "瓶奶放入奶箱");        //生产完毕之后，修改奶箱状态        state = true;        //唤醒其他等待的线程        notifyAll();    }    public synchronized void get() {        //如果没有牛奶，等待生产        if(!state) {            try {                wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        //如果有牛奶，就消费牛奶        System.out.println("用户拿到第" + this.milk + "瓶奶");        //消费完毕之后，修改奶箱状态        state = false;        //唤醒其他等待的线程        notifyAll();    }}public class Producer implements Runnable {    private Box b;    public Producer(Box b) {        this.b = b;    }    @Override    public void run() {        for(int i=1; i&lt;=30; i++) {            b.put(i);        }    }}public class Customer implements Runnable {    private Box b;    public Customer(Box b) {        this.b = b;    }    @Override    public void run() {        while (true) {            b.get();        }    }}public class BoxDemo {    public static void main(String[] args) {        //创建奶箱对象，这是共享数据区域        Box b = new Box();        //创建生产者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作        Producer p = new Producer(b);        //创建消费者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作        Customer c = new Customer(b);        //创建2个线程对象，分别把生产者对象和消费者对象作为构造方法参数传递        Thread t1 = new Thread(p);        Thread t2 = new Thread(c);        //启动线程        t1.start();        t2.start();    }}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="/posts/bd7c.html"/>
      <url>/posts/bd7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h2><ul><li><p>异常的概述：异常就是程序出现了不正常的情况</p></li><li><p>异常的体系结构：</p></li></ul><p><img src="/posts/bd7c/1.png"></p><h2 id="二、JVM默认处理异常的方式"><a href="#二、JVM默认处理异常的方式" class="headerlink" title="二、JVM默认处理异常的方式"></a>二、JVM默认处理异常的方式</h2><p>如果程序出现了问题，我们没有做任何处理，最终JVM 会做默认的处理，处理方式有如下两个步骤：</p><ul><li>把异常的名称，错误原因及异常出现的位置等信息输出在了控制台</li><li>程序停止执行</li></ul><h2 id="三、try-catch方式处理异常"><a href="#三、try-catch方式处理异常" class="headerlink" title="三、try-catch方式处理异常"></a>三、try-catch方式处理异常</h2><ul><li><p>定义格式</p><pre class="language-java" data-language="java"><code class="language-java">try {可能出现异常的代码;} catch(异常类名 变量名) {异常的处理代码;} finally{  最终必须执行的代码  }</code></pre></li><li><p>执行流程</p><ul><li>程序从 <code>try</code> 里面的代码开始执行</li><li>出现异常，就会跳转到对应的 <code>catch</code> 里面去执行</li><li>执行完毕之后，程序还可以继续往下执行</li></ul></li></ul><h2 id="四、Throwable成员方法（应用）"><a href="#四、Throwable成员方法（应用）" class="headerlink" title="四、Throwable成员方法（应用）"></a>四、Throwable成员方法（应用）</h2><ul><li><p>常用方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此 throwable 的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table></li><li><p>示例代码</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ExceptionDemo {    public static void main(String[] args) {        System.out.println("开始");        method();        System.out.println("结束");    }    public static void method() {        try {            int[] arr = {1, 2, 3};            System.out.println(arr[3]); //new ArrayIndexOutOfBoundsException();越界异常            System.out.println("这里能够访问到吗");        } catch (ArrayIndexOutOfBoundsException e) { //new ArrayIndexOutOfBoundsException();            //将异常的错误信息输出在控制台上             e.printStackTrace();            //返回此 throwable 的详细消息字符串            //System.out.println(e.getMessage());            //返回此可抛出的简短描述//System.out.println(e.toString());        }    }}</code></pre><h2 id="五、编译时异常和运行时异常的区别"><a href="#五、编译时异常和运行时异常的区别" class="headerlink" title="五、编译时异常和运行时异常的区别"></a>五、编译时异常和运行时异常的区别</h2><ul><li><p>编译时异常</p><ul><li>都是<code>Exception</code>类及其子类</li><li>必须显示处理，否则程序就会发生错误，无法通过编译</li></ul></li><li><p>运行时异常</p><ul><li>都是<code>RuntimeException</code>类及其子类</li><li>无需显示处理，也可以和编译时异常一样处理</li></ul></li></ul><h2 id="六、throws方式处理异常"><a href="#六、throws方式处理异常" class="headerlink" title="六、throws方式处理异常"></a>六、throws方式处理异常</h2><ul><li><p>定义格式</p><pre class="language-java" data-language="java"><code class="language-java">public void 方法() throws 异常类名 {    }</code></pre></li><li><p>注意事项</p><ul><li>这个<code>throws</code>格式是跟在方法的括号后面的</li><li>编译时异常必须要进行处理，两种处理方案：<code>try...catch …</code>或者 <code>throws</code>，如果采用 <code>throws</code> 这种方案，将来谁调用谁处理</li><li>运行时异常可以不处理，出现问题后，需要我们回来修改代码</li></ul></li><li><p><code>throws</code>和<code>throw</code>的区别：</p></li></ul><p><img src="/posts/bd7c/2.png"></p><h2 id="七、自定义异常"><a href="#七、自定义异常" class="headerlink" title="七、自定义异常"></a>七、自定义异常</h2><ul><li><p>自定义异常类</p><pre class="language-java" data-language="java"><code class="language-java">public class ScoreException extends Exception {    public ScoreException() {}    public ScoreException(String message) {        super(message);    }}</code></pre></li><li><p>老师类</p><pre class="language-java" data-language="java"><code class="language-java">public class Teacher {    public void checkScore(int score) throws ScoreException {        if(score&lt;0 || score&gt;100) {//            throw new ScoreException();            throw new ScoreException("你给的分数有误，分数应该在0-100之间");        } else {            System.out.println("成绩正常");        }    }}</code></pre></li><li><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        Scanner sc = new Scanner(System.in);        System.out.println("请输入分数：");        int score = sc.nextInt();        Teacher t = new Teacher();        try {            t.checkScore(score);        } catch (ScoreException e) {            e.printStackTrace();        }    }}</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象知识整理</title>
      <link href="/posts/c427.html"/>
      <url>/posts/c427.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>面向对象的三大特征：封装、继承、多态</strong></p></blockquote><h2 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h2><h3 id="1-1、类和对象的理解"><a href="#1-1、类和对象的理解" class="headerlink" title="1.1、类和对象的理解"></a>1.1、类和对象的理解</h3><ul><li><p><strong>对象：</strong>客观存在的事物皆为对象，即万物皆对象</p></li><li><p><strong>类：</strong>类是对现实事物的一种描述</p><ul><li>类的组成<ul><li>属性：指事物的特征</li><li>行为：指事物能执行的操作</li></ul></li></ul></li><li><p><strong>类和对象的关系</strong></p><ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2、类的定义"><a href="#1-2、类的定义" class="headerlink" title="1.2、类的定义"></a>1.2、类的定义</h3><ul><li><p>类的组成是由属性和行为两部分组成：</p><ul><li>属性：在类中通过成员变量来体现</li><li>行为：在类中通过成员方法来体现</li></ul></li><li><p>类的定义格式：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class 类名 {// 成员变量变量1的数据类型 变量1；变量2的数据类型 变量2;…// 成员方法方法1;方法2;}</code></pre><h3 id="1-3、对象的定义"><a href="#1-3、对象的定义" class="headerlink" title="1.3、对象的定义"></a>1.3、对象的定义</h3><ul><li>对象的定义</li></ul><pre class="language-java" data-language="java"><code class="language-java">格式：类名 对象名称 = new 类名();范例：People p = new People();</code></pre><ul><li>使用对象</li></ul><pre class="language-java" data-language="java"><code class="language-java">格式：对象名称.变量名对象名称.方法名()</code></pre><h3 id="1-4、对象在内存中的结构"><a href="#1-4、对象在内存中的结构" class="headerlink" title="1.4、对象在内存中的结构"></a>1.4、对象在内存中的结构</h3><ul><li><p>栈内存：存放对象名称地址</p></li><li><p>堆内存：实际存放对象属性、方法</p></li><li><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h2 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h2><h3 id="2-1、封装的理解"><a href="#2-1、封装的理解" class="headerlink" title="2.1、封装的理解"></a>2.1、封装的理解</h3><ul><li>封装隐藏实现细节，仅对外提供访问接口，外界无法直接访问</li><li>封装分为：属性的封装、方法的封装、类的封装、组件封装、模块化封装</li><li>封装原则：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量<code>private</code>，提供对应的<code>getXxx()/setXxx()</code>方法</li><li>封装的好处：提高了代码的安全性、复用性</li></ul><h3 id="2-2、private关键字"><a href="#2-2、private关键字" class="headerlink" title="2.2、private关键字"></a>2.2、private关键字</h3><ul><li><code>private</code>是一个修饰符，可以用来修饰成员（成员变量，成员方法）</li></ul><ul><li><p>被<code>private</code>修饰的成员，只能在本类进行访问，针对<code>private</code>修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用<code>public</code>修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用<code>public</code>修饰</li></ul></li></ul><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">/*学生类*/class Student {    //成员变量    String name;    private int age;    //提供get/set方法    public void setAge(int a) {        if(a&lt;0 || a&gt;120) {            System.out.println("你给的年龄有误");        } else {            age = a;        }    }    public int getAge() {        return age;    }    //成员方法    public void show() {        System.out.println(name + "," + age);    }}/* 学生测试类 */public class StudentDemo {    public static void main(String[] args) {        //创建对象        Student s = new Student();        //给成员变量赋值        s.name = "林青霞";        s.setAge(30);        //调用show方法        s.show();    }}</code></pre><h3 id="2-3、this关键字"><a href="#2-3、this关键字" class="headerlink" title="2.3、this关键字"></a>2.3、this关键字</h3><ul><li><p><code>this</code>修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）</p><ul><li>方法的形参如果与成员变量同名，不带<code>this</code>修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带<code>this</code>修饰的变量指的是成员变量</li></ul></li><li><p><code>this</code>代表当前调用方法的引用，哪个对象调用的方法，<code>this</code>就代表哪一个对象</p></li></ul><h3 id="2-4、static关键字"><a href="#2-4、static关键字" class="headerlink" title="2.4、static关键字"></a>2.4、static关键字</h3><ul><li><code>static</code>关键字修饰属性：声明为该<code>static</code>的变量为全局变量</li><li><code>static</code>关键字修饰方法：在类中定义一个<code>static</code>方法，无需本类对象即可调用该方法</li><li><code>static</code>关键字修饰类：内部类</li></ul><h3 id="2-5、权限修饰符"><a href="#2-5、权限修饰符" class="headerlink" title="2.5、权限修饰符"></a>2.5、权限修饰符</h3><table><thead><tr><th>修饰符</th><th>同一个类中</th><th>同一个包中子类无关类</th><th>不同包的子类</th><th>不同包的无关类</th></tr></thead><tbody><tr><td>private</td><td>Y</td><td></td><td></td><td></td></tr><tr><td>默认</td><td>Y</td><td>Y</td><td></td><td></td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td></td></tr><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table><h2 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h2><h3 id="3-1、继承的基本概念"><a href="#3-1、继承的基本概念" class="headerlink" title="3.1、继承的基本概念"></a>3.1、继承的基本概念</h3><ul><li>继承是子类继承父类的属性和行为，只能继承非私有的数据</li><li>实现继承的格式：通过<code>extends</code>关键字</li></ul><pre class="language-none"><code class="language-none">class 子类名 extends 父类名{}</code></pre><ul><li>继承的好处：继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。</li><li>继承后子类的特点：<ul><li>成员变量<ul><li>如果子类和父类出现重名的成员变量，访问有影响</li><li>若子类和父类出现重名的成员变量，在子类中想访问父类的成员变量时，可以使用<code>super</code>关键字修饰该父类成员变量</li></ul></li><li>成员方法<ul><li>成员方法不重名，无冲突，调用时现在子类中查找，后在父类中查找</li><li>成员方法重名，进行方法重写（方法名一样，参数列表也必须一样）</li></ul></li><li>构造方法<ul><li>子类无法继承父类的构造方法</li><li>创建对象时会调用构造方法，调用构造方法就不一定是创建对象</li></ul></li></ul></li></ul><h3 id="3-2、spuer关键字"><a href="#3-2、spuer关键字" class="headerlink" title="3.2、spuer关键字"></a>3.2、spuer关键字</h3><ul><li><code>this&amp;super</code>关键字：<ul><li><code>this</code>：代表本类对象的引用</li><li><code>super</code>：代表父类存储空间的标识(可以理解为父类对象引用)</li></ul></li><li><code>this</code>和<code>supe</code>r的使用分别<ul><li>成员变量：<ul><li><code>this.成员变量</code>    -   访问本类成员变量</li><li><code>super.成员变量</code> -   访问父类成员变量</li></ul></li><li>成员方法：<ul><li><code>this.成员方法</code>  - 访问本类成员方法</li><li><code>super.成员方法</code> - 访问父类成员方法</li></ul></li></ul></li><li>构造方法：<ul><li><code>this.(…)</code>  -  访问本类构造方法</li><li><code>super.(…)</code>  -  访问父类构造方法</li></ul></li></ul><h3 id="3-3、final关键字"><a href="#3-3、final关键字" class="headerlink" title="3.3、final关键字"></a>3.3、final关键字</h3><ul><li><code>fianl</code>关键字的作用<ul><li><code>final</code>代表最终的意思，可以修饰成员方法，成员变量，类</li></ul></li><li><code>final</code>修饰类、方法、变量的效果  <ul><li><code>fianl</code>修饰类：该类不能被继承（不能有子类，但是可以有父类）</li><li><code>final</code>修饰方法：该方法不能被重写</li><li><code>final</code>修饰变量：表明该变量是一个常量，不能再次赋值</li></ul></li></ul><h2 id="四、多态"><a href="#四、多态" class="headerlink" title="四、多态"></a>四、多态</h2><h3 id="4-1、多态的概念"><a href="#4-1、多态的概念" class="headerlink" title="4.1、多态的概念"></a>4.1、多态的概念</h3><ul><li><p>多态：同一个对象，在不同时刻表现出来的不同形态</p></li><li><p>多态的前提：</p><ul><li>要有继承或实现关系</li><li>要有方法的重写</li><li>要有父类引用指向子类</li></ul></li><li><p>多态的访问特点</p><ul><li>成员变量：编译看父类，运行看父类</li><li>成员方法：编译看父类，运行看子类</li></ul></li><li><p>测试示例</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//动物父类public class Animal {    public int age = 40;    public void eat() {        System.out.println("动物吃东西");    }}//猫子类public class Cat extends Animal {    public int age = 20;    public int weight = 10;    @Override    public void eat() {        System.out.println("猫吃鱼");    }    public void playGame() {        System.out.println("猫捉迷藏");    }}//测试类public class AnimalDemo {    public static void main(String[] args) {        //有父类引用指向子类对象        Animal a = new Cat();        System.out.println(a.age);//        System.out.println(a.weight);        a.eat();//        a.playGame();    }}</code></pre><h3 id="4-2、多态转型"><a href="#4-2、多态转型" class="headerlink" title="4.2、多态转型"></a>4.2、多态转型</h3><ul><li><p>向上转型</p><p>​    父类引用指向子类对象就是向上转型</p></li><li><p>向下转型</p><p>​    格式：子类型 对象名 = (子类型)父类引用;</p></li></ul><h2 id="五、抽象类"><a href="#五、抽象类" class="headerlink" title="五、抽象类"></a>五、抽象类</h2><h3 id="5-1、抽象类概述"><a href="#5-1、抽象类概述" class="headerlink" title="5.1、抽象类概述"></a>5.1、抽象类概述</h3><ul><li>当我们在做子类共性功能抽取时，有些方法在父类中并没有具体的体现，这个时候就需要抽象类了！</li></ul><ul><li><p>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类！</p></li><li><p>定义格式：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//抽象类的定义public abstract class 类名 {}//抽象方法的定义public abstract void eat();</code></pre><h3 id="5-2、抽象类的特点"><a href="#5-2、抽象类的特点" class="headerlink" title="5.2、抽象类的特点"></a>5.2、抽象类的特点</h3><ul><li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象类不能实例化，只能通过子类对象实例化</li><li>抽象类的子类要么重写父类中所有的抽象方法，要么是抽象类</li></ul><h2 id="六、接口"><a href="#六、接口" class="headerlink" title="六、接口"></a>六、接口</h2><h3 id="6-1、接口的概述"><a href="#6-1、接口的概述" class="headerlink" title="6.1、接口的概述"></a>6.1、接口的概述</h3><p>​    接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用。</p><p>​    Java中的接口更多的体现在对行为的抽象！</p><h3 id="6-2、接口的特点"><a href="#6-2、接口的特点" class="headerlink" title="6.2、接口的特点"></a>6.2、接口的特点</h3><ul><li><p>接口用关键字<code>interface</code>修饰</p><pre class="language-java" data-language="java"><code class="language-java">public interface 接口名 {} </code></pre></li><li><p>类实现接口用<code>implements</code>表示</p><pre class="language-java" data-language="java"><code class="language-java">public class 类名 implements 接口名 {}</code></pre></li><li><p>接口不能实例化</p><p>​    接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。</p><p>​    多态的形式：具体类多态，抽象类多态，接口多态。 </p></li><li><p>接口的子类</p><p>​    要么重写接口中的所有抽象方法</p><p>​    要么子类也是抽象类</p></li><li><p>成员特点</p><ul><li><p>成员变量</p><ul><li>只能是常量，默认修饰符：<code>public static final</code></li></ul></li><li><p>构造方法</p><ul><li>没有，因为接口主要是扩展功能的，而没有具体存在</li></ul></li><li><p>成员方法</p><ul><li>只能是抽象方法，默认修饰符：<code>public abstract</code></li></ul></li></ul></li></ul><h2 id="七、内部类"><a href="#七、内部类" class="headerlink" title="七、内部类"></a>七、内部类</h2><h3 id="7-1、内部类的基本使用"><a href="#7-1、内部类的基本使用" class="headerlink" title="7.1、内部类的基本使用"></a>7.1、内部类的基本使用</h3><ul><li><p>内部类概念：在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</p></li><li><p>内部类定义格式：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">class 外部类名{   修饰符 class 内部类名{      }   }</code></pre><ul><li><p>内部类的访问特点：</p><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul></li><li><p>内部类分类：成员内部类、方法内部类、静态内部类、匿名内部类</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java IO知识整理</title>
      <link href="/posts/53a3.html"/>
      <url>/posts/53a3.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h2><h3 id="1-1、File类的概述"><a href="#1-1、File类的概述" class="headerlink" title="1.1、File类的概述"></a>1.1、File类的概述</h3><ul><li><p><code>File</code>类介绍</p><ul><li>它是文件和目录路径名的抽象表示</li><li>文件和目录是可以通过<code>File</code>封装成对象的</li><li>对于<code>File</code>而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的</li></ul></li><li><p><code>File</code>类的构造方法：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String   pathname)</td><td>通过给定的路径名字符串转换为抽象路径名来创建新的 File实例</td></tr><tr><td>File(String   parent, String child)</td><td>从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td>File(File   parent, String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class FileDemo {    public static void main(String[] args) {        //File(String pathname)：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。        File f1 = new File("E:\\itcast\\java.txt");        System.out.println(f1);        //File(String parent, String child)：从父路径名字符串和子路径名字符串创建新的 File实例。        File f2 = new File("E:\\itcast","java.txt");        System.out.println(f2);        //File(File parent, String child)：从父抽象路径名和子路径名字符串创建新的 File实例。        File f3 = new File("E:\\itcast");        File f4 = new File(f3,"java.txt");        System.out.println(f4);    }}</code></pre><h3 id="1-2、File类创建功能"><a href="#1-2、File类创建功能" class="headerlink" title="1.2、File类创建功能"></a>1.2、File类创建功能</h3><ul><li>创建方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径名命名的目录</td></tr></tbody></table><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class FileDemo {    public static void main(String[] args) throws IOException {        //需求1：我要在E:\\itcast目录下创建一个文件java.txt        File f1 = new File("E:\\itcast\\java.txt");        System.out.println(f1.createNewFile());        System.out.println("--------");        //需求2：我要在E:\\itcast目录下创建一个目录JavaSE        File f2 = new File("E:\\itcast\\JavaSE");        System.out.println(f2.mkdir());        System.out.println("--------");    }}</code></pre><h3 id="1-3、File类删除功能"><a href="#1-3、File类删除功能" class="headerlink" title="1.3、File类删除功能"></a>1.3、File类删除功能</h3><ul><li>删除方法：</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean   delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class FileDemo {    public static void main(String[] args) throws IOException {        //需求1：在当前模块目录下创建java.txt文件        File f1 = new File("myFile\\java.txt");        //需求2：删除当前模块目录下的java.txt文件        System.out.println(f1.delete());        //需求3：在当前模块目录下创建itcast目录        File f2 = new File("myFile\\itcast");        //需求4：删除当前模块目录下的itcast目录        System.out.println(f2.delete());        //需求5：在当前模块下创建一个目录itcast,然后在该目录下创建一个文件java.txt        File f3 = new File("myFile\\itcast");        File f4 = new File("myFile\\itcast\\java.txt");        //需求6：删除当前模块下的目录itcast        System.out.println(f4.delete());        System.out.println(f3.delete());    }}</code></pre><h3 id="1-4、File类判断和获取功能"><a href="#1-4、File类判断和获取功能" class="headerlink" title="1.4、File类判断和获取功能"></a>1.4、File类判断和获取功能</h3><ul><li><p>判断功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public   boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>public   boolean   exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr></tbody></table></li><li><p>获取功能</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public   String getPath()</td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td>public   String getName()</td><td>返回由此抽象路径名表示的文件或目录的名称</td></tr><tr><td>public   String[] list()</td><td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public   File[] listFiles()</td><td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td></tr></tbody></table></li><li><p>绝对路径和相对路径的区别</p><ul><li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：<code>E:\itcast\java.txt</code></li><li>相对路径：必须使用取自其他路径名的信息进行解释。例如：<code>myFile\\java.txt</code></li></ul></li></ul><h2 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h2><h3 id="2-1、IO流概述"><a href="#2-1、IO流概述" class="headerlink" title="2.1、IO流概述"></a>2.1、IO流概述</h3><ul><li><code>IO流</code>介绍：<ul><li><code>IO</code>：输入输出（<code>Input/Output</code>）</li><li>IO流的本质是数据传输，根据数据传输的特性将流抽象为各种类</li></ul></li><li><code>IO流</code>分类：<ul><li>根据处理数据类型的不同：字符流、字节流</li><li>根据数据流流向不同：输入流、输出流</li></ul></li><li><code>IO流</code>的使用场景<ul><li>如果操作的是纯文本文件，优先使用字符流</li><li>如果操作的是图片、视频、音频等二进制文件。优先使用字节流</li><li>如果不确定文件类型，优先使用字节流。字节流是万能的流</li></ul></li></ul><h3 id="2-2、字节流"><a href="#2-2、字节流" class="headerlink" title="2.2、字节流"></a>2.2、字节流</h3><ul><li>字节流抽象基类：<ul><li><code>InputStream</code>：这个抽象类是表示字节输入流的所有类的超类</li><li><code>OutputStream</code>：这个抽象类是表示字节输出流的所有类的超类</li></ul></li></ul><h4 id="2-2-1、字节输出流"><a href="#2-2-1、字节输出流" class="headerlink" title="2.2.1、字节输出流"></a>2.2.1、字节输出流</h4><ul><li><p>字节输出流：</p><ul><li>从程序写入到文件中去</li><li><code>FileOutputStream(String name)</code>：创建文件输出流以指定的名称写入文件</li></ul></li><li><p>字节输出流使用步骤：</p><ul><li>确定目标文件</li><li>构建文件的字节流输出对象</li><li>确定要输出的内容</li><li>将内容写到文件中去</li><li>释放流</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class FileOutputStreamDemo {    public static void main(String[] args) throws IOException {        //确定目标文件        File file = new File("myByteStream\\fos.txt");        //创建字节输出流对象        FileOutputStream fos = new FileOutputStream(file);        //确定要输出的内容        String str = "输出内容";        //将内容写入到文件中        fos.write(str.getBytes());        //关闭流        fos.close();    }}</code></pre><ul><li>字节流写入数据如何实现追加<ul><li><code>public FileOutputStream(String name,boolean append)</code></li><li>创建文件输出流以指定的名称写入文件。如果第二个参数为<code>true</code> ，则字节将写入文件的末尾而不是开头</li></ul></li></ul><h4 id="2-2-2、字节输入流"><a href="#2-2-2、字节输入流" class="headerlink" title="2.2.2、字节输入流"></a>2.2.2、字节输入流</h4><ul><li><p>字节输入流：</p><ul><li>从文件读取到程序中来</li><li><code>FileInputStream(String name)</code>：通过打开与实际文件的连接来创建一个<code>FileInputStream</code> ，该文件由文件系统中的路径名<code>name</code>命名</li></ul></li><li><p>字节输入流使用步骤：</p><ul><li>确定目标文件</li><li>构建文件的字节流输入对象</li><li>创建字节数组</li><li>定义每次读取字节长度</li><li>把数据读入到数组中，返回读取的字节数，当不等于-1时，表示读取到数据</li><li>释放流</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class FileOutputStreamDemo {    public static void main(String[] args) throws IOException {        //确定目标文件        File file = new File("myByteStream\\fos.txt");        //创建字节输出流对象        FileInputStream fis = new FileIutputStream(file);        //创建字节数组        byte[] bytes = new byte[1024];        StringBuilder buf = new StringBuilder();        //定义每次读取字节长度        int len = -1;        //把数据读入到数组中，返回读取的字节数，当不等于-1时，表示读取到数据        while((len = fis.read(bytes)) != -1){            buf.append(new String(bytes,0,len));        }        //打印输入内容        System.out.println(buf);        //关闭流        fis.close();    }}</code></pre><h3 id="2-3、字符流"><a href="#2-3、字符流" class="headerlink" title="2.3、字符流"></a>2.3、字符流</h3><p>字符流抽象基类：</p><ul><li><code>Reader</code>：这个抽象类是表示字符输入流的超类</li><li><code>Writer</code>：这个抽象类是表示字符输出流的超类</li></ul><h4 id="2-3-1、字符输出流"><a href="#2-3-1、字符输出流" class="headerlink" title="2.3.1、字符输出流"></a>2.3.1、字符输出流</h4><ul><li><p>字符输出流：</p><ul><li>从程序写入到文件中去</li><li><code>FileWriter(String name)</code>：创建文件输出流以指定的名称写入文件</li></ul></li><li><p>字节输出流使用步骤：</p><ul><li>确定目标文件</li><li>构建文件的字符流输出对象</li><li>确定要输出的内容</li><li>将内容写到文件中去</li><li>释放流</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class CharStream{public static void main(String[] args) throws IOException { //确定目标文件    File file = new File("D:\\java\\daima\\123456.txt");//构建文件的字符流输出对象        Writer writer = new FileWriter(file);        //确定要输出的内容        String str = "输出内容";        //将内容写到文本中去        writer.write(str);             //释放流        reader.close();   }}</code></pre><h4 id="2-3-2、字符输入流"><a href="#2-3-2、字符输入流" class="headerlink" title="2.3.2、字符输入流"></a>2.3.2、字符输入流</h4><ul><li><p>字符输入流：</p><ul><li>从文件读取到程序中来</li><li><code>FileReader(String name)</code>：创建文件输出流以指定的名称写入文件</li></ul></li><li><p>字节输出流使用步骤：</p><ul><li>确定目标文件</li><li>构建文件的字符流输入对象</li><li>创建字符数组</li><li>定义每次读取字符长度</li><li>把数据读入到数组中，返回读取的字符数，当不等于-1时，表示读取到数据</li><li>释放流</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class CharStream{public static void main(String[] args) throws IOException { //确定目标文件    File file = new File("D:\\java\\daima\\123456.txt");    //创建文件的字符流输入对象Reader reader = new FileReader(file);//创建字符数组        StringBuilder str = new StringBuilder();        char[] chars = new char[1];        //定义每次读取字符长度        int length = -1;        //把数据读入到数组中，返回读取的字符数，当不等于-1时，表示读取到数据        while ((length = reader.read(chars))!=-1){            str.append(new String(chars,0,length));        }        reader.close();    }}</code></pre><h3 id="2-4、字节字符转换流"><a href="#2-4、字节字符转换流" class="headerlink" title="2.4、字节字符转换流"></a>2.4、字节字符转换流</h3><ul><li><code>OutputStreamWriter</code>：可将输出的字符流转换为字节流输出形式</li><li><code>InputStreamReader</code>：可将输入的字节流转换为字符流输入形式</li></ul><h2 id="三、缓冲流"><a href="#三、缓冲流" class="headerlink" title="三、缓冲流"></a>三、缓冲流</h2><ul><li>缓冲流：能够高效的读写信息，现将数据缓存起来，然后一起写入或读取</li><li>缓冲流的分类：<ul><li>字节缓冲流</li><li>字符缓冲流</li></ul></li></ul><h3 id="3-1、字节缓冲流"><a href="#3-1、字节缓冲流" class="headerlink" title="3.1、字节缓冲流"></a>3.1、字节缓冲流</h3><ul><li><p>字节缓冲流介绍：</p><ul><li><code>BufferedOutputStream</code>：字节缓冲输出流<ul><li>通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</li><li><code>BufferedOutputStream</code> 内部默认缓存大小是8kb，每次写入时存储到缓存的byte数组中，当数组存满时，会把数组中的数据写入文件，并将缓存清零</li></ul></li><li><code>BufferedInputStream</code>：字节缓冲输入流。<ul><li>创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</li></ul></li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class bytebuffer{public static void main(String[] args) throws IOException {        //确定缓冲输入流的目标文件        File file = new File("D:\\java\\daima\\123456.txt");        //确定缓冲输出流的目标文件        File copy = new File("D:\\java\\daima\\copy.txt");        //记录开始的时间        long start = System.currentTimeMillis();        //创建字节缓冲输入流对象        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));        //创建字节缓冲输出流对象        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(copy));        //定义字节数组以及每次读取字节长度        int len = -1;        byte[] bytes = new byte[1024];        //读取文件内容放到字节数组中，并写入到另一文件        while ((len = bis.read(bytes))!=-1){            bos.write(bytes,0,len);            //刷新缓存            bos.flush();        }        bis.close();        bos.close();        long end = System.currentTimeMillis();        System.out.println("复制所用的时间为"+(end - start)+"毫秒");}}</code></pre><h3 id="3-2、字符缓冲流"><a href="#3-2、字符缓冲流" class="headerlink" title="3.2、字符缓冲流"></a>3.2、字符缓冲流</h3><ul><li><p>字符缓冲流介绍：</p><ul><li><p><code>BufferedWriter</code>：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</p></li><li><p><code>BufferedReader</code>：从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。 默认值足够大，可用于大多数用途</p></li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class charbuffer{public static void main(String[] args) throws IOException {        //确定缓冲输入流的目标文件        File file = new File("D:\\java\\daima\\123456.txt");        //确定缓冲输出流的目标文件        File copy = new File("D:\\java\\daima\\copy.txt");        //记录开始的时间        long start = System.currentTimeMillis();        //创建字节缓冲输入流对象        BufferedReader br = new BufferedReader(new FileReader(file));        //创建字节缓冲输出流对象        BufferedWriter bw = new BufferedWriter(new FileWriter(copy));        //定义字节数组以及每次读取字节长度        int len = -1;        char[] chars = new char[1024];        //读取文件内容放到字节数组中，并写入到另一文件        while ((len = br.read(chars))!=-1){            bw.write(chars,0,len);            //刷新缓存            bw.flush();        }        br.close();        bw.close();        long end = System.currentTimeMillis();        System.out.println("复制所用的时间为"+(end - start)+"毫秒");}}</code></pre><h2 id="四、特殊操作流"><a href="#四、特殊操作流" class="headerlink" title="四、特殊操作流"></a>四、特殊操作流</h2><h3 id="4-1、打印流"><a href="#4-1、打印流" class="headerlink" title="4.1、打印流"></a>4.1、打印流</h3><ul><li><p>打印流分类：</p><ul><li>字节打印流：<code>PrintStream</code></li><li>字符打印流：<code>PrintWriter</code></li></ul></li><li><p>打印流的特点</p><ul><li>只负责输出数据，不负责读取数据</li><li>永远不会抛出<code>IOException</code></li><li>有自己的特有方法</li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//字节打印流public class PrintStreamDemo {    public static void main(String[] args) throws IOException {        //PrintStream(String fileName)：使用指定的文件名创建新的打印流        PrintStream ps = new PrintStream("myOtherStream\\ps.txt");        //写数据        ps.write(97);        //释放资源        ps.close();    }}//字符打印流public class PrintWriterDemo {    public static void main(String[] args) throws IOException {        PrintWriter pw = new PrintWriter(new FileWriter("myOtherStream\\pw.txt"),true);        pw.println("hello");    //  pw.write("hello");        pw.flush();        pw.close();    }}</code></pre><h3 id="4-2、对象流"><a href="#4-2、对象流" class="headerlink" title="4.2、对象流"></a>4.2、对象流</h3><ul><li><p>对象流介绍：</p><ul><li><code>ObjectOutputStream</code>：对象序列化流<ul><li>将对象保存到磁盘中去，或者在网络上传输对象。</li><li>将Java对象的原始数据类型和图形写入<code>OutputStream</code>。</li></ul></li><li><code>ObjectInputStream</code>：对象反序列化流<ul><li><code>ObjectInputStream</code>反序列化先前使用<code>ObjectOutputStream</code>编写的原始数据和对象</li></ul></li></ul></li><li><p>示例：</p><ul><li><p>对象类</p><pre class="language-java" data-language="java"><code class="language-java">class Employee implements Serializable{    private String name;    private String address;    private transient int age;      //此时不可被序列化    public Employee() {    }    public Employee(String name, String address, int age) {        this.name = name;        this.address = address;        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return "Employee{" +                "name='" + name + '\'' +                ", address='" + address + '\'' +                ", age=" + age +                '}';    }}</code></pre></li><li><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java">public class ObjectStream {    public static void main(String[] args) throws Exception{        //初始化类        Employee em = new Employee("张珊","南京",20);        //确定目标文件        File file = new File("File1\\object.txt");        //创建序列化流对象        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file));        //序列化输出        oos.writeObject(em);        //关闭流        oos.close();        System.out.println("序列化完成");               //进行反序列化操作        Employee em1 = null;        //创建反序列化流        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));        //对象反序列化        em1 = (Employee)ois.readObject();        //关闭流        ois.close();        System.out.println(em1.toString());    }}</code></pre></li></ul></li><li><p>注意事项</p><ul><li>一个对象要想被序列化，该对象所属的类必须必须实现<code>Serializable</code> 接口</li><li><code>Serializable</code>是一个标记接口，实现该接口，不需要重写任何方法</li><li>如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰</li></ul></li></ul><h3 id="4-3、字节数组流"><a href="#4-3、字节数组流" class="headerlink" title="4.3、字节数组流"></a>4.3、字节数组流</h3><ul><li><p>字节数组流介绍：</p><ul><li><code>ByteArrayInputStream</code>：字节数组输入流<ul><li>包含一个内部缓冲区，该缓冲区包含从流中读取的字节</li></ul></li><li><code>ByteArrayOutputStream</code>：字节数组输出流<ul><li>此类实现一个输出流，其中的数据被写入一个<code>byte</code>数组</li></ul></li></ul></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">//从字符串中提取指定字符public class GByteArrayStream {    public static void main(String[] args) {        String s = "adsdQ46556$%^&amp;*WIEQRQ";        ByteArrayInputStream bais = new ByteArrayInputStream(s.getBytes());        ByteArrayOutputStream baos = new ByteArrayOutputStream();        int curr = -1;        while((curr = bais.read())!=-1) {            if((curr&gt;=65 &amp;&amp; curr&lt;=90) || (curr&gt;=97 &amp;&amp; curr&lt;=122)) {                baos.write(curr);            }        }        System.out.println(baos.toString());    }}</code></pre><h3 id="4-4、应用案例"><a href="#4-4、应用案例" class="headerlink" title="4.4、应用案例"></a>4.4、应用案例</h3><p>实现文件的分割与合并</p><pre class="language-java" data-language="java"><code class="language-java">public class HDataStream {    public static void main(String[] args) {//        File target = new File("E:\\IO流原理介绍.mp4");//        File combine = new File("D:\\File");//        Division(target,combine,1021*1024*20);        //合并文件测试        File target = new File("D:\\File");        File combin = new File("D:\\FindFile");        Merge(target,combin,"mp4");    }    /**文件的分割     * @param target:被分割目标文件位置     * @param combine:文件分割后存放位置     * @param cutsize:被分割文件后每个文件大小     */    public static void Division(File target,File combine,long cutsize){        if(target == null)return;        //计算文件分割的个数        int num = (target.length()%cutsize == 0)?(int) (target.length()/cutsize):(int)(target.length()/cutsize+1);        //构造文件输入流,输出流        try {            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(target));            BufferedOutputStream bos = null;            byte[] bytes = null;            int len = -1;            int count = 0;      //每个文件要读取的次数            for(int i=0;i&lt;num;i++){                String path = combine.getPath().concat("\\");                bos = new BufferedOutputStream(new FileOutputStream(new File(path+(i+1)+target.getName())));                if(cutsize&lt;=1024) {                    bytes = new byte[(int)cutsize];                    count = 1;                }else {                    bytes = new byte[1024];                    count = (int)cutsize/1024;//计算每个分割文件需要读取的次数                }                while(count&gt;0 &amp;&amp; (len = bis.read(bytes))!=-1) {                    bos.write(bytes,0,len);                    bos.flush();                    count --;                }                if(cutsize%1024 !=0) {                    bytes = new byte[(int)cutsize%1024];                    len = bis.read(bytes);                    bos.write(bytes,0,len);                    bos.flush();                    bos.close();                }            }            bis.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }    //文件的合并    public static void Merge(File target,File combin,String type){        if(target == null)return;        File[] files = target.listFiles();          //创建文件夹数组        String path = combin.getPath().concat("\\");        long start = System.currentTimeMillis();        try {            BufferedInputStream bis = null;            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(path+"合并文件."+type)));            for (int i = 0; i &lt; files.length; i++) {        //遍历文件夹                if(files[i].getName().endsWith(type)){                    bis = new BufferedInputStream(new FileInputStream(files[i]));                    byte[] bytes = new byte[1024];                    int len = -1;                    while ((len = bis.read(bytes))!= -1){                        bos.write(bytes,0,len);                    }                    bis.close();                }else                    continue;            }            bos.close();            long end = System.currentTimeMillis();            System.out.println("合并用时："+(end-start)+"毫秒");        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre><h2 id="五、Properties文件操作"><a href="#五、Properties文件操作" class="headerlink" title="五、Properties文件操作"></a>五、Properties文件操作</h2><ul><li><p><code>Properties</code>介绍</p><ul><li>是一个Map体系的集合类</li><li>Properties可以保存到流中或从流中加载</li><li>属性列表中的每个键及其对应的值都是一个字符串</li></ul></li><li><p>示例</p><ul><li><p><code>Config.Properties</code>文件</p><pre class="language-properties" data-language="properties"><code class="language-properties">VINCE=2PASSWORD=5841314USERNAME=laohu</code></pre></li><li><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java">/**配置文件操作：Properties * 用于读取配置文件 */public class Properties {    public static String VINCE = "";    public static String USERNAME = "";    public static String PASSWORD = "";    public static void main(String[] args) {        //对配置文件进行读取        Properties properties = new Properties();        try {            InputStream inputStream = new FileInputStream("Config.properties");            properties.load(inputStream);           //加载文件            VINCE = properties.getProperty("VINCE");                //从配置文件中获取对应的信息            USERNAME = properties.getProperty("USERNAME");            PASSWORD = properties.getProperty("PASSWORD");            inputStream.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        System.out.println(IProperties.VINCE);        updata("2","laohu","5841314");    }    //对配置文件进行更新    public static void updata(String vince,String username,String password){        Properties properties = new Properties();        properties.put("VINCE",vince);              //参数分别为：所需更改的内容名称；更改后的内容        properties.put("USERNAME",username);        properties.put("PASSWORD",password);        try {            OutputStream outputStream = new FileOutputStream("Config.properties");            properties.store(outputStream,"updata");            //写入更改            System.out.println("更新完毕");        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }    }}</code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合知识整理</title>
      <link href="/posts/89f0.html"/>
      <url>/posts/89f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li><p>什么是集合：</p><ul><li><strong>集合框架</strong>：用于存储数据的容器</li><li><strong>实现</strong>：集合接口的具体实现，是重用性很高的数据结构</li></ul></li><li><p>集合的特点：</p><ul><li>对象封装数据，对象多了也需要存储。集合用于存储对象。</li><li>对象的个数确定可以使用数组，对象的个数不确定的可以用集合。因为集合是可变长度的。</li></ul></li><li><p><strong>集合与数组的区别：</strong></p></li><li><p>数组是固定长度的；集合可变长度的。</p><ul><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</li></ul></li><li><p>常用的集合类有哪些：</p><ul><li><p><code>Map接口</code>和<code>Collection接口</code>是所有集合框架的父接口</p></li><li><p><code>Collection</code>接口的子接口包括：<code>List接口</code>和<code>Set接口</code></p><ul><li><code>List接口</code>的实现类主要有：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>等</li><li><code>Set接口</code>的实现类主要有：<code>HashSet</code>、<code>TreeSet</code>、<code>LinkedHashSe</code>t等</li></ul></li><li><p><code>Map接口</code>的实现类主要有：<code>HashMap</code>、<code>TreeMap</code>、<code>Hashtable</code>、<code>LinkedHashMap</code>等</p></li></ul></li></ul><p><img src="/posts/89f0/1.png"></p><h2 id="二、Collection接口"><a href="#二、Collection接口" class="headerlink" title="二、Collection接口"></a>二、Collection接口</h2><ul><li><p><code>Collection</code>集合概述</p><ul><li><p>是单例集合的顶层接口，它表示一组对象，这些对象也称为<code>Collection</code>的元素</p></li><li><p>JDK 不提供此接口的任何直接实现，它提供更具体的子接口（<code>Set和List</code>）实现</p></li></ul></li><li><p><code>Collection</code>集合的常用方法</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定的元素</td></tr><tr><td>void   clear()</td><td>清空集合中的元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int   size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h3 id="2-1、集合框架List接口"><a href="#2-1、集合框架List接口" class="headerlink" title="2.1、集合框架List接口"></a>2.1、集合框架List接口</h3><ul><li><p><code>List集合</code>概述</p><ul><li>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素</li><li>与<code>Set集合</code>不同，列表通常允许重复的元素</li></ul></li><li><p><code>List集合</code>特点</p><ul><li>有索引</li><li>可以存储重复元素</li><li>元素存取有序</li></ul></li><li><p>具体实现类：<code>ArrayList</code>、<code>LinkedList</code>、 <code>Vector</code></p></li><li><p>在实际开发中：我们如何选择<code>List</code>的具体操作类</p><ul><li>安全问题</li><li>是否频繁插入删除操作（<code>LinkedList</code>）</li><li>是否储存后遍历（<code>ArrayList</code>）</li></ul></li><li><p>List集合的方法</p></li></ul><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void add(int index,E   element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int   index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E   element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int   index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="2-1-1、ArrayList"><a href="#2-1-1、ArrayList" class="headerlink" title="2.1.1、ArrayList"></a>2.1.1、ArrayList</h4><ul><li><p>实现原理：<strong>采用动态对象数组</strong>，默认构造方法创建了一个空数组</p></li><li><p>第一次添加元素，扩展容量为10，之后的扩充算法：原来数组大小+原来数组的一半</p></li><li><p>不适合进行插入和删除操作</p></li><li><p>为了防止数组动态扩充次数过多，建议创建<code>ArraayList</code>时指定容量大小</p></li><li><p>线程不安全，建议在单线程时进行使用</p></li><li><p>示例：</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class ArrayListDemo{    public static void main(String[] args){        List&lt;String&gt; list = new ArrayList&lt;&gt;();        list.add("小明");         //添加        list.add("爱吃");        list.add("水果");    //获取集合大小        int size = list.size();        for (int i = 0; i &lt; size; i++) {            System.out.print(list.get(i));      //根据索引获取成员        }        //判断该集合中是否有此元素        System.out.println(list.contains("小明"));        //删除指定位置元素        list.remove(2);        //修改指定下标元素        list.set(0,"小王");        //在指定位置添加        list.add(2,"香蕉");        //返回指定值的下标        System.out.println(list.indexOf("小王"));        //转换为数组形式        String[] str = list.toArray(new String[]{});        for (String s:str) {            System.out.println(s);        }    }}</code></pre><h4 id="2-1-2、LinkedList"><a href="#2-1-2、LinkedList" class="headerlink" title="2.1.2、LinkedList"></a>2.1.2、LinkedList</h4><ul><li>实现原理：<strong>采用双向的链表结构实现</strong></li><li>适合删除插入操作，性能高</li></ul><ul><li>分配内存空间不是必须是连续的；</li><li>插入、删除操作很快，只要修改前后指针就OK了，时间复杂度为O(1)；</li><li>访问比较慢，必须得从第一个元素开始遍历，时间复杂度为O(n)</li></ul><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class LinkedListDemo{public static void main(String[] args){        LinkedList&lt;String&gt; linkedList = new LinkedList&lt;&gt;();        //在链表后进行添加操作        linkedList.add("你好");        //在链表头进行添加操作        linkedList.addFirst("first");        //在链表尾部进行添加        linkedList.addLast("end");        //在指定位置添加        linkedList.add(2,"世界");        System.out.println(linkedList);        //移除链表中元素        linkedList.remove(3);       //无参数时代表移除第一个元素        System.out.println(linkedList);        //根据下标查找元素        System.out.println(linkedList.get(1));    }}</code></pre><h4 id="2-1-3、Vector"><a href="#2-1-3、Vector" class="headerlink" title="2.1.3、Vector"></a>2.1.3、Vector</h4><ul><li>实现原理：<strong>采用动态对象数组</strong>，默认构造方法创建了一个容量为10的对象数组</li></ul><ul><li>扩充的算法：当增量为0时，扩充为原来的倍，当增量不为0时，扩充为原来大小+增量</li><li>不适合进行插入和删除操作</li><li>为了防止数组动态扩充次数过多，建议创建<code>Vector</code>时指定容量大小</li><li>线程安全，适合在多线程访问时使用</li></ul><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class VevtorDemo{    public static void main(String[] args){          Vector&lt;Integer&gt; vc = new Vector&lt;&gt;();       vc.add(50);       vc.add(11);       for(Integer v:vc) {           System.out.println(v);       }   }} </code></pre><h3 id="2-2、集合框架Set接口"><a href="#2-2、集合框架Set接口" class="headerlink" title="2.2、集合框架Set接口"></a>2.2、集合框架Set接口</h3><ul><li><p><code>Set集合</code>的特点</p><ul><li>元素存取无序</li><li>没有索引、只能通过迭代器或增强<code>for</code>循环遍历</li><li>不能存储重复元素</li></ul></li><li><p>具体实现类：<code>HashSet</code>、<code>LinkedHashSet</code>、 <code>TreeSet</code></p></li></ul><h4 id="2-2-1、HashSet"><a href="#2-2-1、HashSet" class="headerlink" title="2.2.1、HashSet"></a>2.2.1、HashSet</h4><ul><li><p>实现原理：基于<strong>哈希表</strong>（<code>HashMap</code>）实现，<code>JDK1.8哈希表</code>是由数组+链表+红黑树实现的</p></li><li><p>不允许重复，可以有一个<code>null</code>元素</p></li><li><p>不保证顺序永久不变</p></li><li><p>添加元素时把元素作为<code>HashMap</code>的<code>key</code>存储，<code>HashMap</code>的值使用一个固定<code>object对象</code></p></li><li><p>排除重复元素是通过<code>equals</code>来检查对象是否相同</p></li><li><p>判断两个对象是否相同，先判断两个对象的<code>HashCode</code>是否相同（若相同，不一定是同一个对象，如果不同，则两个对象则一定不是同一个对象），如果相同，则还要进行<code>equals</code>判断，如果相同，则两个对象相同，如果不同，则两个对象不同</p></li><li><p>给<code>HashSet</code>中存放自定义类型元素时，需要重写对象中的<code>hashCode</code>和<code>equals</code>方法</p></li><li><p>示例：</p><ul><li>创建学生类</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class Student {    private String name;    private int age;    public Student() {    }    public Student(String name, int age) {        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return "AStudent{" +                "name='" + name + '\'' +                ", age=" + age +                '}';    }//重写equals方法    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Student student = (Student) o;        return age == student.age &amp;&amp; Objects.equals(name, student.name);    }//重写hashcode方法    @Override    public int hashCode() {        return Objects.hash(name, age);    }}</code></pre><ul><li>测试类</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class HashSetDemo{public static void main(String[] args){        //创建集合对象        HashSet&lt;Student&gt; hashSet = new HashSet&lt;&gt;();        Student student1 = new Student("小明",10);        Student student2 = new AStudent("小李",15);        Student student3 = new AStudent("小王",13);        hashSet.add(student1);        hashSet.add(student2);        hashSet.add(student3);        System.out.println(hashSet);        //判断两个对象是否相同        Student student4 =new Student("小明",10);        hashSet.add(student4);        //首先判断其hashcode是否相同        if(student1.hashCode() == student4.hashCode()){            if(student1.equals(student4)){                System.out.println("他们是同一个对象");            }else{                System.out.println("hashcode相同，但不是同一个对象");            }        }else            System.out.println("hashcode不同，不是同一个对象");    }}</code></pre></li></ul><h4 id="2-2-2、LinkedHashSet"><a href="#2-2-2、LinkedHashSet" class="headerlink" title="2.2.2、LinkedHashSet"></a>2.2.2、LinkedHashSet</h4><ul><li><p><code>LinkedHashSet</code>集合特点</p><ul><li>哈希表和链表实现的<code>Set</code>接口，具有可预测的迭代次序</li><li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li><li>由哈希表保证元素唯一，也就是说没有重复的元素</li></ul></li><li><p>示例：</p><pre class="language-java" data-language="java"><code class="language-java">public class LinkedHashSetDemo {    public static void main(String[] args) {        //创建集合对象        LinkedHashSet&lt;String&gt; linkedHashSet = new LinkedHashSet&lt;String&gt;();        //添加元素        linkedHashSet.add("hello");        linkedHashSet.add("world");        linkedHashSet.add("java");        linkedHashSet.add("world");//重复元素        //遍历集合        for(String s : linkedHashSet) {            System.out.println(s);        }    }}</code></pre></li></ul><h4 id="2-2-3、TreeSet"><a href="#2-2-3、TreeSet" class="headerlink" title="2.2.3、TreeSet"></a>2.2.3、TreeSet</h4><ul><li><code>TreeSet</code> 是一个有序的集合，它的作用是提供有序的<code>Set集合</code>。<ul><li><code>TreeSet</code>是基于<code>TreeMap</code>实现的。</li><li><code>TreeSet</code>中的元素支持2种排序方式：自然排序或者根据创建<code>TreeSet</code> 时提供的 <code>Comparator</code> 进行排序</li><li><code>TreeSet</code> 实现了<code>java.io.Serializable</code>接口，意味着它支持序列化</li></ul></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class TreeSetDemo{    public static void main(String[] args) {        TreeSet&lt;String&gt; treeSet = new TreeSet&lt;&gt;();        treeSet.add("abc");        treeSet.add("ghi");        treeSet.add("def");        System.out.println(treeSet);    }}</code></pre><h2 id="三、Map接口"><a href="#三、Map接口" class="headerlink" title="三、Map接口"></a>三、Map接口</h2><ul><li><p><code>Map</code>集合概述</p><pre class="language-java" data-language="java"><code class="language-java">interface Map&lt;K,V&gt;  K：键的类型；V：值的类型</code></pre></li><li><p><code>Map</code>集合的特点</p><ul><li>键值对映射关系</li><li>一个键对应一个值</li><li>键不能重复，值可以重复</li><li>元素存取无序</li></ul></li><li><p>具体的实现类：<code>HashMap</code>、<code>Hashtap</code>、<code>TreeMap</code>、<code>LinkedHasMAP</code></p></li><li><p>在实际开发中：我们如何选择<code>Map</code>的具体操作类</p><ul><li><code>HashMap</code>和<code>HashTable</code>：<code>HashMap</code>去掉了<code>HashTable</code>的<code>contains</code>方法，但是加上了<code>containsValue()</code>和<code>containsKey()</code>方法。<code>HashTable</code>同步的，而<code>HashMap</code>是非同步的，效率上比<code>HashTable</code>要高。<code>HashMap</code>允许空键值，而<code>HashTable</code>不允许。</li><li>HashMap：适用于Map中插入、删除和定位元素。</li><li>Treemap：适用于按自然顺序或自定义顺序遍历键(key)。</li></ul></li><li><p><code>Map</code>集合的常用方法：</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V   put(K key,V   value)</td><td>添加元素</td></tr><tr><td>V   remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void   clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><h3 id="3-1、HashMap"><a href="#3-1、HashMap" class="headerlink" title="3.1、HashMap"></a>3.1、HashMap</h3><ul><li><p><code>HashMap</code>的实现原理：</p><ul><li>基于哈希表（数组+链表+二叉树（红黑树））实现</li><li>默认数组长度为16，默认加载因子是0.75,</li><li>数组长度超过75%进行扩充，扩充算法：当前数组容量左移一位，即扩大一倍</li><li>把对象存储到哈希表中，把<code>key</code>对象通过<code>hash()</code>方法计算<code>hash</code>值，然后用这个<code>hash</code>值对数组长度取余数，来确定该<code>key</code>对象在数组中存储的位置。当这个位置有多个对象时，以链表结构存储，<code>JDK1.8</code>以后，当链表长度大于8时，链表将转换为红黑树结构存储。</li></ul></li><li><p>示例：</p><ul><li>创建对象类</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class Cat{    private String name;    private String color;    public Cat() {    }    public Cat(String name, String color) {        this.name = name;        this.color = color;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getColor() {        return color;    }    public void setColor(String color) {        this.color = color;    }    @Override    public String toString() {        return "Cat{" +                "name='" + name + '\'' +                ", color='" + color + '\'' +                '}';    }}</code></pre><ul><li>创建测试类</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class HashMap {    public static void main(String[] args) {        HashMap&lt;Integer,Cat&gt; catHashMap = new HashMap&lt;&gt;();        catHashMap.put(1,new Cat("小白","白色"));        catHashMap.put(2,new Cat("小黑","黑色"));        catHashMap.put(3,new Cat("大黄","黄色"));        //获取集合中的数量        System.out.println(catHashMap.size());        //通过键对其进行相应的输出        System.out.println(catHashMap.get(2));        //遍历输出的三种方式        //1、遍历entry        Set&lt;Map.Entry&lt;Integer,Cat&gt;&gt; entrySet = catHashMap.entrySet();        for(Map.Entry&lt;Integer ,Cat&gt; e:entrySet){            System.out.println(e.getKey()+"-&gt;"+e.getValue());        }        //2、遍历键        Set&lt;Integer&gt; keys = catHashMap.keySet();        for(Integer key:keys){            System.out.println(key+"-&gt;"+catHashMap.get(key));        }        //3、遍历值        Collection&lt;Cat&gt; values = catHashMap.values();        for(Cat value:values){            System.out.println(value);        }        //4、使用foreach        catHashMap.forEach((key,cat) -&gt; {System.out.println(key+"-&gt;"+cat);});    }}</code></pre></li></ul><h3 id="3-2、HashTable"><a href="#3-2、HashTable" class="headerlink" title="3.2、HashTable"></a>3.2、HashTable</h3><ul><li><code>Hashtable</code>：实现一个哈希表（数组+链表）</li><li>面试题：<code>hashmap</code>与<code>hashtable</code>的区别<ul><li><code>hashmap</code>的默认数组大小是16，<code>hashtable</code>的默认数组大小是11，但加载因子都是0.75</li><li><code>hashmap</code>的扩充方式是左移一位即扩大一倍，<code>hashtable</code>的扩充方式是左移一位+1</li><li><code>hashtable</code>的线程是安全的，用在多线程访问</li><li><code>hashmap</code>的key或value可以为空值，但<code>hashtable</code>是不能放入空值的</li></ul></li></ul><h3 id="3-3、LinkedHashMap"><a href="#3-3、LinkedHashMap" class="headerlink" title="3.3、LinkedHashMap"></a>3.3、LinkedHashMap</h3><ul><li><code>LinkedHahMap</code>：是<code>hashmap</code>的子类</li><li>由于<code>hashmap</code>不能保证顺序恒久不变，而<code>LinkedHahMap</code>使用双重链表维护元素添加顺序</li></ul><h3 id="3-4、TreeMap"><a href="#3-4、TreeMap" class="headerlink" title="3.4、TreeMap"></a>3.4、TreeMap</h3><ul><li><code>TreeMap</code>：基于红黑树的<code>NavigableMap</code>实现</li><li>基于红黑树对所有的key进行排序</li><li>排序方式：自然排序、定制排序</li></ul><h2 id="四、Collections集合工具类"><a href="#四、Collections集合工具类" class="headerlink" title="四、Collections集合工具类"></a>四、Collections集合工具类</h2><ul><li><p>Collections类的作用</p><ul><li>是针对集合操作的工具类</li></ul></li><li><p>Collections类常用方法</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void sort(List<t> list)</t></td><td>将指定的列表按升序排序</td></tr><tr><td>public static void reverse(List&lt;?&gt; list)</td><td>反转指定列表中元素的顺序</td></tr><tr><td>public static void shuffle(List&lt;?&gt; list)</td><td>使用默认的随机源随机排列指定的列表</td></tr><tr><td>public static void swap(List&lt;?&gt; list,int i,int j)</td><td>指定位置元素交换操作</td></tr></tbody></table><ul><li>示例：</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class DCollections {    public static void main(String[] args) {        List&lt;String&gt; stringList = new ArrayList&lt;&gt;();        stringList.add("jack");        stringList.add("tom");        stringList.add("lily");        System.out.println(stringList);        //1、排序操作：        //进行反转操作        Collections.reverse(stringList);        System.out.println("这里是反转操作"+stringList);        //进行随机排序        Collections.shuffle(stringList);                   System.out.println("这里是随机排序"+stringList);        //进行升序排列        Collections.sort(stringList);                   System.out.println("这里是升序排列"+stringList);         //进行指定位置元素交换操作        Collections.swap(stringList,1,2);                   System.out.println("这里是位置交换"+stringList);        //2、查找和替换（针对collection接口）         //查找对应值        System.out.println(Collections.binarySearch(stringList, "lily"));         //输出最大值和最小值        System.out.println(Collections.max(stringList)+"-&gt;"+Collections.min(stringList));          //使用指定对象填充        Collections.fill(stringList,"bin");                            System.out.println(stringList);        //替换        Collections.replaceAll(stringList,"tom","vince");        System.out.println(stringList);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的使用</title>
      <link href="/posts/1029.html"/>
      <url>/posts/1029.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、maven基础知识"><a href="#一、maven基础知识" class="headerlink" title="一、maven基础知识"></a>一、maven基础知识</h2><h3 id="1-1、maven介绍"><a href="#1-1、maven介绍" class="headerlink" title="1.1、maven介绍"></a>1.1、maven介绍</h3><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。</p><p>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。</p><p>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p><p>​              <img src="/posts/1029/1.png"></p><h3 id="1-2-maven的仓库类型"><a href="#1-2-maven的仓库类型" class="headerlink" title="1.2 maven的仓库类型"></a>1.2 maven的仓库类型</h3><p>1.本地仓库 </p><p>2.远程仓库</p><p>①maven中央仓库（地址：<a href="http://repo2.maven.org/maven2/%EF%BC%89">http://repo2.maven.org/maven2/）</a></p><p>②maven私服（公司局域网内的仓库，需要自己搭建）</p><p>③其他公共远程仓库（例如apache提供的远程仓库，地址：<a href="http://repo.maven.apache.org/maven2/%EF%BC%89">http://repo.maven.apache.org/maven2/）</a></p><h3 id="1-3-maven常用命令"><a href="#1-3-maven常用命令" class="headerlink" title="1.3 maven常用命令"></a>1.3 maven常用命令</h3><p>clean：     清理</p><p>compile：编译</p><p>test：        测试</p><p>package：打包</p><p>install：    安装</p><h3 id="1-4-maven坐标书写规范"><a href="#1-4-maven坐标书写规范" class="headerlink" title="1.4 maven坐标书写规范"></a>1.4 maven坐标书写规范</h3><p><img src="/posts/1029/2.png"></p><p>查找依赖坐标：<a href="https://mvnrepository.com/artifact/io.bretty/console-table-builder/1.2">https://mvnrepository.com/artifact/io.bretty/console-table-builder/1.2</a></p><h3 id="1-5-maven的依赖范围"><a href="#1-5-maven的依赖范围" class="headerlink" title="1.5 maven的依赖范围"></a>1.5 maven的依赖范围</h3><table><thead><tr><th>依赖范围</th><th>对于编译classpath有效</th><th>对于测试classpath有效</th><th>对于运行时classpath有效</th><th>例子</th></tr></thead><tbody><tr><td>compile</td><td>Y</td><td>Y</td><td>Y</td><td>spring-core</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>Junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>JDBC驱动</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>-</td><td>本地的，maven仓库之外的类库</td></tr></tbody></table><h3 id="1-6、仓库配置"><a href="#1-6、仓库配置" class="headerlink" title="1.6、仓库配置"></a>1.6、仓库配置</h3><h4 id="1-6-1、本地仓库配置"><a href="#1-6-1、本地仓库配置" class="headerlink" title="1.6.1、本地仓库配置"></a>1.6.1、本地仓库配置</h4><ol><li>找到Maven文件中conf文件夹下的settings.xml文件并打开</li><li>找到该文件中的<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></li><li>在电脑上创建一个任意文件夹作为本地仓库，并将该文件夹的路径放入步骤2中的<code>&lt;localRepository&gt;文件路径&lt;/localRepository&gt;</code></li></ol><h4 id="1-6-2、配置公共仓库"><a href="#1-6-2、配置公共仓库" class="headerlink" title="1.6.2、配置公共仓库"></a>1.6.2、配置公共仓库</h4><ol><li><p>找到Maven文件中conf文件夹下的settings.xml文件并打开</p></li><li><p>找到该文件中的 <code>&lt;mirrors&gt; &lt;/mirrors&gt;</code></p></li><li><p>将以下阿里云仓库配置添加进去</p><pre class="language-none"><code class="language-none">&lt;mirror&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre></li></ol><h3 id="1-7、IDEA关联Maven仓库"><a href="#1-7、IDEA关联Maven仓库" class="headerlink" title="1.7、IDEA关联Maven仓库"></a>1.7、IDEA关联Maven仓库</h3><ol><li>打开IDEA工具栏File下的New Project Setup，选择Setting for new Projects</li><li>选中Build下的Build Tools 下的Maven</li><li>设置User setting file为maven安装位置中的setting.xml文件</li><li>设置Local repository为自定义的本地仓库路径</li></ol><h2 id="二、maven的依赖传递"><a href="#二、maven的依赖传递" class="headerlink" title="二、maven的依赖传递"></a>二、maven的依赖传递</h2><h3 id="2-1、什么是依赖传递"><a href="#2-1、什么是依赖传递" class="headerlink" title="2.1、什么是依赖传递"></a>2.1、什么是依赖传递</h3><p>在maven中，依赖是可以传递的，假设存在三个项目，分别是项目A，项目B以及项目C。假设C依赖B，B依赖A，那么我们可以根据maven项目依赖的特征不难推出项目C也依赖A。</p><p><img src="/posts/1029/3.png"></p><p>​                         <img src="/posts/1029/4.png"></p><p>通过上面的图可以看到，我们的web项目直接依赖了spring-webmvc，而spring-webmvc依赖了sping-aop、spring-beans等。最终的结果就是在我们的web项目中间接依赖了spring-aop、spring-beans等。</p><h3 id="2-2、什么是依赖冲突"><a href="#2-2、什么是依赖冲突" class="headerlink" title="2.2、什么是依赖冲突"></a>2.2、什么是依赖冲突</h3><p>由于依赖传递现象的存在， spring-webmvc 依赖 spirng-beans-4.2.4，spring-aop 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4 加入到了工程中，而我们希望 spring-beans-5.0.2 加入工程。这就造成了依赖冲突。</p><p><img src="/posts/1029/5.png"></p><h3 id="2-3、如何解决依赖冲突"><a href="#2-3、如何解决依赖冲突" class="headerlink" title="2.3、如何解决依赖冲突"></a>2.3、如何解决依赖冲突</h3><p>1.使用maven提供的依赖调解原则 </p><pre><code>    第一声明者优先原则</code></pre><p>​     路径近者优先原则</p><p>2.排除依赖</p><p>3.锁定版本 </p><h3 id="2-4、依赖调节原则——第一声明者优先原则"><a href="#2-4、依赖调节原则——第一声明者优先原则" class="headerlink" title="2.4、依赖调节原则——第一声明者优先原则"></a>2.4、依赖调节原则——第一声明者优先原则</h3><p>在 pom 文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</p><p><img src="/posts/1029/6.png"></p><p>结论：通过上图可以看到，spring-aop和spring-webmvc都传递过来了spring-beans，但是因为spring-aop在前面，所以最终使用的spring-beans是由spring-aop传递过来的，而spring-webmvc传递过来的spring-beans则被忽略了。</p><h3 id="2-5、排除依赖"><a href="#2-5、排除依赖" class="headerlink" title="2.5、排除依赖"></a>2.5、排除依赖</h3><p>可以使用exclusions标签将传递过来的依赖排除出去。</p><p><img src="/posts/1029/7.png"></p><h3 id="2-6、版本锁定"><a href="#2-6、版本锁定" class="headerlink" title="2.6、版本锁定"></a>2.6、版本锁定</h3><p>采用直接锁定版本的方法确定依赖jar包的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p><p>版本锁定的使用方式：</p><p>第一步：在dependencyManagement标签中锁定依赖的版本</p><p>第二步：在dependencies标签中声明需要导入的maven坐标</p><p>①在dependencyManagement标签中锁定依赖的版本</p><p><img src="/posts/1029/8.png"></p><p>②在dependencies标签中声明需要导入的maven坐标</p><p><img src="/posts/1029/9.png"></p><h2 id="三、分模块构建maven工程"><a href="#三、分模块构建maven工程" class="headerlink" title="三、分模块构建maven工程"></a>三、分模块构建maven工程</h2><h3 id="3-1、分模块构建maven工程分析"><a href="#3-1、分模块构建maven工程分析" class="headerlink" title="3.1、分模块构建maven工程分析"></a>3.1、分模块构建maven工程分析</h3><p>在现实生活中，汽车厂家进行汽车生产时，由于整个生产过程非常复杂和繁琐，工作量非常大，所以车场都会将整个汽车的部件分开生产，最终再将生产好的部件进行组装，形成一台完整的汽车。</p><p><img src="/posts/1029/12.png"></p><p><img src="/posts/1029/13.png"></p><h3 id="3-2、maven工程的继承"><a href="#3-2、maven工程的继承" class="headerlink" title="3.2、maven工程的继承"></a>3.2、maven工程的继承</h3><p>在Java语言中，类之间是可以继承的，通过继承，子类就可以引用父类中非private的属性和方法。同样，在maven工程之间也可以继承，子工程继承父工程后，就可以使用在父工程中引入的依赖。继承的目的是为了消除重复代码。</p><p><img src="/posts/1029/14.png"></p><h3 id="3-3、maven工程的聚合"><a href="#3-3、maven工程的聚合" class="headerlink" title="3.3、maven工程的聚合"></a>3.3、maven工程的聚合</h3><p>在maven工程的pom.xml文件中可以使用<modules>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。</modules></p><p>例如拆分后的maven工程有多个，如果要进行打包，就需要针对每个工程分别执行打包命令，操作起来非常繁琐。这时就可以使用<modules>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令，其下被聚合的工程就都会被打包了。</modules></p><p><img src="/posts/1029/15.png"></p><h2 id="四、maven私服"><a href="#四、maven私服" class="headerlink" title="四、maven私服"></a>四、maven私服</h2><h3 id="4-1、私服说明"><a href="#4-1、私服说明" class="headerlink" title="4.1、私服说明"></a>4.1、私服说明</h3><p>maven仓库分为本地仓库和远程仓库，而远程仓库又分为maven中央仓库、其他远程仓库和私服（私有服务器）。其中，中央仓库是由maven官方提供的，而私服就需要我们自己搭建了。</p><p>maven私服就是公司局域网内的maven远程仓库，每个员工的电脑上安装maven软件并且连接maven私服，程序员可以将自己开发的项目打成jar并发布到私服，其它项目组成员就可以从私服下载所依赖的jar。私服还充当一个代理服务器的角色，当私服上没有jar包时会从maven中央仓库自动下载。</p><p>nexus 是一个maven仓库管理器（其实就是一个软件），nexus可以充当maven私服，同时nexus还提供强大的仓库管理、构件搜索等功能。</p><h3 id="4-2、搭建maven私服"><a href="#4-2、搭建maven私服" class="headerlink" title="4.2、搭建maven私服"></a>4.2、搭建maven私服</h3><p>①下载nexus</p><p><a href="https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss">https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss</a></p><p>②安装nexus</p><p>将下载的压缩包进行解压，进入bin目录</p><p><img src="/posts/1029/17.png"></p><p>打开cmd窗口并进入上面bin目录下，执行nexus.bat install命令安装服务（注意需要以管理员身份运行cmd命令）</p><p><img src="/posts/1029/18.png"></p><p>③启动nexus</p><p>经过前面命令已经完成nexus的安装，可以通过如下两种方式启动nexus服务：</p><p>在Windows系统服务中启动nexus</p><p><img src="/posts/1029/19.png"></p><p>在命令行执行nexus.bat start命令启动nexus</p><p><img src="/posts/1029/20.png"></p><p>④访问nexus</p><p>启动nexus服务后，访问<a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a></p><p>点击右上角LogIn按钮，进行登录。使用默认用户名admin和密码admin123登录系统</p><p>登录成功后点击左侧菜单Repositories可以看到nexus内置的仓库列表（如下图）</p><p><img src="/posts/1029/21.png"></p><p>nexus仓库类型</p><p>通过前面的仓库列表可以看到，nexus默认内置了很多仓库，这些仓库可以划分为4种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p><p>①hosted，宿主仓库，部署自己的jar到这个类型的仓库，包括Releases和Snapshots两部分，Releases为公司内部发布版本仓库、 Snapshots为公司内部测试版本仓库 </p><p>②proxy，代理仓库，用于代理远程的公共仓库，如maven中央仓库，用户连接私服，私服自动去中央仓库下载jar包或者插件</p><p>③group，仓库组，用来合并多个hosted/proxy仓库，通常我们配置自己的maven连接仓库组</p><p>④virtual(虚拟)：兼容Maven1版本的jar或者插件</p><p><img src="/posts/1029/22.png"></p><p>nexus仓库类型与安装目录对应关系</p><p><img src="/posts/1029/23.png"></p><h3 id="4-3、将项目发布到maven私服"><a href="#4-3、将项目发布到maven私服" class="headerlink" title="4.3、将项目发布到maven私服"></a>4.3、将项目发布到maven私服</h3><p>maven私服是搭建在公司局域网内的maven仓库，公司内的所有开发团队都可以使用。例如技术研发团队开发了一个基础组件，就可以将这个基础组件打成jar包发布到私服，其他团队成员就可以从私服下载这个jar包到本地仓库并在项目中使用。</p><p>将项目发布到maven私服操作步骤如下：</p><ol><li>配置maven的settings.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span></code></pre><p>​      注意：一定要在idea工具中引入的maven的settings.xml文件中配置 </p><ol start="2"><li>配置项目的pom.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/repositories/releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">&gt;</span></span></code></pre><ol start="3"><li>执行mvn deploy命令</li></ol><p><img src="/posts/1029/24.png"></p><h3 id="4-4、从私服下载jar到本地仓库"><a href="#4-4、从私服下载jar到本地仓库" class="headerlink" title="4.4、从私服下载jar到本地仓库"></a>4.4、从私服下载jar到本地仓库</h3><p>前面我们已经完成了将本地项目打成jar包发布到maven私服，下面我们就需要从maven私服下载jar包到本地仓库。</p><p>具体操作步骤如下：</p><p>在maven的settings.xml文件中配置下载模板</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--是否下载releases构件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--是否下载snapshots构件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Public Repositories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span></code></pre><p>在maven的settings.xml文件中配置激活下载模板</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="五、将第三方jar安装到本地仓库和maven私服"><a href="#五、将第三方jar安装到本地仓库和maven私服" class="headerlink" title="五、将第三方jar安装到本地仓库和maven私服"></a>五、将第三方jar安装到本地仓库和maven私服</h2><p>在maven工程的pom.xml文件中配置某个jar包的坐标后，如果本地的maven仓库不存在这个jar包，maven工具会自动到配置的maven私服下载，如果私服中也不存在，maven私服就会从maven中央仓库进行下载。</p><p>但是并不是所有的jar包都可以从中央仓库下载到，比如常用的Oracle数据库驱动的jar包在中央仓库就不存在。此时需要到Oracle的官网下载驱动jar包，然后将此jar包通过maven命令安装到我们本地的maven仓库或者maven私服中，这样在maven项目中就可以使用maven坐标引用到此jar包了。</p><h3 id="5-1、将第三方jar安装到本地仓库"><a href="#5-1、将第三方jar安装到本地仓库" class="headerlink" title="5.1、将第三方jar安装到本地仓库"></a>5.1、将第三方jar安装到本地仓库</h3><p>①下载Oracle的jar包（略）</p><p>②mvn install命令进行安装</p><p>​      mvn install:install-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 – </p><p>​      Dversion=10.2.0.4.0 -Dpackaging=jar</p><p>③查看本地maven仓库，确认安装是否成功</p><p><img src="/posts/1029/25.png"></p><h3 id="5-2、将第三方jar安装到maven私服"><a href="#5-2、将第三方jar安装到maven私服" class="headerlink" title="5.2、将第三方jar安装到maven私服"></a>5.2、将第三方jar安装到maven私服</h3><p>①下载Oracle的jar包（略）</p><p>②在maven的settings.xml配置文件中配置第三方仓库的server信息</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>thirdparty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span></code></pre><p>③执行mvn deploy命令进行安装</p><p>​      mvn deploy:deploy-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 –</p><p>​      Dversion=10.2.0.4.0 -Dpackaging=jar –</p><p>​      Durl=<a href="http://localhost:8081/nexus/content/repositories/thirdparty/">http://localhost:8081/nexus/content/repositories/thirdparty/</a> -DrepositoryId=thirdparty</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC基础入门</title>
      <link href="/posts/3377.html"/>
      <url>/posts/3377.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、回顾MVC"><a href="#一、回顾MVC" class="headerlink" title="一、回顾MVC"></a>一、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是降低了视图与业务逻辑间的双向偶合。</li><li>MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong> 数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong> 负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong> 接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="/posts/3377/1.png"></p><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><h3 id="1-2、回顾Servlet"><a href="#1-2、回顾Servlet" class="headerlink" title="1.2、回顾Servlet"></a>1.2、回顾Servlet</h3><h4 id="1-2-1、新建Maven项目"><a href="#1-2-1、新建Maven项目" class="headerlink" title="1.2.1、新建Maven项目"></a>1.2.1、新建Maven项目</h4><p>新建maven项目，当作父工程，导入相应的依赖</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入tomcat--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--   导入servlet依赖     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--   导入jsp依赖     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="1-2-2、建立一个Moudle"><a href="#1-2-2、建立一个Moudle" class="headerlink" title="1.2.2、建立一个Moudle"></a>1.2.2、建立一个Moudle</h4><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！并再次导入依赖</p><p><img src="/posts/3377/2.png"></p><h4 id="1-2-3、编写一个页面"><a href="#1-2-3、编写一个页面" class="headerlink" title="1.2.3、编写一个页面"></a>1.2.3、编写一个页面</h4><p>在webapp下编写一个HTML页面</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>hellospring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/springmvc-01-Servlet/HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    注册用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    注册密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>注册<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="1-2-4、编写Servlet类"><a href="#1-2-4、编写Servlet类" class="headerlink" title="1.2.4、编写Servlet类"></a>1.2.4、编写Servlet类</h4><p>编写一个Servlet类，用来处理用户的请求</p><pre class="language-java" data-language="java"><code class="language-java">@WebServlet("/HelloSpring")public class hellospring extends HttpServlet {    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        //接收参数        String username = new String(req.getParameter("username").getBytes("ISO8859-1"), "utf-8");        String password = new String(req.getParameter("password").getBytes("ISO8859-1"), "utf-8");        //判断接收参数是否符合要求        if(username.equals("胡全安")&amp;&amp;password.equals("123456")){            //符合进行视图跳转            req.getRequestDispatcher("/index.jsp").forward(req,resp);        }else{            //不符合            //设置ContentType使得浏览器对所回复响应中的HTML字符进行可读，并将字符设置为utf-8，解决中文乱码            resp.setContentType("text/html;charset=utf-8");            //通过Response获取字符输出流            PrintWriter writer = resp.getWriter();            writer.write("&lt;h3&gt;登陆失败!&lt;/h3&gt;");        }    }    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {        this.doGet(req, resp);    }}</code></pre><h4 id="1-2-5、配置tomcat，启动测试"><a href="#1-2-5、配置tomcat，启动测试" class="headerlink" title="1.2.5、配置tomcat，启动测试"></a>1.2.5、配置tomcat，启动测试</h4><ul><li><strong>MVC框架要做哪些事情</strong><ul><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ul></li></ul><h3 id="1-3、什么是SpringMVC"><a href="#1-3、什么是SpringMVC" class="headerlink" title="1.3、什么是SpringMVC"></a>1.3、什么是SpringMVC</h3><h4 id="1-3-1、概述"><a href="#1-3-1、概述" class="headerlink" title="1.3.1、概述"></a>1.3.1、概述</h4><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p><strong>Spring MVC的特点：</strong></p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等…所以我们要学习 。</p><h4 id="1-3-2、中心控制器"><a href="#1-3-2、中心控制器" class="headerlink" title="1.3.2、中心控制器"></a>1.3.2、中心控制器</h4><p>Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="/posts/3377/3.png"></p><p><strong>SpringMVC的原理如下图所示：</strong> </p><p>当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="/posts/3377/4.png"></p><h4 id="1-3-3、SpringMVC执行原理（重点）"><a href="#1-3-3、SpringMVC执行原理（重点）" class="headerlink" title="1.3.3、SpringMVC执行原理（重点）"></a>1.3.3、SpringMVC执行原理（重点）</h4><p><img src="/posts/3377/6.png"></p><p><strong>简要实现流程：</strong></p><p>①用户发送请求至前端控制器DispatcherServlet。</p><p>②DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p><p>③处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p><p>④DispatcherServlet调用HandlerAdapter处理器适配器。</p><p>⑤HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p><p>⑥Controller执行完成返回ModelAndView。</p><p>⑦HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p><p>⑧DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p><p>⑨ViewReslover解析后返回具体View。</p><p>⑩DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p><h4 id="1-3-4、组件简单讲解"><a href="#1-3-4、组件简单讲解" class="headerlink" title="1.3.4、组件简单讲解"></a>1.3.4、组件简单讲解</h4><ol><li><p><strong>前端控制器：DispatcherServlet</strong></p><p>用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p></li><li><p><strong>处理器映射器：HandlerMapping</strong></p><p>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p></li><li><p><strong>处理器适配器：HandlerAdapter</strong></p><p>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p></li><li><p><strong>处理器：Handler</strong></p><p>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p></li><li><p><strong>视图解析器：View Resolver</strong></p><p>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p></li><li><p><strong>视图：View</strong></p><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p></li></ol><h2 id="二、MVC入门"><a href="#二、MVC入门" class="headerlink" title="二、MVC入门"></a>二、MVC入门</h2><h3 id="2-1、配置版"><a href="#2-1、配置版" class="headerlink" title="2.1、配置版"></a>2.1、配置版</h3><h4 id="2-1-1、新建一个Moudle"><a href="#2-1-1、新建一个Moudle" class="headerlink" title="2.1.1、新建一个Moudle"></a>2.1.1、新建一个Moudle</h4><p>新建一个Moudle，springmvc-02-hello </p><h4 id="2-1-2、导入依赖"><a href="#2-1-2、导入依赖" class="headerlink" title="2.1.2、导入依赖"></a>2.1.2、导入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入tomcat--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  导入springMVC依赖  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   导入servlet依赖     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入jsp依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-1-3、配置web-xml，注册DispatcherServlet"><a href="#2-1-3、配置web-xml，注册DispatcherServlet" class="headerlink" title="2.1.3、配置web.xml，注册DispatcherServlet"></a>2.1.3、配置web.xml，注册DispatcherServlet</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--1.注册DispatcherServlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动级别-1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>  <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-1-4、编写SpringMVC-的配置文件"><a href="#2-1-4、编写SpringMVC-的配置文件" class="headerlink" title="2.1.4、编写SpringMVC 的配置文件"></a>2.1.4、编写SpringMVC 的配置文件</h4><p>名称：springmvc-servlet.xml : [servletname]-servlet.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="2-1-4-1、添加处理映射器"><a href="#2-1-4-1、添加处理映射器" class="headerlink" title="2.1.4.1、添加处理映射器"></a>2.1.4.1、添加处理映射器</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><h5 id="2-1-4-2、添加处理器适配器"><a href="#2-1-4-2、添加处理器适配器" class="headerlink" title="2.1.4.2、添加处理器适配器"></a>2.1.4.2、添加处理器适配器</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><h5 id="2-1-4-3、添加视图解析器"><a href="#2-1-4-3、添加视图解析器" class="headerlink" title="2.1.4.3、添加视图解析器"></a>2.1.4.3、添加视图解析器</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--前缀--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!--后缀--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-1-5、编写操作业务Controller"><a href="#2-1-5、编写操作业务Controller" class="headerlink" title="2.1.5、编写操作业务Controller"></a>2.1.5、编写操作业务Controller</h4><pre class="language-java" data-language="java"><code class="language-java">//实现Controller接口public class HelloController implements Controller {    @Override    public ModelAndView handleRequest(HttpServletRequest Request, HttpServletResponse Response) throws Exception {        //创建模型和视图        ModelAndView MV = new ModelAndView();        //封装要跳转的视图，放在ModelAndView中        MV.setViewName("HelloSpringMVC");       //WEB-INF/jsp/HelloSpringMVC.jsp        return MV;    }}</code></pre><h4 id="2-1-6、编写跳转页面"><a href="#2-1-6、编写跳转页面" class="headerlink" title="2.1.6、编写跳转页面"></a>2.1.6、编写跳转页面</h4><p>在src/main/webapp/WEB-INF/jsp/目录下编写跳转页面HelloSpringMVC.jsp</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-1-7、将自己的类交给SpringIOC容器，注册bean"><a href="#2-1-7、将自己的类交给SpringIOC容器，注册bean" class="headerlink" title="2.1.7、将自己的类交给SpringIOC容器，注册bean"></a>2.1.7、将自己的类交给SpringIOC容器，注册bean</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.MVC.Controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><h4 id="2-1-8、测试"><a href="#2-1-8、测试" class="headerlink" title="2.1.8、测试"></a>2.1.8、测试</h4><ul><li>启动tomcat</li><li>打开网址<a href="http://localhost:8080/springmvc-02-hello/hello">http://localhost:8080/springmvc-02-hello/hello</a></li></ul><h3 id="2-2、注解版"><a href="#2-2、注解版" class="headerlink" title="2.2、注解版"></a>2.2、注解版</h3><h4 id="2-2-1、新建一个Moudle"><a href="#2-2-1、新建一个Moudle" class="headerlink" title="2.2.1、新建一个Moudle"></a>2.2.1、新建一个Moudle</h4><p>新建一个Moudle，springmvc-03-annotation</p><h4 id="2-2-2、导入依赖"><a href="#2-2-2、导入依赖" class="headerlink" title="2.2.2、导入依赖"></a>2.2.2、导入依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入tomcat--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  导入springMVC依赖  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   导入servlet依赖     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入jsp依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-2-3、配置web-xml，注册DispatcherServlet"><a href="#2-2-3、配置web-xml，注册DispatcherServlet" class="headerlink" title="2.2.3、配置web.xml，注册DispatcherServlet"></a>2.2.3、配置web.xml，注册DispatcherServlet</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--1.注册DispatcherServlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动级别-1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>  <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-2-4、编写SpringMVC-的配置文件"><a href="#2-2-4、编写SpringMVC-的配置文件" class="headerlink" title="2.2.4、编写SpringMVC 的配置文件"></a>2.2.4、编写SpringMVC 的配置文件</h4><p>名称：springmvc-servlet.xml : [servletname]-servlet.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.annotation.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 前缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 后缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-2-5、编写操作业务Controller"><a href="#2-2-5、编写操作业务Controller" class="headerlink" title="2.2.5、编写操作业务Controller"></a>2.2.5、编写操作业务Controller</h4><pre class="language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/HelloController")public class HelloController {    //真实访问地址：项目名/HelloController/Hello    @RequestMapping("/Hello")    public String sayhello(Model model){        //返回要跳转的页面        return "HelloSpringMVC";    }}</code></pre><ul><li><p><strong>@Controller是为了让Spring IOC容器初始化时自动扫描到；</strong></p><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.annotation.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre></li></ul></li><li><p><strong>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</strong></p><p>@RequestMapping</p><ul><li>作用：用于建立请求 URL 和处理请求方法之间的对应关系</li></ul></li></ul><ul><li><p>位置：</p><p>​      类上，请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录</p><p>​      方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p></li><li><p>属性：</p><p>​      value：用于指定请求的URL。它和path属性的作用是一样的</p><p>​      method：用于指定请求的方式</p><p>​      params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样</p></li><li><p>例如：</p><p>​      params = {“accountName”}，表示请求参数必须有accountName</p><p>​      params = {“moeny!100”}，表示请求参数中money不能是100</p></li><li><p><strong>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</strong></p></li><li><p><strong>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/hello.jsp。</strong></p></li></ul><h4 id="2-2-6、编写跳转页面"><a href="#2-2-6、编写跳转页面" class="headerlink" title="2.2.6、编写跳转页面"></a>2.2.6、编写跳转页面</h4><p>在src/main/webapp/WEB-INF/jsp/目录下编写跳转页面HelloSpringMVC.jsp</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2-2-7、测试"><a href="#2-2-7、测试" class="headerlink" title="2.2.7、测试"></a>2.2.7、测试</h4><ul><li>启动tomcat</li><li>访问<a href="http://localhost:8080/springmvc-03-annotation/HelloController/Hello">http://localhost:8080/springmvc-03-annotation/HelloController/Hello</a></li></ul><h3 id="2-3、小结"><a href="#2-3、小结" class="headerlink" title="2.3、小结"></a>2.3、小结</h3><p><strong>SpringMVC实现步骤：</strong></p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p><strong>使用springMVC必须配置的三大件：</strong></p><p>处理器映射器、处理器适配器、视图解析器</p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h2 id="三、RestFul和控制器"><a href="#三、RestFul和控制器" class="headerlink" title="三、RestFul和控制器"></a>三、RestFul和控制器</h2><h3 id="3-1、控制器Controller"><a href="#3-1、控制器Controller" class="headerlink" title="3.1、控制器Controller"></a>3.1、控制器Controller</h3><ul><li>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</li><li>控制器负责解析用户的请求并将其转换为一个模型。</li><li>在Spring MVC中一个控制器类可以包含多个方法</li><li>在Spring MVC中，对于Controller的配置方式有很多种</li></ul><h3 id="3-2、实现Controller接口"><a href="#3-2、实现Controller接口" class="headerlink" title="3.2、实现Controller接口"></a>3.2、实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><pre class="language-java" data-language="java"><code class="language-java">//实现该接口的类获得控制器功能public interface Controller {   //处理请求且返回一个模型与视图对象   ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;}</code></pre><ul><li>测试见2.1配置版</li><li><strong>说明：</strong><ul><li>实现接口Controller定义控制器是较老的办法</li><li>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</li></ul></li></ul><h3 id="3-3、RestFul风格"><a href="#3-3、RestFul风格" class="headerlink" title="3.3、RestFul风格"></a>3.3、RestFul风格</h3><p><strong>概念：</strong></p><ul><li>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</li></ul><p><strong>功能：</strong></p><ul><li><p>资源：互联网所有的事物都可以被抽象为资源</p></li><li><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p></li><li><p>分别对应 添加、 删除、修改、查询。</p></li></ul><p><strong>传统方式操作资源 ：</strong>通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p> <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p> <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p> <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p> <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源 ：</strong>可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p> <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p> <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p> <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p> <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>测试：</strong></p><ul><li><p>使用注解版的方式新建一个Module，springmvc-04-RestFul</p></li><li><p>导入相关依赖</p></li><li><p>配置web.xml文件</p></li><li><p>配置SpringMVC的配置文件</p></li><li><p>编写Controller操作业务</p><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class RC {    @RequestMapping("/yuanyou")    public String test1(Model model,int a,int b){        int result = a+b;        //返回一个模型试图对象，Spring MVC会自动实例化一个Modle对象向视图传值        model.addAttribute("msg","这里是原有方式"+result);        return "restful";    }    @RequestMapping("/RF/{a}/{b}")    //@PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上    public String test2(Model model, @PathVariable int a, @PathVariable int b){        int result = a+b;        //返回一个模型试图对象，Spring MVC会自动实例化一个Modle对象向视图传值        model.addAttribute("msg","这里是RestFul方式"+result);        return "restful";    }}</code></pre></li><li><p>编写跳转页面</p><p>在src/main/webapp/WEB-INF/jsp/目录下编写跳转页面restful.jsp</p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${msg}&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>使用原有方式访问：<a href="http://localhost:8080/springmvc-04-RestFul/yuanyou?a=1&amp;b=2">http://localhost:8080/springmvc-04-RestFul/yuanyou?a=1&amp;b=2</a></p></li><li><p>使用RestFul方式访问：<a href="http://localhost:8080/springmvc-04-RestFul/RF/1/2">http://localhost:8080/springmvc-04-RestFul/RF/1/2</a></p></li></ul><p><strong>使用路径变量的好处：</strong></p><ul><li>使路径变得更加简洁；</li><li>获得参数更加方便，框架会自动进行类型转换。</li><li>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/RF/1/a，则路径与方法不匹配，而不会是参数转换失败。</li></ul><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><ul><li><p><strong>测试</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping(value = "/test3/{a}/{b}",method = {RequestMethod.GET})public String test3(Model model, @PathVariable int a, @PathVariable int b){    int result = a+b;    //返回一个模型试图对象，Spring MVC会自动实例化一个Modle对象向视图传值    model.addAttribute("msg","使用method属性指定请求类型"+result);    return "restful";}</code></pre><p>我们使用浏览器地址栏进行访问默认是Get请求，若将RequestMethod.GET改为RequestMethod.POST则会报错405</p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><pre class="language-java" data-language="java"><code class="language-java">@GetMapping@PostMapping@PutMapping@DeleteMapping@PatchMapping</code></pre><h2 id="四、数据处理及跳转"><a href="#四、数据处理及跳转" class="headerlink" title="四、数据处理及跳转"></a>四、数据处理及跳转</h2><h3 id="4-1、结果跳转方式"><a href="#4-1、结果跳转方式" class="headerlink" title="4.1、结果跳转方式"></a>4.1、结果跳转方式</h3><h4 id="4-1-1、ModelAndView"><a href="#4-1-1、ModelAndView" class="headerlink" title="4.1.1、ModelAndView"></a>4.1.1、ModelAndView</h4><p>创建ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面。</p><p>跳转页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 视图解析器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 前缀 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 后缀 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><p>对应的Controller类</p><pre class="language-java" data-language="java"><code class="language-java">//实现Controller接口public class HelloController implements Controller {    @Override    public ModelAndView handleRequest(HttpServletRequest Request, HttpServletResponse Response) throws Exception {        //创建模型和视图        ModelAndView MV = new ModelAndView();        //封装要传输到跳转页面的对象，参数为键值对        MV.addObject("msg","HelloSpringMVC");        //封装要跳转的视图，放在ModelAndView中        MV.setViewName("HelloSpringMVC");       //WEB-INF/jsp/HelloSpringMVC.jsp        return MV;    }}</code></pre><h4 id="4-1-2、Servlet-API"><a href="#4-1-2、Servlet-API" class="headerlink" title="4.1.2、Servlet API"></a>4.1.2、Servlet API</h4><p>通过设置ServletAPI , 不需要视图解析器：</p><ul><li>通过HttpServletResponse直接进行输出</li><li>通过HttpServletResponse实现重定向</li><li>通过HttpServletRequest实现转发</li></ul><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/response/r1")public void test4(HttpServletRequest request, HttpServletResponse response) throws IOException {    response.getWriter().println("通过HttpServletResponse直接进行输出");}@RequestMapping("/response/r2")public void test5(HttpServletRequest request, HttpServletResponse response) throws IOException {    //通过HttpServletResponse实现重定向    response.sendRedirect("/springmvc-04-RestFul/WEB-INF/jsp/restful.jsp");}@RequestMapping("/response/r3")public void test6(HttpServletRequest request, HttpServletResponse response) throws Exception {    request.setAttribute("msg","通过HttpServletRequest实现转发");    request.getRequestDispatcher("/WEB-INF/jsp/restful.jsp").forward(request,response);}</code></pre><h3 id="4-1-3、SpringMVC"><a href="#4-1-3、SpringMVC" class="headerlink" title="4.1.3、SpringMVC"></a>4.1.3、SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class ResultSpringMVC {   @RequestMapping("/rsm/t1")   public String test1(){       //转发       return "/index.jsp";  }   @RequestMapping("/rsm/t2")   public String test2(){       //转发二       return "forward:/index.jsp";  }   @RequestMapping("/rsm/t3")   public String test3(){       //重定向       return "redirect:/index.jsp";  }}</code></pre><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class ResultSpringMVC2 {   @RequestMapping("/rsm2/t1")   public String test1(){       //转发       return "test";  }   @RequestMapping("/rsm2/t2")   public String test2(){       //重定向       return "redirect:/index.jsp";       //return "redirect:hello.do"; //hello.do为另一个请求/  }}</code></pre><h3 id="4-2、数据处理"><a href="#4-2、数据处理" class="headerlink" title="4.2、数据处理"></a>4.2、数据处理</h3><p>新建Module，springmvc-05-data</p><h4 id="4-2-1、处理提交数据"><a href="#4-2-1、处理提交数据" class="headerlink" title="4.2.1、处理提交数据"></a>4.2.1、处理提交数据</h4><ul><li><p><strong>提交的域名名称和处理方法的参数一致</strong></p><pre class="language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/datacontroller")public class datacontroller {    @RequestMapping("/test1")    public void test1(String name){        System.out.println(name);    }}</code></pre><ul><li>提交域名：<a href="http://localhost:8080/springmvc-05-data/datacontroller/test1?name=zhangsan">http://localhost:8080/springmvc-05-data/datacontroller/test1?name=zhangsan</a></li><li>访问结果：控制台输出zhangsan</li></ul></li></ul><ul><li><p><strong>提交的域名称和处理方法的参数名不一致</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test2")    //@RequestParam("username")代表要提交的域名    public void test2(@RequestParam("username") String name){        System.out.println(name);    }</code></pre><ul><li>提交域名：<a href="http://localhost:8080/springmvc-05-data/datacontroller/test2?username=zhangsan">http://localhost:8080/springmvc-05-data/datacontroller/test2?username=zhangsan</a></li><li>访问结果：控制台输出zhangsan</li></ul></li></ul><ul><li><p><strong>提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致 , 参数使用对象即可</p><ul><li><p>实体类</p><pre class="language-java" data-language="java"><code class="language-java">public class user {    private String name;    private int id;    private int age;}</code></pre></li><li><p>处理方法</p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test3")public void test3(user user){    System.out.println(user);}</code></pre></li><li><p>提交域名：<a href="http://localhost:8080/springmvc-05-data/datacontroller/test3?name=zhangsan&amp;id=1&amp;age=24">http://localhost:8080/springmvc-05-data/datacontroller/test3?name=zhangsan&amp;id=1&amp;age=24</a></p></li><li><p>控制台输出：user{name=’zhangsan’, id=1, age=24}</p></li></ul></li></ul><h4 id="4-2-2、数据显示到前端"><a href="#4-2-2、数据显示到前端" class="headerlink" title="4.2.2、数据显示到前端"></a>4.2.2、数据显示到前端</h4><ul><li><p><strong>通过ModelAndView</strong></p><pre class="language-java" data-language="java"><code class="language-java">//实现Controller接口public class HelloController implements Controller {    @Override    public ModelAndView handleRequest(HttpServletRequest Request, HttpServletResponse Response) throws Exception {        //创建模型和视图        ModelAndView MV = new ModelAndView();        //封装要传输到跳转页面的对象，参数为键值对        MV.addObject("msg","HelloSpringMVC");        //封装要跳转的视图，放在ModelAndView中        MV.setViewName("HelloSpringMVC");       //WEB-INF/jsp/HelloSpringMVC.jsp        return MV;    }}</code></pre></li><li><p><strong>通过ModelMap</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test4")public String test4(ModelMap model,String name){    //封装要显示到视图中的数据    model.addAttribute("name",name);    return "hello";}</code></pre></li><li><p><strong>通过Model</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test4")public String test4(Model model,String name){    //封装要显示到视图中的数据    model.addAttribute("name",name);    return "hello";}</code></pre></li><li><p><strong>对比</strong></p><ul><li>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</li><li>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</li><li>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</li></ul></li></ul><h4 id="4-2-3、乱码问题"><a href="#4-2-3、乱码问题" class="headerlink" title="4.2.3、乱码问题"></a>4.2.3、乱码问题</h4><ul><li><p><strong>测试</strong></p><ul><li><p>在webapp下编写一个提交的表单</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/springmvc-05-data/datacontroller/test5<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>编写对应的Controller处理类</p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test5")public String test5(Model model, String name){    //封装要显示到视图中的数据    model.addAttribute("name",name);    return "hello";}</code></pre></li><li><p>在WEB-INF/jsp下编写跳转页面hello.jsp</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>${name}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>访问表单<a href="http://localhost:8080/springmvc-05-data/test5.html%EF%BC%8C%E5%B9%B6%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E6%B5%8B%E8%AF%95%E4%BC%9A%E5%8F%91%E7%8E%B0%E4%B9%B1%E7%A0%81">http://localhost:8080/springmvc-05-data/test5.html，并输入中文测试会发现乱码</a></p></li></ul></li></ul><ul><li><p><strong>解决方法：</strong></p><ul><li><p>方法一：以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置。get请求方式无法解决，必须使用post请求</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>方法二：自定义过滤器</p><pre class="language-java" data-language="java"><code class="language-java">package com.data.filter;import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.Map;/*** 解决get和post请求 全部乱码的过滤器*/public class GenericEncodingFilter implements Filter {   @Override   public void destroy() {  }   @Override   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {       //处理response的字符编码       HttpServletResponse myResponse=(HttpServletResponse) response;       myResponse.setContentType("text/html;charset=UTF-8");       // 转型为与协议相关对象       HttpServletRequest httpServletRequest = (HttpServletRequest) request;       // 对request包装增强       HttpServletRequest myrequest = new MyRequest(httpServletRequest);       chain.doFilter(myrequest, response);  }   @Override   public void init(FilterConfig filterConfig) throws ServletException {  }}//自定义request对象，HttpServletRequest的包装类class MyRequest extends HttpServletRequestWrapper {   private HttpServletRequest request;   //是否编码的标记   private boolean hasEncode;   //定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰   public MyRequest(HttpServletRequest request) {       super(request);// super必须写       this.request = request;  }   // 对需要增强方法 进行覆盖   @Override   public Map getParameterMap() {       // 先获得请求方式       String method = request.getMethod();       if (method.equalsIgnoreCase("post")) {           // post请求           try {               // 处理post乱码               request.setCharacterEncoding("utf-8");               return request.getParameterMap();          } catch (UnsupportedEncodingException e) {               e.printStackTrace();          }      } else if (method.equalsIgnoreCase("get")) {           // get请求           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();           if (!hasEncode) { // 确保get手动编码逻辑只运行一次               for (String parameterName : parameterMap.keySet()) {                   String[] values = parameterMap.get(parameterName);                   if (values != null) {                       for (int i = 0; i &lt; values.length; i++) {                           try {                               // 处理get乱码                               values[i] = new String(values[i]                                      .getBytes("ISO-8859-1"), "utf-8");                          } catch (UnsupportedEncodingException e) {                               e.printStackTrace();                          }                      }                  }              }               hasEncode = true;          }           return parameterMap;      }       return super.getParameterMap();  }   //取一个值   @Override   public String getParameter(String name) {       Map&lt;String, String[]&gt; parameterMap = getParameterMap();       String[] values = parameterMap.get(name);       if (values == null) {           return null;      }       return values[0]; // 取回参数的第一个值  }   //取所有值   @Override   public String[] getParameterValues(String name) {       Map&lt;String, String[]&gt; parameterMap = getParameterMap();       String[] values = parameterMap.get(name);       return values;  }}</code></pre></li></ul></li></ul><h2 id="五、Json交互处理"><a href="#五、Json交互处理" class="headerlink" title="五、Json交互处理"></a>五、Json交互处理</h2><h3 id="5-1、什么是Json"><a href="#5-1、什么是Json" class="headerlink" title="5.1、什么是Json"></a>5.1、什么是Json</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><pre class="language-html" data-language="html"><code class="language-html">{"name": "QinJiang"}{"age": "3"}{"sex": "男"}</code></pre><p><strong>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml">var obj = {a: 'Hello', b: 'World'}; //这是一个对象，注意键名也是可以使用引号包裹的var json = '{"a": "Hello", "b": "World"}'; //这是一个 JSON 字符串，本质是一个字符串</code></pre><h3 id="5-2、JSON和JavaScript对象互传"><a href="#5-2、JSON和JavaScript对象互传" class="headerlink" title="5.2、JSON和JavaScript对象互传"></a>5.2、JSON和JavaScript对象互传</h3><h4 id="5-2-1、简易互传"><a href="#5-2-1、简易互传" class="headerlink" title="5.2.1、简易互传"></a>5.2.1、简易互传</h4><ul><li><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><pre class="language-html" data-language="html"><code class="language-html">var obj = JSON.parse('{"a": "Hello", "b": "World"}');//结果是 {a: 'Hello', b: 'World'}</code></pre></li><li><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><pre class="language-html" data-language="html"><code class="language-html">var json = JSON.stringify({a: 'Hello', b: 'World'});//结果是 '{"a": "Hello", "b": "World"}'</code></pre></li><li><p><strong>测试</strong></p><p>新建Module，springmvc-06-JSON</p><p>在webapp目录下创建json-1.html文件</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">//编写一个对象</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"弧格尔"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">,</span>    <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">"男"</span>  <span class="token punctuation">}</span>  <span class="token comment">//将js对象转换为Json字符串</span>  <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//写入浏览器控制台</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将Json字符串转换为js对象</span>  <span class="token keyword">var</span> js <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//写入浏览器控制台</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>查看结果</strong></p><p>在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="/posts/3377/7.png"></p></li></ul><h4 id="5-2-2、Controller返回JSON数据"><a href="#5-2-2、Controller返回JSON数据" class="headerlink" title="5.2.2、Controller返回JSON数据"></a>5.2.2、Controller返回JSON数据</h4><ul><li><p><strong>导入Jackson的依赖</strong></p><p>Jackson应该是目前比较好的json解析工具</p></li><li><p><strong>配置文件web.xml</strong></p></li><li><p><strong>配置SpringMVC的配置文件springmvc-servlet.xml</strong></p></li><li><p><strong>编写一个实体类</strong></p><pre class="language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class User {    private String name;    private int age;    private String sex;}</code></pre></li><li><p><strong>编写Controller操作类</strong></p><pre class="language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/JsonController")public class JsonController {    @RequestMapping("/test1")    @ResponseBody    public String test1() throws JsonProcessingException {        //创建一个Jackson的映射器        ObjectMapper Mapper = new ObjectMapper();        //创建一个对象        User user = new User("弧格尔",31,"男");        //将对象解析成json格式        String str = Mapper.writeValueAsString(user);        //由于@ResponseBody注解，这里会将str转成json格式返回；十分方便        return str;    }}</code></pre></li><li><p><strong>测试</strong></p><p>访问域名：<a href="http://localhost:8080/springmvc-06-JSON/JsonController/test1">http://localhost:8080/springmvc-06-JSON/JsonController/test1</a></p><p><img src="/posts/3377/8.png"></p><p>出现乱码问题：需要设置其编码格式为utf-8，以及其返回类型</p><pre class="language-java" data-language="java"><code class="language-java">//通过@RequestMaping的produces属性来实现，修改下代码//produces:指定响应体返回类型和编码@RequestMapping(value = "/test1",produces = "application/json;charset=utf-8")</code></pre></li></ul><h3 id="5-3、乱码统一解决"><a href="#5-3、乱码统一解决" class="headerlink" title="5.3、乱码统一解决"></a>5.3、乱码统一解决</h3><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="5-4、返回JSON字符串统一解决"><a href="#5-4、返回JSON字符串统一解决" class="headerlink" title="5.4、返回JSON字符串统一解决"></a>5.4、返回JSON字符串统一解决</h3><pre class="language-java" data-language="java"><code class="language-java">//直接再类上使用@RestController注解，使得所有的方法只返回json字符串，不用在每个添加@ResponseBody@RestController@RequestMapping("/JsonController1")public class JsonController1 {    @RequestMapping("/test1")    public String test1() throws JsonProcessingException {        //创建一个jackson的对象映射器，用来解析数据        ObjectMapper mapper = new ObjectMapper();        //创建一个对象        User user = new User("弧格尔", 31, "男");        //将我们的对象解析成为json格式        String str = mapper.writeValueAsString(user);        //由于@ResponseBody注解，这里会将str转成json格式返回；十分方便        return str;    }}</code></pre><p>访问域名：<a href="http://localhost:8080/springmvc-06-JSON/JsonController1/test1">http://localhost:8080/springmvc-06-JSON/JsonController1/test1</a></p><ul><li><p><strong>测试集合输出</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test2")public String test2() throws JsonProcessingException {    //创建一个jackson的对象映射器，用来解析数据    ObjectMapper mapper = new ObjectMapper();    //创建一个对象集合    List&lt;User&gt; userList = new ArrayList&lt;&gt;();    userList.add(new User("张三",12,"男"));    userList.add(new User("李四",15,"男"));    userList.add(new User("Lisa",14,"女"));    //将我们的集合解析成为json格式    String str = mapper.writeValueAsString(userList);    //由于@ResponseBody注解，这里会将str转成json格式返回；十分方便    return str;}</code></pre><p>访问域名：<a href="http://localhost:8080/springmvc-06-JSON/JsonController1/test2">http://localhost:8080/springmvc-06-JSON/JsonController1/test2</a></p></li><li><p><strong>测试时间输出</strong></p><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping("/test3")public String test3() throws JsonProcessingException {    //创建一个jackson的对象映射器，用来解析数据    ObjectMapper mapper = new ObjectMapper();    //不使用时间戳的方式    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);    //自定义日期格式对象    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    //指定日期格式    mapper.setDateFormat(sdf);    Date date = new Date();    String str = mapper.writeValueAsString(date);    return str;}</code></pre><p>访问域名：<a href="http://localhost:8080/springmvc-06-JSON/JsonController1/test3">http://localhost:8080/springmvc-06-JSON/JsonController1/test3</a></p></li></ul><h3 id="5-5、FastJson"><a href="#5-5、FastJson" class="headerlink" title="5.5、FastJson"></a>5.5、FastJson</h3><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象</p><p>与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><ul><li><p><strong>导入依赖</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  导入FastJson依赖  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>JSONObject 代表 JSON对象</strong></p><ul><li><p>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</p></li><li><p>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是</p><p>否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</p></li></ul></li><li><p><strong>JSONArray 代表 JSON对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li><li><p><strong>代码测试</strong></p><pre class="language-java" data-language="java"><code class="language-java">package com.kuang.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.kuang.pojo.User;import java.util.ArrayList;import java.util.List;public class FastJsonDemo {   public static void main(String[] args) {       //创建一个对象       User user1 = new User("秦疆1号", 3, "男");       User user2 = new User("秦疆2号", 3, "男");       User user3 = new User("秦疆3号", 3, "男");       User user4 = new User("秦疆4号", 3, "男");       List&lt;User&gt; list = new ArrayList&lt;User&gt;();       list.add(user1);       list.add(user2);       list.add(user3);       list.add(user4);       System.out.println("*******Java对象 转 JSON字符串*******");       String str1 = JSON.toJSONString(list);       System.out.println("JSON.toJSONString(list)==&gt;"+str1);       String str2 = JSON.toJSONString(user1);       System.out.println("JSON.toJSONString(user1)==&gt;"+str2);       System.out.println("\n****** JSON字符串 转 Java对象*******");       User jp_user1=JSON.parseObject(str2,User.class);       System.out.println("JSON.parseObject(str2,User.class)==&gt;"+jp_user1);       System.out.println("\n****** Java对象 转 JSON对象 ******");       JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);       System.out.println("(JSONObject) JSON.toJSON(user2)==&gt;"+jsonObject1.getString("name"));       System.out.println("\n****** JSON对象 转 Java对象 ******");       User to_java_user = JSON.toJavaObject(jsonObject1, User.class);       System.out.println("JSON.toJavaObject(jsonObject1, User.class)==&gt;"+to_java_user);  }}</code></pre></li></ul><h2 id="六、整合SMM框架"><a href="#六、整合SMM框架" class="headerlink" title="六、整合SMM框架"></a>六、整合SMM框架</h2><h3 id="6-1、创建数据表"><a href="#6-1、创建数据表" class="headerlink" title="6.1、创建数据表"></a>6.1、创建数据表</h3><p>创建一个存放书籍的数据表</p><pre class="language-none"><code class="language-none">CREATE DATABASE `ssmbuild`;USE `ssmbuild`;DROP TABLE IF EXISTS `books`;CREATE TABLE `books` (`bookID` INT(10) NOT NULL AUTO_INCREMENT COMMENT '书id',`bookName` VARCHAR(100) NOT NULL COMMENT '书名',`bookCounts` INT(11) NOT NULL COMMENT '数量',`detail` VARCHAR(200) NOT NULL COMMENT '描述',KEY `bookID` (`bookID`)) ENGINE=INNODB DEFAULT CHARSET=utf8INSERT  INTO `books`(`bookID`,`bookName`,`bookCounts`,`detail`)VALUES(1,'Java',1,'从入门到放弃'),(2,'MySQL',10,'从删库到跑路'),(3,'Linux',5,'从进门到进牢');</code></pre><h3 id="6-2、新建Maven项目"><a href="#6-2、新建Maven项目" class="headerlink" title="6.2、新建Maven项目"></a>6.2、新建Maven项目</h3><p>新建一个module：springmvc-07-ssm，并导入相应的依赖信息</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入tomcat--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--静态资源过滤--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--主要依赖：junit、mybatis、mybatis-spring、数据库连接池、数据库驱动、servlet、jsp、springmvc、jdbc--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  Junit依赖  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    MyBatis联合spring依赖    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    mybatis依赖    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    数据库驱动    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    servlet依赖    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入jsp依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入jstl依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  导入springMVC依赖  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--spring jdbc依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--lombok表达式依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="6-3、建立基本结构和配置框架"><a href="#6-3、建立基本结构和配置框架" class="headerlink" title="6.3、建立基本结构和配置框架"></a>6.3、建立基本结构和配置框架</h3><ul><li><p><strong>基本结构</strong></p><ul><li>com.ssm.Mapper</li><li>com.ssm.Pojo</li><li>com.ssm.Service</li><li>com.ssm.Controller</li></ul></li><li><p><strong>配置框架</strong></p><ul><li>数据库配置文件：database.properties</li><li>数据库核心配置文件：mybatis-config.xml</li><li>spring整体配置文件：applicationContext.xml</li><li>spring整合mapper层配置文件：spring-mapper.xml</li><li>spring整合service层配置文件：spring-service.xml</li><li>springmvc整合controller层配置文件：springmvc-controller.xml</li></ul></li></ul><p><img src="/posts/3377/9.png"></p><h3 id="6-4、MyBatis层编写"><a href="#6-4、MyBatis层编写" class="headerlink" title="6.4、MyBatis层编写"></a>6.4、MyBatis层编写</h3><h4 id="6-4-1、数据库配置文件：database-properties"><a href="#6-4-1、数据库配置文件：database-properties" class="headerlink" title="6.4.1、数据库配置文件：database.properties"></a>6.4.1、数据库配置文件：database.properties</h4><pre class="language-properties" data-language="properties"><code class="language-properties">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=123456</code></pre><h4 id="6-4-2、数据库核心配置文件：mybatis-config-xml"><a href="#6-4-2、数据库核心配置文件：mybatis-config-xml" class="headerlink" title="6.4.2、数据库核心配置文件：mybatis-config.xml"></a>6.4.2、数据库核心配置文件：mybatis-config.xml</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--取别名--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Pojo.Books<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="6-4-3、实体类"><a href="#6-4-3、实体类" class="headerlink" title="6.4.3、实体类"></a>6.4.3、实体类</h4><pre class="language-java" data-language="java"><code class="language-java">//pojo包下@Data@AllArgsConstructor@NoArgsConstructorpublic class Books {    private int bookID;    private String bookName;    private int bookCounts;    private String detail;}</code></pre><h4 id="6-4-4、Mapper接口BooksMapper"><a href="#6-4-4、Mapper接口BooksMapper" class="headerlink" title="6.4.4、Mapper接口BooksMapper"></a>6.4.4、Mapper接口BooksMapper</h4><pre class="language-java" data-language="java"><code class="language-java">//Mapper包下public interface BooksMapper {    //增加一个Book    int addBook(Books book);    //根据id删除一个Book    int deleteBookById(int id);    //更新Book    int updateBook(Books books);    //根据id查询,返回一个Book    Books selectBookById(int id);    //查询全部Book,返回list集合    List&lt;Books&gt; selectAllBook();}</code></pre><h4 id="6-4-5、Mapper接口的映射文件BooksMapper-xml"><a href="#6-4-5、Mapper接口的映射文件BooksMapper-xml" class="headerlink" title="6.4.5、Mapper接口的映射文件BooksMapper.xml"></a>6.4.5、Mapper接口的映射文件BooksMapper.xml</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Mapper.BooksMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--增加一个Book--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into ssmbuild.books(bookName,bookCounts,detail)        values (#{bookName}, #{bookCounts}, #{detail})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--根据id删除一个Book--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        delete from ssmbuild.books where bookID=#{bookID}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--更新Book--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update ssmbuild.books        set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}        where bookID = #{bookID}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--根据id查询,返回一个Book--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from ssmbuild.books        where bookID = #{bookID}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--查询全部Book--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        SELECT * from ssmbuild.books    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="6-5、Service层编写"><a href="#6-5、Service层编写" class="headerlink" title="6.5、Service层编写"></a>6.5、Service层编写</h3><h4 id="6-5-1、Service接口"><a href="#6-5-1、Service接口" class="headerlink" title="6.5.1、Service接口"></a>6.5.1、Service接口</h4><pre class="language-java" data-language="java"><code class="language-java">//Service包下public interface BooksService {    //增加一个Book    int addBook(Books book);    //根据id删除一个Book    int deleteBookById(int id);    //更新Book    int updateBook(Books books);    //根据id查询,返回一个Book    Books selectBookById(int id);    //查询全部Book,返回list集合    List&lt;Books&gt; selectAllBook();}</code></pre><h4 id="6-5-2、Service接口实现类"><a href="#6-5-2、Service接口实现类" class="headerlink" title="6.5.2、Service接口实现类"></a>6.5.2、Service接口实现类</h4><pre class="language-java" data-language="java"><code class="language-java">//Service包下public class BooksServiceImpl implements BooksService{    private BooksMapper booksMapper;    public void setBooksMapper(BooksMapper booksMapper) {        this.booksMapper = booksMapper;    }    @Override    public int addBook(Books book) {        return booksMapper.addBook(book);    }    @Override    public int deleteBookById(int id) {        return booksMapper.deleteBookById(id);    }    @Override    public int updateBook(Books book) {        return booksMapper.updateBook(book);    }    @Override    public Books selectBookById(int id) {        return booksMapper.selectBookById(id);    }    @Override    public List&lt;Books&gt; selectAllBook() {        return booksMapper.selectAllBook();    }}</code></pre><h3 id="6-6、Spring层"><a href="#6-6、Spring层" class="headerlink" title="6.6、Spring层"></a>6.6、Spring层</h3><h4 id="6-6-1、Spring层整合MyBatis层"><a href="#6-6-1、Spring层整合MyBatis层" class="headerlink" title="6.6.1、Spring层整合MyBatis层"></a>6.6.1、Spring层整合MyBatis层</h4><p>配置spring整合mapper层配置文件：spring-mapper.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--spring 整合mybatis层--&gt;</span>    <span class="token comment">&lt;!-- 1.关联数据库文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--2、DataSource:使用spring的数据源替换MyBatis的配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--3、配置SqlSessionFactory--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--   绑定MyBatis的配置文件     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--   注册MyBAtis配置文件中的映射文件     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/ssm/Mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--4、配置扫描Mapper接口包，动态实现Mapper接口注入到spring容器中,Spring帮我们创建 Mapper的代理对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--给哪个Mapper包创建代理对象--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="6-6-2、Spring层整合Service层"><a href="#6-6-2、Spring层整合Service层" class="headerlink" title="6.6.2、Spring层整合Service层"></a>6.6.2、Spring层整合Service层</h4><p>配置spring整合service层配置文件：spring-service.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--spring整合service层--&gt;</span>    <span class="token comment">&lt;!--1、扫描service相关的bean --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Service<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--2、BookServiceImpl注入到IOC容器中--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Service.BooksServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>booksMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>booksMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--3、配置事务管理器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 注入数据库连接池 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="6-7、配置SpringMVC层"><a href="#6-7、配置SpringMVC层" class="headerlink" title="6.7、配置SpringMVC层"></a>6.7、配置SpringMVC层</h3><h4 id="6-7-1、配置web-xml"><a href="#6-7-1、配置web-xml" class="headerlink" title="6.7.1、配置web.xml"></a>6.7.1、配置web.xml</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--1.注册DispatcherServlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--关联一个springmvc的配置文件:因为所有配置文件均会导入到applicationContext.xml，所以可以使用这个配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动级别-1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>  <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--乱码过滤问题--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="6-7-2、配置springmvc整合controller层配置文件"><a href="#6-7-2、配置springmvc整合controller层配置文件" class="headerlink" title="6.7.2、配置springmvc整合controller层配置文件"></a>6.7.2、配置springmvc整合controller层配置文件</h4><p>配置springmvc整合controller层配置文件：springmvc-controller.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 前缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 后缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="6-8、配置ssm整体配置文件：applicationContext-xml"><a href="#6-8、配置ssm整体配置文件：applicationContext-xml" class="headerlink" title="6.8、配置ssm整体配置文件：applicationContext.xml"></a>6.8、配置ssm整体配置文件：applicationContext.xml</h3><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-mapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>springmvc-controller.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="6-9、编写Controller层和视图层"><a href="#6-9、编写Controller层和视图层" class="headerlink" title="6.9、编写Controller层和视图层"></a>6.9、编写Controller层和视图层</h3><h4 id="6-9-1、编写首页index-jsp"><a href="#6-9-1、编写首页index-jsp" class="headerlink" title="6.9.1、编写首页index.jsp"></a>6.9.1、编写首页index.jsp</h4><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;首页&lt;/title&gt;    &lt;style type="text/css"&gt;        a {            text-decoration: none;            color: black;            font-size: 18px;        }        h3 {            width: 180px;            height: 38px;            margin: 100px auto;            text-align: center;            line-height: 38px;            background: deepskyblue;            border-radius: 4px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;    &lt;a href="${pageContext.request.contextPath}/BooksController/SelectAllBooks"&gt;点击进入列表页&lt;/a&gt;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="6-9-2、查询所有书籍"><a href="#6-9-2、查询所有书籍" class="headerlink" title="6.9.2、查询所有书籍"></a>6.9.2、查询所有书籍</h4><ul><li><strong>BooksController 类编写</strong> </li></ul><pre class="language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/BooksController")public class BooksController {    @Autowired  //实现注入    private BooksServiceImpl booksService;    //查询所有书籍    @RequestMapping("/SelectAllBooks")    public String SelectAllBooks(Model model){        //使用service实现类对书籍进行查询        List&lt;Books&gt; books = booksService.selectAllBook();        //将查询结果封装        model.addAttribute("books",books);        //返回查询所有界面        return "SelectAllBooks";    }</code></pre><ul><li><strong>编写查询所有页面SelectAllBooks.jsp</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;书籍列表&lt;/title&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;    &lt;div class="row clearfix"&gt;        &lt;div class="col-md-12 column"&gt;            &lt;div class="page-header"&gt;                &lt;h1&gt;                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row"&gt;        &lt;div class="col-md-4 column"&gt;            &lt;a class="btn btn-primary" href="${pageContext.request.contextPath}/BooksController/toAddBook"&gt;新增&lt;/a&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="row clearfix"&gt;        &lt;div class="col-md-12 column"&gt;            &lt;table class="table table-hover table-striped"&gt;                &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;书籍编号&lt;/th&gt;                    &lt;th&gt;书籍名字&lt;/th&gt;                    &lt;th&gt;书籍数量&lt;/th&gt;                    &lt;th&gt;书籍详情&lt;/th&gt;                    &lt;th&gt;操作&lt;/th&gt;                &lt;/tr&gt;                &lt;/thead&gt;                &lt;tbody&gt;                &lt;c:forEach var="book" items="${requestScope.get('books')}"&gt;                    &lt;tr&gt;                        &lt;td&gt;${book.getBookID()}&lt;/td&gt;                        &lt;td&gt;${book.getBookName()}&lt;/td&gt;                        &lt;td&gt;${book.getBookCounts()}&lt;/td&gt;                        &lt;td&gt;${book.getDetail()}&lt;/td&gt;                        &lt;td&gt;                            &lt;a href="${pageContext.request.contextPath}/BooksController/toUpdateBook?id=${book.getBookID()}"&gt;更改&lt;/a&gt; |                            &lt;a href="${pageContext.request.contextPath}/BooksController/DeleteBook/${book.getBookID()}"&gt;删除&lt;/a&gt;                        &lt;/td&gt;                    &lt;/tr&gt;                &lt;/c:forEach&gt;                &lt;/tbody&gt;            &lt;/table&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="6-9-3、添加书籍"><a href="#6-9-3、添加书籍" class="headerlink" title="6.9.3、添加书籍"></a>6.9.3、添加书籍</h4><ul><li><strong>BooksController 类编写</strong> </li></ul><pre class="language-java" data-language="java"><code class="language-java">//前往添加书籍页面@RequestMapping("/toAddBook")public String toAddBook(Model model){    return "AddBook";}//添加书籍操作并返回查询所有书籍界面@RequestMapping("/AddBook")public String AddBook(Books book,Model model){    //控制台输出添加书籍页面传过来的书籍信息    System.out.println(book);    //使用service实现类进行书籍添加    int i = booksService.addBook(book);    //控制台输出是否添加成功    System.out.println(i);    //重定向方式返回查询所有书籍路径    return "redirect:/BooksController/SelectAllBooks";}</code></pre><ul><li><strong>添加书籍页面编写AddBook.jsp</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;html&gt;&lt;head&gt;  &lt;title&gt;新增书籍&lt;/title&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;!-- 引入 Bootstrap --&gt;  &lt;link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;  &lt;div class="row clearfix"&gt;    &lt;div class="col-md-12 column"&gt;      &lt;div class="page-header"&gt;        &lt;h1&gt;          &lt;small&gt;新增书籍&lt;/small&gt;        &lt;/h1&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;  &lt;form action="${pageContext.request.contextPath}/BooksController/AddBook" method="post"&gt;    书籍名称：&lt;input type="text" name="bookName"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    书籍数量：&lt;input type="text" name="bookCounts"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    书籍详情：&lt;input type="text" name="detail"&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;input type="submit" value="添加"&gt;  &lt;/form&gt;&lt;/div&gt;</code></pre><h4 id="6-9-4、修改书籍编写"><a href="#6-9-4、修改书籍编写" class="headerlink" title="6.9.4、修改书籍编写"></a>6.9.4、修改书籍编写</h4><ul><li><strong>BooksController 类编写</strong> </li></ul><pre class="language-java" data-language="java"><code class="language-java">//前往修改书籍页面@RequestMapping("/toUpdateBook")public String toUpdateBook(Model model,int id){    //根据首页传过来的id查询对应书籍    Books book = booksService.selectBookById(id);    //控制台输出书籍信息    System.out.println(book);    //封装书籍信息，跳转到更新页面    model.addAttribute("book",book);    return "UpdateBook";}//修改书籍并返回查询所有书籍界面@RequestMapping("/UpdateBook")public String UpdateBook(Books book,Model model){    //控制台输出更新页面传过来的书籍信息    System.out.println(book);    //使用service实现类进行书籍更改    int i = booksService.updateBook(book);    System.out.println(i);    //重定向方式返回查询所有书籍路径    return "redirect:/BooksController/SelectAllBooks";}</code></pre><ul><li><strong>修改书籍页面编写UpdateBook.jsp</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--  Created by IntelliJ IDEA.  User: 23757  Date: 2022/2/24  Time: 19:44  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;修改信息&lt;/title&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;!-- 引入 Bootstrap --&gt;    &lt;link href="https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="container"&gt;    &lt;div class="row clearfix"&gt;        &lt;div class="col-md-12 column"&gt;            &lt;div class="page-header"&gt;                &lt;h1&gt;                    &lt;small&gt;修改信息&lt;/small&gt;                &lt;/h1&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;form action="${pageContext.request.contextPath}/BooksController/UpdateBook" method="post"&gt;        &lt;input type="hidden" name="bookID" value="${book.getBookID()}"/&gt;        书籍名称：&lt;input type="text" name="bookName" value="${book.getBookName()}"/&gt;        书籍数量：&lt;input type="text" name="bookCounts" value="${book.getBookCounts()}"/&gt;        书籍详情：&lt;input type="text" name="detail" value="${book.getDetail() }"/&gt;        &lt;input type="submit" value="提交"/&gt;    &lt;/form&gt;&lt;/div&gt;</code></pre><h4 id="6-9-5、删除书籍"><a href="#6-9-5、删除书籍" class="headerlink" title="6.9.5、删除书籍"></a>6.9.5、<strong>删除书籍</strong></h4><p><strong>BooksController 类编写</strong></p><pre class="language-java" data-language="java"><code class="language-java">//删除书籍@RequestMapping("/DeleteBook/{BookId}")public String toDeleteBook(Model model,@PathVariable("BookId") int id){    //根据首页传过来的id删除对应信息    int i = booksService.deleteBookById(id);    System.out.println(i);    //重定向方式返回查询所有书籍路径    return "redirect:/BooksController/SelectAllBooks";}</code></pre><h2 id="七、Ajax研究"><a href="#七、Ajax研究" class="headerlink" title="七、Ajax研究"></a>七、Ajax研究</h2><h3 id="7-1、简介"><a href="#7-1、简介" class="headerlink" title="7.1、简介"></a>7.1、简介</h3><ul><li><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><h3 id="7-2、伪造Ajax"><a href="#7-2、伪造Ajax" class="headerlink" title="7.2、伪造Ajax"></a>7.2、伪造Ajax</h3><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-08-Ajax </p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">   window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentTime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> targetUrl <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframePosition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>请输入要加载的地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>加载页面位置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframePosition<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></code></pre><h3 id="7-3、Ajax的作用"><a href="#7-3、Ajax的作用" class="headerlink" title="7.3、Ajax的作用"></a>7.3、Ajax的作用</h3><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>…等等</li></ul><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><pre class="language-none"><code class="language-none">jQuery.ajax(...)      部分参数：            url：请求地址            type：请求方式，GET、POST（1.9.0之后用method）        headers：请求头            data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型(默认: "application/x-www-form-urlencoded; charset=UTF-8")          async：是否异步        timeout：设置请求超时时间（毫秒）      beforeSend：发送请求前执行的函数(全局)        complete：完成之后执行的回调函数(全局)        success：成功之后执行的回调函数(全局)          error：失败之后执行的回调函数(全局)        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型        dataType：将服务器端返回的数据转换成指定类型          "xml": 将服务器端返回的内容转换成xml格式          "text": 将服务器端返回的内容转换成普通文本格式          "html": 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。        "script": 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式          "json": 将服务器端返回的内容转换成相应的JavaScript对象        "jsonp": JSONP 格式使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</code></pre><h3 id="7-4、简单测试"><a href="#7-4、简单测试" class="headerlink" title="7.4、简单测试"></a>7.4、简单测试</h3><h4 id="7-4-1、导入相应依赖"><a href="#7-4-1、导入相应依赖" class="headerlink" title="7.4.1、导入相应依赖"></a>7.4.1、导入相应依赖</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入tomcat--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  导入springMVC依赖  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   导入servlet依赖     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--导入jsp依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="7-4-2、配置springmvc的配置文件和web-xml"><a href="#7-4-2、配置springmvc的配置文件和web-xml" class="headerlink" title="7.4.2、配置springmvc的配置文件和web.xml"></a>7.4.2、配置springmvc的配置文件和web.xml</h4><ul><li>配置文件applicationContext.xml</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ajax.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 前缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 后缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li>web.xml</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--1.注册DispatcherServlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--关联一个springmvc的配置文件:因为所有配置文件均会导入到applicationContext.xml，所以可以使用这个配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动级别-1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>  <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--乱码过滤问题--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="7-4-3、编写AjaxController"><a href="#7-4-3、编写AjaxController" class="headerlink" title="7.4.3、编写AjaxController"></a>7.4.3、编写AjaxController</h4><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class AjaxController {   @RequestMapping("/a1")   public void ajax1(String name , HttpServletResponse response) throws IOException {       if ("admin".equals(name)){           response.getWriter().print("true");      }else{           response.getWriter().print("false");      }  }}</code></pre><h4 id="7-4-4、导入jquery-，-可以使用在线的CDN-，-也可以下载导入"><a href="#7-4-4、导入jquery-，-可以使用在线的CDN-，-也可以下载导入" class="headerlink" title="7.4.4、导入jquery ， 可以使用在线的CDN ， 也可以下载导入"></a>7.4.4、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</h4><pre class="language-none"><code class="language-none">&lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;&lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;</code></pre><h4 id="7-4-5、编写index-jsp页面"><a href="#7-4-5、编写index-jsp页面" class="headerlink" title="7.4.5、编写index.jsp页面"></a>7.4.5、编写index.jsp页面</h4><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;    &lt;script src="https://code.jquery.com/jquery-3.1.1.min.js"&gt;&lt;/script&gt;&lt;%--    &lt;script src="${pageContext.request.contextPath}/statics/js/jquery-3.1.1.min.js"&gt;&lt;/script&gt;--%&gt;    &lt;script&gt;        function a1(){            $.post({                url:"${pageContext.request.contextPath}/a1",                data:{'name':$("#txtName").val()},                //成功的处理结果                success:function (data,status) {                    alert(data);                    alert(status);                }            });        }    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;%--onblur：失去焦点触发事件--%&gt;用户名:&lt;input type="text" id="txtName" onblur="a1()"/&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h4 id="7-4-6、测试"><a href="#7-4-6、测试" class="headerlink" title="7.4.6、测试"></a>7.4.6、测试</h4><p>启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><h2 id="八、拦截器-文件上传下载"><a href="#八、拦截器-文件上传下载" class="headerlink" title="八、拦截器+文件上传下载"></a>八、拦截器+文件上传下载</h2><h3 id="8-1、拦截器"><a href="#8-1、拦截器" class="headerlink" title="8.1、拦截器"></a>8.1、拦截器</h3><h4 id="8-1-1、简介"><a href="#8-1-1、简介" class="headerlink" title="8.1.1、简介"></a>8.1.1、简介</h4><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><ul><li><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul></li><li><p><strong>拦截器</strong></p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li></ul></li><li><p><strong>自定义拦截器</strong></p><ul><li>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</li></ul></li></ul><h4 id="8-1-2、自定义拦截器"><a href="#8-1-2、自定义拦截器" class="headerlink" title="8.1.2、自定义拦截器"></a>8.1.2、自定义拦截器</h4><p>新建一个Moudule ， springmvc-09-Interceptor ， 添加web支持</p><ol><li>添加springmvc的对应依赖</li><li>配置springmvc核心配置文件和web.xml</li><li>编写前端index.jsp页面</li><li>编写一个Controller，接收请求</li><li>编写一个Interceptor拦截器</li><li>配置拦截器</li><li>测试</li></ol><h4 id="8-1-3、拦截器入门"><a href="#8-1-3、拦截器入门" class="headerlink" title="8.1.3、拦截器入门"></a>8.1.3、拦截器入门</h4><ul><li><strong>添加springmvc依赖</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--导入tomcat--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--  导入springMVC依赖  --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--   导入servlet依赖     --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--导入jsp依赖--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>配置springmvc配置文件和web.xml</strong></li></ul><ol><li>springmvc配置文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 视图解析器 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 前缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 后缀 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><ol start="2"><li>web.xml</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--1.注册DispatcherServlet--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--关联一个springmvc的配置文件:因为所有配置文件均会导入到applicationContext.xml，所以可以使用这个配置文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--启动级别-1--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span>  <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--乱码过滤问题--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>编写前端页面</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="${pageContext.request.contextPath}/interceptor"&gt;拦截器测试&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><strong>编写Controller，接受请求</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class InterceptorController {    @RequestMapping("/interceptor")    @ResponseBody    public String testFunction() {        System.out.println("控制器中的方法执行了");        return "hello";    }}</code></pre><ul><li><strong>编写一个拦截器</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class MyInterceptor implements HandlerInterceptor {    //在请求处理的方法之前执行    //如果返回true执行下一个拦截器    //如果返回false就不执行下一个拦截器    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        System.out.println("------------处理前------------");        return true;    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {        System.out.println("---------处理后------------");    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        System.out.println("---------清理------------");    }}</code></pre><ul><li><strong>配置拦截器</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    关于拦截器的配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--/** 包括路径及其子路径--&gt;</span>            <span class="token comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span>            <span class="token comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--bean配置的就是拦截器--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>测试</strong></li></ul><p>启动tomcat进行测试</p><h4 id="8-1-4、验证用户是否登录（应用）"><a href="#8-1-4、验证用户是否登录（应用）" class="headerlink" title="8.1.4、验证用户是否登录（应用）"></a>8.1.4、验证用户是否登录（应用）</h4><ul><li><p><strong>要求</strong></p><ul><li>有一个登录页面，需要写一个Controller访问页面</li><li>登录页面有提交表单的动作，需要在Controller中执行，判断用户名和密码是否正确，如果正确，向session中写入用户信息，返回登录成功页面</li><li>拦截用户请求，判断用户是否登录，如果用户已登录，放行，未登录，跳转到登录页面</li></ul></li><li><p><strong>导入相应的依赖</strong></p></li><li><p><strong>配置springmvc的配置文件和web.xml</strong></p></li><li><p><strong>编写首页页面，即默认访问页面index.jsp</strong></p></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;首页&lt;/h1&gt;&lt;%--登录--%&gt;        &lt;a href="${pageContext.request.contextPath}/UserController/JumpLogin"&gt;登录&lt;/a&gt;        &lt;a href="${pageContext.request.contextPath}/UserController/JumpSuccess"&gt;成功页面&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><strong>编写登录页面Login.jsp</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;登录页面&lt;/title&gt;&lt;/head&gt;&lt;h1&gt;登录页面&lt;/h1&gt;&lt;hr&gt;&lt;body&gt;&lt;%--跳转到登录业务--%&gt;   &lt;form action="${pageContext.request.contextPath}/UserController/Login" method="post"&gt;    用户名：&lt;input type="text" name="username"&gt; &lt;br&gt;    密码：&lt;input type="password" name="pwd"&gt; &lt;br&gt;    &lt;input type="submit" value="提交"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><strong>编写登录成功页面Success.jsp</strong></li></ul><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;登陆成功页面&lt;/title&gt;&lt;/head&gt;&lt;body&gt;${user}         &lt;%--显示登陆成功的用户名--%&gt;&lt;a href="${pageContext.request.contextPath}/UserController/GoOut"&gt;注销&lt;/a&gt;    &lt;%--跳转到注销业务--%&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><ul><li><strong>编写登录跳转Controller业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@Controller@RequestMapping("/UserController")public class LoginController {    //跳转到登录页面    @RequestMapping("/JumpLogin")    public String JumpLogin(){        return "Login";    }    }</code></pre><ul><li><strong>编写登录页面提交判断业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">//登录提交页面判断@RequestMapping("/Login")public String Login(HttpSession session, String username, String pwd) throws Exception{    // 向session记录用户身份信息    System.out.println("接收前端==="+username);    //判断用户名是否正确，是跳转到Success页面，否则跳转到Login登录页面    if("admin".equals(username)){        session.setAttribute("user", username);        return "Success";    }else        return "Login";}</code></pre><ul><li><strong>编写首页跳转到登录成功页面业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">//跳转到登陆成功页面@RequestMapping("/JumpSuccess")public String LoginSuccess(){    return "Success";}</code></pre><ul><li><strong>编写登陆成功页面的注销业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">//退出登陆@RequestMapping("GoOut")public String LoginOut(HttpSession session) throws Exception {    // session 过期    session.invalidate();    return "Login";}</code></pre><ul><li><strong>编写拦截器</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class LoginInterceptor implements HandlerInterceptor {//请求Controller业务处理前    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException, IOException {        //获取session对象，可获取传过来的信息        HttpSession session = request.getSession();        //输出请求的uri        System.out.println("uri: " + request.getRequestURI());        //判断是否是跳转到登录页面请求，是则放行        if (request.getRequestURI().contains("JumpLogin")) {            return true;        }        //判断是否是登录页面提交业务请求，是则放行        if (request.getRequestURI().contains("Login")) {            return true;        }        // 判断用户是否登录，是则放行        if(session.getAttribute("user") != null) {            return true;        }        // 用户没有登陆跳转到登陆页面        request.getRequestDispatcher("/WEB-INF/jsp/Login.jsp").forward(request, response);        return false;    }//请求Controller业务处理后    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {    }//清理    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {    }}</code></pre><ul><li><strong>配置拦截器</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    关于拦截器的配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--/** 包括路径及其子路径--&gt;</span>            <span class="token comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span>            <span class="token comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/UserController/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--bean配置的就是拦截器--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ExampleUserLogin.Interceptor.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>重启tomcat进行测试</strong></li></ul><h3 id="8-2、文件上传和下载"><a href="#8-2、文件上传和下载" class="headerlink" title="8.2、文件上传和下载"></a>8.2、文件上传和下载</h3><h4 id="8-2-1、文件上传"><a href="#8-2-1、文件上传" class="headerlink" title="8.2.1、文件上传"></a>8.2.1、文件上传</h4><ul><li><strong>文件上传客户端表单需要满足：</strong><ul><li>表单项type=“file”</li><li>表单的提交方式是post</li><li>表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</li></ul></li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/user/quick22<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        文件1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadFile<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>enctype 属性详细说明：</strong><ul><li>当enctype=”application/x-www-form-urlencoded，为其默认方式，form表单的正文内容格式是key=value&amp;key=value…..的形式，只处理表单域中的 value 属性值</li><li>当enctype=”multipart/form-data”，这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>当enctype=”text/plain”，除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul></li></ul><h4 id="8-2-2、文件上传-单文件上传（应用）"><a href="#8-2-2、文件上传-单文件上传（应用）" class="headerlink" title="8.2.2、文件上传-单文件上传（应用）"></a>8.2.2、文件上传-单文件上传（应用）</h4><ul><li><strong>添加依赖</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>配置多媒体解析器</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置文件上传解析器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>编写前端页面</strong></li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/upload<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>编写Controller业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@Controllerpublic class FileController {   //@RequestParam("file") 将name=file控件得到的文件封装成CommonsMultipartFile 对象   //批量上传CommonsMultipartFile则为数组即可   @RequestMapping("/upload")   public String fileUpload(@RequestParam("file") CommonsMultipartFile file , HttpServletRequest request) throws IOException {       //获取文件名 : file.getOriginalFilename();       String uploadFileName = file.getOriginalFilename();       //如果文件名为空，直接回到首页！       if ("".equals(uploadFileName)){           return "redirect:/index.jsp";      }       System.out.println("上传文件名 : "+uploadFileName);       //上传路径保存设置       String path = request.getServletContext().getRealPath("/upload");       //如果路径不存在，创建一个       File realPath = new File(path);       if (!realPath.exists()){           realPath.mkdir();      }       System.out.println("上传文件保存地址："+realPath);       InputStream is = file.getInputStream(); //文件输入流       OutputStream os = new FileOutputStream(new File(realPath,uploadFileName)); //文件输出流       //读取写出       int len=0;       byte[] buffer = new byte[1024];       while ((len=is.read(buffer))!=-1){           os.write(buffer,0,len);           os.flush();      }       os.close();       is.close();       return "redirect:/index.jsp";  }}</code></pre><ul><li><strong>采用file.Transto 来保存上传的文件</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">/** 采用file.Transto 来保存上传的文件*/@RequestMapping("/upload2")public String  fileUpload2(@RequestParam("file") CommonsMultipartFile file, HttpServletRequest request) throws IOException {   //上传路径保存设置   String path = request.getServletContext().getRealPath("/upload");   File realPath = new File(path);   if (!realPath.exists()){       realPath.mkdir();  }   //上传文件地址   System.out.println("上传文件保存地址："+realPath);   //通过CommonsMultipartFile的方法直接写文件（注意这个时候）   file.transferTo(new File(realPath +"/"+ file.getOriginalFilename()));   return "redirect:/index.jsp";}</code></pre><h4 id="8-2-3、文件下载"><a href="#8-2-3、文件下载" class="headerlink" title="8.2.3、文件下载"></a>8.2.3、文件下载</h4><ul><li><strong>编写前端页面</strong></li></ul><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/download<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>编写Controller业务</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@RequestMapping(value="/download")public String downloads(HttpServletResponse response ,HttpServletRequest request) throws Exception{   //要下载的图片地址   String  path = request.getServletContext().getRealPath("/upload");   String  fileName = "基础语法.jpg";   //1、设置response 响应头   response.reset(); //设置页面不缓存,清空buffer   response.setCharacterEncoding("UTF-8"); //字符编码   response.setContentType("multipart/form-data"); //二进制传输数据   //设置响应头   response.setHeader("Content-Disposition",           "attachment;fileName="+URLEncoder.encode(fileName, "UTF-8"));   File file = new File(path,fileName);   //2、 读取文件--输入流   InputStream input=new FileInputStream(file);   //3、 写出文件--输出流   OutputStream out = response.getOutputStream();   byte[] buff =new byte[1024];   int index=0;   //4、执行 写出操作   while((index= input.read(buff))!= -1){       out.write(buff, 0, index);       out.flush();  }   out.close();   input.close();   return null;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java自学笔记 </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础介绍</title>
      <link href="/posts/8e37.html"/>
      <url>/posts/8e37.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h3><h4 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h4><ul><li>Spring：春天   给软件行业带来春天</li><li>2002年，首次推出Spring的框架原雏形：interface21</li><li>2004年在interface21的基础上推出Spring 1.0</li><li>Spring理念：使现有的技术更加容易使用，整合了现有的技术框架</li></ul><p><strong>官网：</strong><a href="https://spring.io/projects/spring-framework#support">https://spring.io/projects/spring-framework#support</a></p><p><strong>下载地址：</strong><a href="https://repo.spring.io/ui/native/release/org/springframework/spring">https://repo.spring.io/ui/native/release/org/springframework/spring</a></p><p><strong>github地址：</strong><a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.0.RELEASE">https://github.com/spring-projects/spring-framework/releases/tag/v5.2.0.RELEASE</a></p><p><strong>Maven依赖</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 联合MyBatis依赖 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h4><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级、非入侵式的框架</li><li><strong>控制反转（IOC）、面向切面编程（AOP）</strong></li><li>支持事务的处理，对框架整合的支持</li></ul><p><strong>总结：Spring就是一个轻量级的控制反转（IOC）、面向切面编程（AOP）的框架</strong></p><h4 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h4><p><img src="/posts/8e37/1.png"></p><h4 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h4><p>现代java的开发，说白了就是基于Spring的开发</p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于 Spring Boot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>Spring Cloud是基于Spring Boot实现的</li></ul></li></ul><h3 id="二、IOC理论"><a href="#二、IOC理论" class="headerlink" title="二、IOC理论"></a>二、IOC理论</h3><h4 id="2-1、丑陋的代码，代码耦合严重"><a href="#2-1、丑陋的代码，代码耦合严重" class="headerlink" title="2.1、丑陋的代码，代码耦合严重"></a><strong>2.1、丑陋的代码，代码耦合严重</strong></h4><ul><li><strong>在没有IoC之前,我们的操作是: 若调用者需要使用某个对象,其自身就得负责该对象及该对象所依赖对象的创建和组装;</strong></li></ul><p><img src="/posts/8e37/2.png"></p><ul><li><strong>Dao</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public interface UserDao {    void getUser();}//针对UserDao的MySQL实现类public class UserDaoMySqlImp implements UserDao{    @Override    public void getUser() {        System.out.println("MySql");    }}//针对UserDao的Orcale实现类public class UserDaoOracleImp implements UserDao{    @Override    public void getUser() {        System.out.println("Orcale");    }}</code></pre><ul><li><strong>Service</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public interface UserService {    void getUser();}//针对UserService的实现类public class UserServiceImp implements UserService{    private UserDao userDao = new UserDaoMySqlImp();    @Override    public void getUser() {        userDao.getUser();    }}</code></pre><ul><li><strong>测试类</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class SpringTest1 {    @Test    public void Demo1(){        UserServiceImp userServiceImp = new UserServiceImp();        userServiceImp.getUser();    }}</code></pre><ul><li><strong>输出结果</strong></li></ul><pre class="language-none"><code class="language-none">MySql</code></pre><p>此时如果把<code>UserDao</code>的实现类换成UserDaoOracleImp ,此时就需要修改UserServiceImp的源代码, 不符合开闭原则!</p><h4 id="2-2、IOC"><a href="#2-2、IOC" class="headerlink" title="2.2、IOC"></a>2.2、IOC</h4><p><strong>IoC : Inversion of Control (控制反转), 其本意就是将原本在程序中手动创建对象的控制权,交给Spring来管理;</strong></p><ul><li><p><strong>控制反转是一种通过描述(xml文件或注解)并通过第三方生产或获取特定对象的方式,在Spring中实现控制反转的是IOC容器,其实现方法是依赖注入(Dependency Injection,DI)</strong></p></li><li><p><strong>有IoC之后,调用者只管负责从Spring容器中获取需要使用的对象,不关心对象的创建过程,也不关心该对象依赖对象的创建以及依赖关系的组装,也就是把创建对象的控制权反转交给了Spring框架</strong></p></li></ul><p><img src="/posts/8e37/3.png"></p><ul><li><strong>Dao层不需要改变</strong></li><li><strong>Service</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public interface UserService {    void getUser();}//针对UserService的实现类public class UserServiceImp implements UserService{    private UserDao userDao;    //利用set进行动态实现值的依赖注入    public void setUserDao(UserDao userDao) {        this.userDao = userDao;    }    @Override    public void getUser() {        userDao.getUser();    }}</code></pre><ul><li><strong>测试类</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class SpringTest1 {    @Test    public void Demo1(){        UserServiceImp userServiceImp = new UserServiceImp();        //此时只需通过set方法设置UerDao的实现类即可，不需更改UserServiceImp代码        userServiceImp.setUserDao(new UserDaoOracleImp());        userServiceImp.getUser();    }}</code></pre><ol><li>之前,程序是主动创建对象,控制权在程序员手上</li><li>使用set注入后,程序不再具有主动性,而是变成了被动的接受对象,使得控制权在用户手上</li></ol><h3 id="三、Spring初体验（Hello-Spring）"><a href="#三、Spring初体验（Hello-Spring）" class="headerlink" title="三、Spring初体验（Hello Spring）"></a>三、Spring初体验（Hello Spring）</h3><h4 id="3-1、导入Maven坐标"><a href="#3-1、导入Maven坐标" class="headerlink" title="3.1、导入Maven坐标"></a>3.1、导入Maven坐标</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 联合MyBatis依赖 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="3-2、创建实体类"><a href="#3-2、创建实体类" class="headerlink" title="3.2、创建实体类"></a>3.2、创建实体类</h4><pre class="language-java" data-language="java"><code class="language-java">public class HelloSpring {    private String str;    private int age;    public String getStr() {        return str;    }    public void setStr(String str) {        this.str = str;    }    public int getAge() {        return age;    }    public void setAge(int age) {        this.age = age;    }    @Override    public String toString() {        return "HelloSpring{" +                "str='" + str + '\'' +                ", age=" + age +                '}';    }}</code></pre><h4 id="3-3、创建配置文件"><a href="#3-3、创建配置文件" class="headerlink" title="3.3、创建配置文件"></a>3.3、创建配置文件</h4><ul><li><strong>在resources中创建配置文件,命名为: <code>applicationContext.xml</code>或<code>beans.xml</code>都行</strong></li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--  该id属性是标识单个 bean 定义的字符串。该class属性定义 bean 的类型并使用完全限定的类名。        property:代表类中的属性  value：代表该属性的值  ref：引用Spring容器中创建好的Bean--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.HelloSpring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡全安<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="3-4、创建测试类"><a href="#3-4、创建测试类" class="headerlink" title="3.4、创建测试类"></a>3.4、创建测试类</h4><pre class="language-java" data-language="java"><code class="language-java">public class Demo1 {    public static void main(String[] args) {        //获取ApplicationContext对象，参数为配置文件的路径        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");        //根据配置文件中bean的id获取对象        HelloSpring helloSpring = (HelloSpring)context.getBean("HelloSpring");        System.out.println(helloSpring);    }}</code></pre><ul><li><p><strong>思考问题</strong></p><ul><li><p>HelloSpring对象是谁创建的？</p><p>HelloSpring对象是由Spring创建的</p></li><li><p>HelloSpring对象的属性是怎么设置的？</p><p>HelloSpring对象的属性是由Spring容器设置的</p></li></ul><p>这个过程就叫控制反转：</p><p>控制：谁来控制对象的创建，使用应用程序的对象是由程序本身控制创建的，使用Spring后，对象由Spring来创建的</p><p>反转：程序本身不创建对象，而变成被动接收对象</p><p>依赖注入DI：就是使用set方法来进行注入的</p><p>IOC是一种编程思想，由主动编程变为被动的接收，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC就是对象由Spring来创建、管理、装配</p></li></ul><h3 id="四、IOC创建对象的方式"><a href="#四、IOC创建对象的方式" class="headerlink" title="四、IOC创建对象的方式"></a>四、IOC创建对象的方式</h3><h4 id="4-1、默认方式"><a href="#4-1、默认方式" class="headerlink" title="4.1、默认方式"></a>4.1、默认方式</h4><p><strong>默认使用无参构造的方式创建对象</strong></p><h4 id="4-2、有参创建"><a href="#4-2、有参创建" class="headerlink" title="4.2、有参创建"></a>4.2、有参创建</h4><p><strong>使用有参构造的方式创建对象有三种方法</strong></p><ol><li><p>下标赋值</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  使用下标赋值的方式进行有参创建  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.HelloSpring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡全安<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>通过类型创建</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  使用类型创建的方式进行有参创建,不建议使用  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.HelloSpring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡全安<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>通过参数名创建</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  通过参数名进行有参创建  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.HelloSpring<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡全安<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li></ol><p><strong>总结：</strong>在配置文件加载的时候，容器中管理的对象就已经初始化了</p><h3 id="五、Spring配置"><a href="#五、Spring配置" class="headerlink" title="五、Spring配置"></a>五、Spring配置</h3><h4 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  给创建的bean配置别名，添加别名后，我们也可以通过别名获取这个对象  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newHelloSpring<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><h4 id="5-2、bean的配置"><a href="#5-2、bean的配置" class="headerlink" title="5.2、bean的配置"></a>5.2、bean的配置</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  该id属性是标识单个 bean 定义的字符串。该class属性定义 bean 的类型并使用完全限定的类名。该name定义bean的别名        property:代表类中的属性  value：代表该属性的值  ref：引用Spring容器中创建好的Bean--&gt;</span><span class="token comment">&lt;!--  通过参数名进行有参创建  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pojo.HelloSpring<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newHS<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡全安<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>23<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="5-3、import"><a href="#5-3、import" class="headerlink" title="5.3、import"></a>5.3、import</h4><p>这个import，一般用于团队开发，可以将多个配置文件导入合并为一个，使用时直接使用总的配置文件applicationContext.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beans1.xm2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><h3 id="六、依赖注入"><a href="#六、依赖注入" class="headerlink" title="六、依赖注入"></a>六、依赖注入</h3><h4 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h4><p>见前几节，即实例化类的过程</p><h4 id="6-2、set方式注入"><a href="#6-2、set方式注入" class="headerlink" title="6.2、set方式注入"></a>6.2、set方式注入</h4><ul><li><p>依赖注入：set注入</p><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中的所有属性，由容器来注入</li></ul></li><li><p><strong>案例测试</strong></p><ol><li><p>环境搭建</p><ul><li><p>测试对象</p><pre class="language-java" data-language="java"><code class="language-java">//学生类public class Student {    private String name;    private Address address;    private String[] books;    private List&lt;String&gt; hobbys;    private Map&lt;String,String&gt; card;    private Set&lt;String&gt; games;    private String wife;    private Properties info;}</code></pre></li><li><p>复杂对象</p><pre class="language-java" data-language="java"><code class="language-java">public class Address {    private String address;}</code></pre></li><li><p>配置文件applicationContext.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>测试类</p><pre class="language-java" data-language="java"><code class="language-java">public class Demo {    public static void main(String[] args) {        ApplicationContext Context = new ClassPathXmlApplicationContext("applicationContext.xml");        Object bean = Context.getBean("");    }}</code></pre></li></ul></li><li><p>各种类型的注入方式</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  通过参数名进行有参创建  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>湖北省京山市<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    基本类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    已创Bean类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Address<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    数组类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    list集合类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbys<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>蓝球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    map类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456789456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>456564866365<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    set类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>王者荣耀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>吃鸡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    null类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>null</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    properites类型的注入    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>测试输出</p><pre class="language-none"><code class="language-none">Student{name='张三', address=Address{address='湖北省京山市'}, books=[红楼梦, 三国演义], hobbys=[游泳, 蓝球], card={身份证=123456789456, 银行卡=456564866365}, games=[王者荣耀, 吃鸡], wife='null', info={password=123456, username=root}}</code></pre></li></ol></li></ul><h4 id="6-3、其他方式"><a href="#6-3、其他方式" class="headerlink" title="6.3、其他方式"></a>6.3、其他方式</h4><ul><li>C命名和P命名空间注入：查看官网</li></ul><p><img src="/posts/8e37/4.png"></p><h4 id="6-4、Bean的作用域"><a href="#6-4、Bean的作用域" class="headerlink" title="6.4、Bean的作用域"></a>6.4、Bean的作用域</h4><p>![](D:\java\daima\笔记\png\屏幕截图 2022-02-09 214618.png)</p><ol><li><p>单例模式（Spring默认机制），加上scope</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre></li><li><p>原型模式：每次容器中get的时候，都会产生一个新对象</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.something.DefaultAccountService<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre></li><li><p>其余作用域都是在web中使用</p></li></ol><h3 id="七、Bean的自动装配"><a href="#七、Bean的自动装配" class="headerlink" title="七、Bean的自动装配"></a>七、Bean的自动装配</h3><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文自动寻找，并自动给bean装配属性</li></ul><p>在Spring的三种装配方式：</p><ul><li>在xml中显示的配置</li><li>在java中显示配置</li><li>隐式的自动装配bean（重要）</li></ul><h4 id="7-1、测试环境"><a href="#7-1、测试环境" class="headerlink" title="7.1、测试环境"></a>7.1、测试环境</h4><ul><li><p><strong>创建实体类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class People {    private String name;    private Cat cat;    private Dog dog;}public class Cat {    public void shut(){        System.out.println("miao~");    }}public class Dog {    public void shut(){        System.out.println("wang~");    }}</code></pre></li><li><p><strong>编写配置文件applicationContext.xml</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zidongzhuangpei.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zidongzhuangpei.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zidongzhuangpei.pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小明<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>创建测试类</strong></p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic void Demo1(){    ApplicationContext Context = new ClassPathXmlApplicationContext("applicationContext.xml");    People people = Context.getBean("people", People.class);    people.getCat().shut();}</code></pre></li><li><p><strong>测试输出结果</strong></p><pre class="language-none"><code class="language-none">miao~</code></pre></li></ul><h4 id="7-2、ByName自动装配"><a href="#7-2、ByName自动装配" class="headerlink" title="7.2、ByName自动装配"></a>7.2、ByName自动装配</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  byName会自动在容器上下文进行寻找，和自己对象set方法后面对应的beanid  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zidongzhuangpei.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小明<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="7-3、ByType自动装配"><a href="#7-3、ByType自动装配" class="headerlink" title="7.3、ByType自动装配"></a>7.3、ByType自动装配</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  byName会自动在容器上下文进行寻找，和自己对象set方法后面对应的beanid      byType会自动在容器上下文进行寻找，和自己对象属性类型相同的bean--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.zidongzhuangpei.pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>小明<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><strong>小结</strong><ol><li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</li></ol></li></ul><h4 id="7-4、使用注解自动装配"><a href="#7-4、使用注解自动装配" class="headerlink" title="7.4、使用注解自动装配"></a>7.4、使用注解自动装配</h4><p>jdk1.5支持的注解，Spring2.5支持注解</p><p><strong>要使用注解须知：</strong></p><ol><li><p>导入约束</p></li><li><p>配置注解的支持，更改配置文件</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--  开启注解支持  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre></li></ol><ul><li><p><strong>@Autowired</strong></p><p>直接在属性上使用即可，也可以在set方法上使用</p><p>使用@Autowired注解方法后，可以不再用编辑set方法，前提是你这个自动装配的属性在IOC容器中存在，且符合名字byName</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">public class People {    private String name;    @Autowired    private Cat cat;    @Autowired    private Dog dog;}</code></pre><ul><li><p><strong>@Qualifier</strong></p><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解完成时，可以使用@Qualifier(value = “XXXX”)的方法配合@Autowired适应，指定一个唯一的bean对象注入</p></li></ul><pre class="language-java" data-language="java"><code class="language-java">@Autowired@Qualifier(value = "dog1")private Dog dog;</code></pre><h3 id="八、使用注解开发"><a href="#八、使用注解开发" class="headerlink" title="八、使用注解开发"></a>八、使用注解开发</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。 </p><p>Spring原始注解主要是替代<bean>的配置</bean></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>使用在类上用于实例化Bean</td></tr><tr><td>@Controller</td><td>使用在web层类上用于实例化Bean</td></tr><tr><td>@Service</td><td>使用在service层类上用于实例化Bean</td></tr><tr><td>@Repository</td><td>使用在dao层类上用于实例化Bean</td></tr><tr><td>@Autowired</td><td>使用在字段上用于根据类型依赖注入</td></tr><tr><td>@Qualifier</td><td>结合@Autowired一起使用用于根据名称进行依赖注入</td></tr><tr><td>@Resource</td><td>相当于@Autowired+@Qualifier，按照名称进行注入</td></tr><tr><td>@Value</td><td>注入普通属性</td></tr><tr><td>@Scope</td><td>标注Bean的作用范围</td></tr><tr><td>@PostConstruct</td><td>使用在方法上标注该方法是Bean的初始化方法</td></tr><tr><td>@PreDestroy</td><td>使用在方法上标注该方法是Bean的销毁方法</td></tr></tbody></table><p><strong>注意：</strong></p><p>使用注解进行开发时，需要在配置文件applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注解的组件扫描--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.itheima<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="8-1、-Compont"><a href="#8-1、-Compont" class="headerlink" title="8.1、@Compont"></a>8.1、@Compont</h4><ul><li><strong>使用在类上用于实例化Bean</strong></li></ul><p>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。</p><pre class="language-java" data-language="java"><code class="language-java">//@Component("userDao")@Repository("userDao")public class UserDaoImpl implements UserDao {    @Override    public void save() {    System.out.println("save running... ...");    }}</code></pre><p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</p><p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p><pre class="language-java" data-language="java"><code class="language-java">//@Component("userService")@Service("userService")public class UserServiceImpl implements UserService {    /*@Autowired    @Qualifier("userDao")*/    @Resource(name="userDao")    private UserDao userDao;    @Override    public void save() {            userDao.save();    }}</code></pre><h4 id="8-2、-Value"><a href="#8-2、-Value" class="headerlink" title="8.2、@Value"></a>8.2、@Value</h4><ul><li><strong>使用@Value进行字符串的注入</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@Repository("userDao")public class UserDaoImpl implements UserDao {    @Value("注入普通数据")    private String str;    @Value("${jdbc.driver}")    private String driver;    @Override    public void save() {        System.out.println(str);        System.out.println(driver);        System.out.println("save running... ...");    }}</code></pre><h4 id="8-3、-Scope"><a href="#8-3、-Scope" class="headerlink" title="8.3、@Scope"></a>8.3、@Scope</h4><ul><li><strong>使用@Scope标注Bean的范围</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">//@Scope("prototype")@Scope("singleton")public class UserDaoImpl implements UserDao {   //此处省略代码}</code></pre><h4 id="8-4、-PostConstruct、-PreDestroy"><a href="#8-4、-PostConstruct、-PreDestroy" class="headerlink" title="8.4、@PostConstruct、@PreDestroy"></a>8.4、@PostConstruct、@PreDestroy</h4><ul><li><strong>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</strong></li></ul><pre class="language-java" data-language="java"><code class="language-java">@PostConstructpublic void init(){System.out.println("初始化方法....");}@PreDestroypublic void destroy(){System.out.println("销毁方法.....");}</code></pre><h3 id="九、Spring新注解"><a href="#九、Spring新注解" class="headerlink" title="九、Spring新注解"></a>九、Spring新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，可以使用纯java的方式进行配置，无需配置文件，还需要使用注解替代的配置如下：</p><p>非自定义的Bean的配置：<bean></bean></p><p>加载properties文件的配置：<a href="context:property-placeholder">context:property-placeholder</a></p><p>组件扫描的配置：<a href="context:component-scan">context:component-scan</a></p><p>引入其他文件：<import></import></p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Configuration</td><td>用于指定当前类是一个 Spring   配置类，当创建容器时会从该类上加载注解</td></tr><tr><td>@ComponentScan</td><td>用于指定 Spring   在初始化容器时要扫描的包。   作用和在 Spring   的 xml 配置文件中的   &lt;context:component-scan   base-package=”com.itheima”/&gt;一样</td></tr><tr><td>@Bean</td><td>使用在方法上，标注将该方法的返回值存储到   Spring   容器中</td></tr><tr><td>@PropertySource</td><td>用于加载.properties   文件中的配置</td></tr><tr><td>@Import</td><td>用于导入其他配置类</td></tr></tbody></table><h4 id="9-1、测试环境"><a href="#9-1、测试环境" class="headerlink" title="9.1、测试环境"></a>9.1、测试环境</h4><ul><li><p><strong>创建用户类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class User {    private String name;    public User() {    }    public User(String name) {        this.name = name;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "User{" +                "name='" + name + '\'' +                '}';    }}</code></pre></li><li><p><strong>创建配置类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class UserConfig {}</code></pre></li><li><p><strong>创建测试类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest {    public static void main(String[] args) {        //获取AnnotationConfigApplicationContext对象，参数为配置文件的反射        AnnotationConfigApplicationContext Context = new AnnotationConfigApplicationContext(UserConfig.class);            }}</code></pre></li></ul><h4 id="9-2、测试"><a href="#9-2、测试" class="headerlink" title="9.2、测试"></a>9.2、测试</h4><ul><li><p><strong>用户类注解</strong></p><pre class="language-java" data-language="java"><code class="language-java">//@Component:说明这个类被Spring接管@Componentpublic class User {    @Value("张三")        //字段赋值    private String name;    public User() {    }    public User(String name) {        this.name = name;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    @Override    public String toString() {        return "User{" +                "name='" + name + '\'' +                '}';    }}</code></pre></li><li><p><strong>配置类注解</strong></p><pre class="language-java" data-language="java"><code class="language-java">/** * @Configuration:代表这是一个配置类，类似于配置文件applicationContext.xml * @ComponentScan:类似于配置文件中&lt;context:component-scan base-package="com.itheima"/&gt;， *     用于指定Spring初始化容器时要扫描的包 **/@Configuration@ComponentScan("com.pojo")public class UserConfig {    /**@Bean     * 注册一个bean     * 返回值类似于配置文件中的class属性，方法名类似于配置文件中的id     * &lt;bean id="" class=""/&gt;     */    @Bean    public User getuser(){        return new User();    }}</code></pre></li><li><p><strong>测试</strong></p><p>和使用xml配置文件时有所不同</p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest {    public static void main(String[] args) {        //获取AnnotationConfigApplicationContext对象，参数为配置文件的反射        AnnotationConfigApplicationContext Context = new AnnotationConfigApplicationContext(UserConfig.class);        User user = (User) Context.getBean("getuser");        System.out.println(user.getName());    }}</code></pre></li></ul><h3 id="十、代理模式"><a href="#十、代理模式" class="headerlink" title="十、代理模式"></a>十、代理模式</h3><p>为什么要学习代理模式？因为这就是Spring Aop的底层！【SpringAOP和SpringMVC】</p><p>代理模式的分类：</p><ul><li>静态代理</li><li>动态代理</li></ul><p><img src="/posts/8e37/5.png"></p><h4 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h4><p><strong>角色分析</strong>：</p><ul><li>抽象角色：一般会使用接口或抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会进行一些附属操作</li><li>客户：访问代理对象的人</li></ul><p><strong>简易案例</strong></p><ol><li><p>接口</p><pre class="language-java" data-language="java"><code class="language-java">//租房public interface Rent {    public void rent();}</code></pre></li><li><p>真实角色</p><pre class="language-java" data-language="java"><code class="language-java">//房东：有房子出租public class Host implements Rent{    @Override    public void rent() {        System.out.println("我是房东，我有房子出租");    }}</code></pre></li><li><p>代理角色</p><pre class="language-java" data-language="java"><code class="language-java">//代理角色：房屋中介public class Proxy {    private Host host;    public Proxy() {    }    public Proxy(Host host) {        this.host = host;    }    //房屋中介和房东之间联系    public void rent(){        host.rent();        seehouse();        hetong();    }    //中介还有其他附属业务    //看房    public void seehouse(){        System.out.println("带租客看房");    }    //签租赁合同    public void hetong(){        System.out.println("签租赁合同");    }}</code></pre></li><li><p>客户访问</p><pre class="language-java" data-language="java"><code class="language-java">//访问对象：客户需要租房public class Client {    public static void main(String[] args) {        //房东有房子出租        Host host = new Host();        //中介代理房东出租房子        Proxy proxy = new Proxy(host);        //不用面对房东，自己直接租房子        proxy.rent();    }}</code></pre></li></ol><p><strong>代理模式的好处</strong>：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实的角色就会产生一个代理角色，代码量会翻倍，开发效率变低</li></ul><h4 id="10-2、动态代理"><a href="#10-2、动态代理" class="headerlink" title="10.2、动态代理"></a>10.2、动态代理</h4><ul><li>动态代理和静态代理的角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口——JDK动态代理（此处使用）</li><li>基于类：cglib</li><li>java字节码实现：javasist</li></ul></li></ul><p>需要了解两个类：Proxy：代理 InvocatioHandler：调用处理程序</p><p><strong>动态代理案例</strong></p><ol><li><p>接口</p><pre class="language-java" data-language="java"><code class="language-java">//租房public interface Rent {    public void rent();}</code></pre></li><li><p>真实角色</p><pre class="language-java" data-language="java"><code class="language-java">//房东：有房子出租public class Host implements Rent {    @Override    public void rent() {        System.out.println("我是房东，我有房子出租");    }}</code></pre></li><li><p>动态代理工具类</p><pre class="language-java" data-language="java"><code class="language-java">public class ProxyInvocationHandler implements InvocationHandler {    //被代理的接口    private Object target;    public void setTarget(Object target) {        this.target = target;    }    //生成得到代理类    public Object getProxy(){        return Proxy.newProxyInstance(this.getClass().getClassLoader(),                target.getClass().getInterfaces(),this);    }    //处理代理实例，并返回结果    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        Object result = method.invoke(target, args);        return result;    }}</code></pre></li><li><p>客户访问</p><pre class="language-java" data-language="java"><code class="language-java">//访问对象：客户需要租房public class Client {    public static void main(String[] args) {        //要被代理的真实角色        Host host = new Host();        //代理角色不存在，初始化动态代理类        ProxyInvocationHandler proxyInvocationHandler = new ProxyInvocationHandler();        //设置要代理的角色        proxyInvocationHandler.setTarget(host);        //动态生成角色的代理类        Rent proxy = (Rent) proxyInvocationHandler.getProxy();        //实现        proxy.rent();    }}</code></pre></li></ol><h3 id="十一、AOP"><a href="#十一、AOP" class="headerlink" title="十一、AOP"></a>十一、AOP</h3><h4 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h4><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p><p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h4 id="11-2-、AOP-的作用及其优势"><a href="#11-2-、AOP-的作用及其优势" class="headerlink" title="11.2 、AOP 的作用及其优势"></a>11.2 、AOP 的作用及其优势</h4><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p><p>优势：减少重复代码，提高开发效率，并且便于维护</p><h4 id="11-3、-AOP-的底层实现"><a href="#11-3、-AOP-的底层实现" class="headerlink" title="11.3、 AOP 的底层实现"></a>11.3、 AOP 的底层实现</h4><p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p><h4 id="11-4、-AOP-相关概念"><a href="#11-4、-AOP-相关概念" class="headerlink" title="11.4、 AOP 相关概念"></a>11.4、 AOP 相关概念</h4><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p><p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p><ul><li><p>Target（目标对象）：代理的目标对象</p></li><li><p>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</p></li><li><p>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</p></li><li><p>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</p></li><li><p>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</p></li><li><p>Aspect（切面）：是切入点和通知（引介）的结合</p></li><li><p>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</p></li></ul><h4 id="11-5、AOP-开发明确的事项"><a href="#11-5、AOP-开发明确的事项" class="headerlink" title="11.5、AOP 开发明确的事项"></a>11.5、AOP 开发明确的事项</h4><ul><li><p><strong>需要编写的内容</strong></p><ul><li><p>编写核心业务代码（目标类的目标方法）</p></li><li><p>编写切面类，切面类中有通知(增强功能方法)</p></li><li><p>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</p></li></ul></li><li><p><strong>AOP 技术实现的内容</strong></p><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p></li><li><p><strong>AOP 底层使用哪种代理方式</strong></p><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p></li></ul><h4 id="11-6-、知识要点"><a href="#11-6-、知识要点" class="headerlink" title="11.6 、知识要点"></a>11.6 、知识要点</h4><ul><li><p>aop：面向切面编程</p></li><li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理</p></li><li><p>aop的重点概念：</p><blockquote><p><strong>Pointcut（切入点）：被增强的方法</strong><br><strong>Advice（通知/ 增强）：封装增强业务逻辑的方法</strong><br><strong>Aspect（切面）：切点+通知</strong><br><strong>Weaving（织入）：将切点与通知结合的过程</strong></p></blockquote></li><li><p>开发明确事项：</p><blockquote><p><strong>谁是切点（切点表达式配置）</strong><br><strong>谁是通知（切面类中的增强方法）</strong><br><strong>将切点和通知进行织入配置</strong></p></blockquote></li></ul><h4 id="11-7、基于-XML-的-AOP-开发"><a href="#11-7、基于-XML-的-AOP-开发" class="headerlink" title="11.7、基于 XML 的 AOP 开发"></a>11.7、基于 XML 的 AOP 开发</h4><ul><li><p><strong>快速入门</strong></p><ul><li>导入 AOP 相关坐标</li><li>创建目标接口和目标类（内部有切点）</li><li>创建切面类（内部有增强方法）</li><li>创建配置文件 applicationContext.xml </li><li>将目标类和切面类的对象创建权交给 spring</li><li>在 applicationContext.xml 中配置织入关系</li><li>测试代码</li></ul></li><li><p><strong>导入AOP相关坐标</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- spring依赖 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- aspectj的织入 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>创建目标接口和目标类</strong></p><pre class="language-java" data-language="java"><code class="language-java">//接口：增删改查public interface UserService {    public void add();    public void delete();    public void update();    public void select();}</code></pre><pre class="language-java" data-language="java"><code class="language-java">//目标实现类public class UerServiceImpl implements UserService{    @Override    public void add() {        System.out.println("实现了add方法");    }    @Override    public void delete() {        System.out.println("实现了delete方法");    }    @Override    public void update() {        System.out.println("实现了update方法");    }    @Override    public void select() {        System.out.println("实现了select方法");    }}</code></pre></li><li><p><strong>创建切面类</strong></p><ul><li>使用Spring的API接口</li></ul><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">public class BeforeLog implements MethodBeforeAdvice {    /**     * @param method 要执行的目标对象的方法     * @param args 参数     * @param target 执行的目标对象     * @throws Throwable     */    @Override    public void before(Method method, Object[] args, Object target) throws Throwable {        System.out.println(target.getClass()+"的"+method.getName()+"方法被执行了");    }}</code></pre><pre class="language-JAVA" data-language="JAVA"><code class="language-JAVA">public class AfterLog implements AfterReturningAdvice {    /**     * @param returnValue 执行的目标对象返回的值     * @param method  执行的目标对象的方法     * @param args 参数     * @param target 执行的目标对象     * @throws Throwable     */    @Override    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {        System.out.println("执行了目标"+target.getClass()+"的"+method.getName()+"方法，返回值为："+returnValue);    }}</code></pre><ul><li>使用自定义类</li></ul><pre class="language-java" data-language="java"><code class="language-java">public class diy {    public void before(){        System.out.println("方法执行前");    }    public void after(){        System.out.println("方法执行后");    }}</code></pre></li><li><p>**创建配置文件 applicationContext.xml **</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--创建配置文件 applicationContext.xml 并导入命名空间--&gt;</span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--注解的组件扫描--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>将目标类和切面类的对象创建权交给 spring</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  将目标类和切面类的对象创建权交给 spring  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP.Service.UerServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP.Log.AfterLog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP.Log.BeforeLog<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP.DIY.diy<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre></li><li><p><strong>在 applicationContext.xml 中配置织入关系</strong></p><ul><li>使用Spring的API接口</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  配置aop：需要导入aop的约束  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   切入点：     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.AOP.Service.UerServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--    执行环绕增加    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>afterLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beforeLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li>使用自定义类</li></ul><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  自定义切入面：ref是要引用的类  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>diy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--     引入切入点       --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.AOP.Service.UerServiceImpl.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--     切入点在方法执行前       --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--     切入点在方法执行后       --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>point<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>测试代码</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest {    public static void main(String[] args) {        ApplicationContext Context = new ClassPathXmlApplicationContext("applicationContext.xml");        UserService userService = Context.getBean("userService", UserService.class);        userService.add();    }}</code></pre></li><li><p><strong>输出结果</strong></p><pre class="language-none"><code class="language-none">class com.AOP.Service.UerServiceImpl的add方法被执行了实现了add方法执行了目标class com.AOP.Service.UerServiceImpl的add方法，返回值为：null</code></pre></li></ul><h4 id="11-8、xml配置AOP详解"><a href="#11-8、xml配置AOP详解" class="headerlink" title="11.8、xml配置AOP详解"></a>11.8、xml配置AOP详解</h4><p><strong>1) 切点表达式的写法</strong></p><p>表达式语法：</p><pre class="language-java" data-language="java"><code class="language-java">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</code></pre><ul><li><p>访问修饰符可以省略</p></li><li><p>返回值类型、包名、类名、方法名可以使用星号*  代表任意</p></li><li><p>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</p></li><li><p>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</p></li></ul><p>例如：</p><pre class="language-xml" data-language="xml"><code class="language-xml">execution(public void com.itheima.aop.Target.method())execution(void com.itheima.aop.Target.*(..))execution(* com.itheima.aop.*.*(..))execution(* com.itheima.aop..*.*(..))execution(* *..*.*(..))</code></pre><p><strong>2) 通知的类型</strong></p><p>通知的配置语法：</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;aop:通知类型 method=“切面类中方法名” pointcut=“切点表达式"&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>通知类型</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="11-9、基于注解实现AOP"><a href="#11-9、基于注解实现AOP" class="headerlink" title="11.9、基于注解实现AOP"></a>11.9、基于注解实现AOP</h4><ul><li><p><strong>快速入门</strong></p><ul><li><p>基于注解的aop开发步骤：</p><p>①创建目标接口和目标类（内部有切点）</p><p>②创建切面类（内部有增强方法）</p><p>③将目标类和切面类的对象创建权交给 spring</p><p>④在切面类中使用注解配置织入关系</p><p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p><p>⑥测试</p></li></ul></li><li><p><strong>创建目标类和目标接口</strong></p><pre class="language-java" data-language="java"><code class="language-java">public interface zhujieaop {    public void add();    public void delete();    public void update();    public void select();}</code></pre><pre class="language-java" data-language="java"><code class="language-java">public class zhujieaopImpl implements zhujieaop{    @Override    public void add() {    }    @Override    public void delete() {    }    @Override    public void update() {    }    @Override    public void select() {    }}</code></pre></li><li><p><strong>创建切面类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class AnnotationAop {    }</code></pre></li><li><p><strong>将目标类和切面类的对象创建权交给 spring</strong></p><p>在目标类、目标切面以及切面类上加上注解@Component</p><pre class="language-java" data-language="java"><code class="language-java">@Component("zhujieaopimpl")public class zhujieaopImpl implements zhujieaop{}@Component("zhujieaop")public interface zhujieaop {}@Component("AnnotationAop")public class AnnotationAop {}</code></pre></li><li><p><strong>在切面类中使用注解配置织入关系</strong></p><pre class="language-java" data-language="java"><code class="language-java">@Component("AnnotationAop")@Aspect     //将该类注册为一个切面类public class AnnotationAop {    @Before("execution(* com.AOP.zhujie.zhujieaopImpl.*(..))")    public void before(){        System.out.println("注解式aop执行前");    }    @After("execution(* com.AOP.zhujie.zhujieaopImpl.*(..))")    public void after(){        System.out.println("注解式aop执行后");    }}</code></pre></li><li><p><strong>在配置文件中开启组件扫描和 AOP 的自动代理</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注解的组件扫描--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.AOP<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--aop的自动代理--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>测试</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest {    public static void main(String[] args) {        ApplicationContext Context = new ClassPathXmlApplicationContext("applicationContext.xml");        zhujieaop zhujieaop = Context.getBean("zhujieaopimpl", zhujieaop.class);        zhujieaop.add();    }}</code></pre></li></ul><h3 id="十二、整合MyBatis"><a href="#十二、整合MyBatis" class="headerlink" title="十二、整合MyBatis"></a>十二、整合MyBatis</h3><h4 id="12-1、导入相关jar包"><a href="#12-1、导入相关jar包" class="headerlink" title="12.1、导入相关jar包"></a>12.1、导入相关jar包</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- spring依赖 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- aspectj的织入 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 联合MyBatis依赖:jdbc\mybatis\mysql--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--   mybatis和spring的联合包     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="12-2、初步整合MyBatis"><a href="#12-2、初步整合MyBatis" class="headerlink" title="12.2、初步整合MyBatis"></a>12.2、初步整合MyBatis</h4><p><strong>测试</strong></p><ul><li><p><strong>整合MyBatis步骤</strong></p><ul><li>导入jar包</li><li>创建相关数据库表</li><li>创建实体类</li><li>创建MyBatis的配置文件mybatis-config.xml</li><li>创建接口</li><li>创建接口的映射文件</li><li>创建Spring的配置文件applicationContext.xml</li><li>在Spring的配置文件中配置数据库信息<ul><li>在Spring的配置文件中配置SqlSessionFactory、SqlSession</li></ul></li><li>创建接口的实现类</li><li>配置实现类的bean，并注入sqlsession</li><li>创建测试类</li></ul></li><li><p><strong>创建相关数据库表</strong></p><pre class="language-none"><code class="language-none">create TABLE brand(id int PRIMARY key auto_increment,brand_name varchar(20) UNIQUE,company_name VARCHAR(32),ordered int,description VARCHAR(32),status INT);INSERT INTO brand(brand_name,company_name,ordered,description,status) VALUES("三只松鼠","三只松鼠有限公司",100,"三只松鼠，好吃不上火",1),("华为","华为技术有限公司",200,"万物互联，鸿蒙系统",0),("小米","小米科技有限公司",300,"为发烧而生",1);</code></pre></li><li><p><strong>创建实体类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class Brand {    private int id;    private String brandName;    private String companyName;    private int ordered;    private String description;    private int status;}</code></pre></li><li><p><strong>创建MyBatis的配置文件mybatis-config.xml</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--configuration核心配置文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>创建类接口</strong></p><pre class="language-java" data-language="java"><code class="language-java">public interface BrandMapper {    public List&lt;Brand&gt; selectAll();}</code></pre></li><li><p><strong>创建接口的映射文件</strong></p><pre class="language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--namespace:名称空间,填写Mapper接口的路径--&gt;&lt;mapper namespace="com.Mapper.BrandMapper"&gt;    &lt;!--数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据    需要使用resultMap:id代表该resultMap的别名，type代表返回的实体类--&gt;    &lt;resultMap id="BrandresultMap" type="com.pojo.Brand"&gt;        &lt;!--column代表数据表中的一般字段名，还有一个id代表数据表中的主键字段名；property代表对应实体类中属性名称 --&gt;        &lt;result column="brand_name" property="brandName"&gt;&lt;/result&gt;        &lt;result column="company_name" property="companyName"&gt;&lt;/result&gt;    &lt;/resultMap&gt;    &lt;select id="selectAll" resultMap="BrandresultMap"&gt;        select * from brand;    &lt;/select&gt;&lt;/mapper&gt;</code></pre></li><li><p><strong>创建Spring的配置文件applicationContext.xml</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre><ul><li><p><strong>在Spring的配置文件中配置数据库信息</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--DataSource:使用spring的数据源替换MyBatis的配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>在Spring的配置文件中配置SqlSessionFactory、SqlSession</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--SqlSessionFactory--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--   绑定MyBatis的配置文件     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--   注册MyBAtis配置文件中的映射文件     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/Mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--  SqlSession  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  只能使用构造器注入SqlSessionTemplate，因为它没有set方法      --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li></ul></li><li><p><strong>创建接口的实现类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class BrandMapperImpl implements BrandMapper{    private SqlSessionTemplate sqlSession;    public void setSqlSession(SqlSessionTemplate sqlSession) {        this.sqlSession = sqlSession;    }    @Override    public List&lt;Brand&gt; selectAll() {        return sqlSession.getMapper(BrandMapper.class).selectAll();    }}</code></pre></li><li><p><strong>配置实现类的bean，并注入sqlsession</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  注册接口实现类的bean，并注入其属性sqlSession --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Mapper.BrandMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>创建测试类</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class MyTest {    public static void main(String[] args) {        ApplicationContext Context = new ClassPathXmlApplicationContext("applicationContext.xml");        BrandMapper mapper = Context.getBean("BrandMapper", BrandMapper.class);        List&lt;Brand&gt; brandList = mapper.selectAll();                for (Brand brand : brandList) {            System.out.println(brand);        }    }}</code></pre></li></ul><h4 id="12-3、整合方式二"><a href="#12-3、整合方式二" class="headerlink" title="12.3、整合方式二"></a>12.3、整合方式二</h4><p>让Dao继承Support类 , 直接利用 <code>getSqlSession()</code>获得 , 然后直接注入<code>SqlSessionFactory</code> . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好</p><ul><li><p><strong>将上方实现类进行修改</strong></p><pre class="language-java" data-language="java"><code class="language-java">public class BrandMapperImpl extends SqlSessionDaoSupport implements BrandMapper{    @Override    public List&lt;Brand&gt; selectAll() {        return getSqlSession().getMapper(BrandMapper.class).selectAll();    }}</code></pre></li><li><p><strong>修改bean的配置</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Mapper.BrandMapperImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li></ul><h4 id="12-3、整合方式三"><a href="#12-3、整合方式三" class="headerlink" title="12.3、整合方式三"></a>12.3、整合方式三</h4><p>前两种的整合实现方式,都创建了Dao接口的实现类,通过实现类来获取mapper对象;<br>使用整合方式三,我们告诉Spring,让他来帮我们创建mapper的代理对象即可!,此时无需接口的实现类</p><ul><li><p><strong>配置MapperFactoryBean,Spring帮我们创建 Mapper的代理对象</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置MapperFactoryBean,Spring帮我们创建 Mapper的代理对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--给哪个接口创建代理对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperInterface<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p><strong>此时的applicationContext.xml文件; 其他和方式一相同</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--DataSource:使用spring的数据源替换MyBatis的配置--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--SqlSessionFactory--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--   绑定MyBatis的配置文件     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--   注册MyBAtis配置文件中的映射文件     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/Mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置MapperFactoryBean,Spring帮我们创建 Mapper的代理对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!--给哪个接口创建代理对象--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperInterface<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.Mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span></code></pre></li></ul><h3 id="十三、声明式事务"><a href="#十三、声明式事务" class="headerlink" title="十三、声明式事务"></a>十三、声明式事务</h3><h4 id="13-1、回顾事务"><a href="#13-1、回顾事务" class="headerlink" title="13.1、回顾事务"></a>13.1、回顾事务</h4><ul><li>把一组业务当成一个业务来做，要么都成功，要么都失败</li><li>事务在项目开发中十分的重要，涉及到数据的一致性问题，不能马虎</li><li>确保完整性和一致性</li></ul><p><strong>事务的ACID原则</strong></p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会改变，被持久化的写到存储器中</li></ul></li></ul><h4 id="13-2、声明式事务控制的实现"><a href="#13-2、声明式事务控制的实现" class="headerlink" title="13.2、声明式事务控制的实现"></a>13.2、声明式事务控制的实现</h4><p>声明式事务控制明确事项：</p><ul><li><p>谁是切点？</p></li><li><p>谁是通知？</p></li><li><p>配置切面？</p></li></ul><p>①引入tx命名空间</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span></code></pre><p>②配置事务增强</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--平台事务管理器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--事务增强配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span></code></pre><p>③配置事务 AOP 织入</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--事务的aop增强--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.itheima.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myPointcut<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>advisor</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span></code></pre><p>④测试事务控制转账业务代码</p><pre class="language-java" data-language="java"><code class="language-java">@Overridepublic void transfer(String outMan, String inMan, double money) {    accountDao.out(outMan,money);    int i = 1/0;    accountDao.in(inMan,money);}</code></pre><h4 id="13-3、切点方法的事务参数的配置"><a href="#13-3、切点方法的事务参数的配置" class="headerlink" title="13.3、切点方法的事务参数的配置"></a>13.3、切点方法的事务参数的配置</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--事务增强配置--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span></code></pre><p>其中，<a href="tx:method">tx:method</a> 代表切点方法的事务参数的配置，例如：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transfer<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REPEATABLE_READ<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><ul><li><p>name：切点方法名称</p></li><li><p>isolation:事务的隔离级别</p></li><li><p>propogation：事务的传播行为</p></li><li><p>timeout：超时时间</p></li><li><p>read-only：是否只读</p></li></ul><h4 id="12-4、知识要点"><a href="#12-4、知识要点" class="headerlink" title="12.4、知识要点"></a>12.4、知识要点</h4><p><strong>声明式事务控制的配置要点</strong></p><ul><li><p>平台事务管理器配置</p></li><li><p>事务通知的配置</p></li><li><p>事务aop织入的配置</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门学习</title>
      <link href="/posts/9664.html"/>
      <url>/posts/9664.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h3><h4 id="1、原始jdbc存在的问题"><a href="#1、原始jdbc存在的问题" class="headerlink" title="1、原始jdbc存在的问题"></a>1、原始jdbc存在的问题</h4><p>原始jdbc开发存在的问题如下：</p><p>①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</p><p>②sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。</p><p>③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</p><p>应对上述问题给出的解决方案：</p><p>①使用数据库连接池初始化连接资源</p><p>②将sql语句抽取到xml配置文件中</p><p>③使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</p><h4 id="2、什么是MyBatis"><a href="#2、什么是MyBatis" class="headerlink" title="2、什么是MyBatis"></a>2、什么是MyBatis</h4><p>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p><p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p><h3 id="二、MyBatis快速入门"><a href="#二、MyBatis快速入门" class="headerlink" title="二、MyBatis快速入门"></a>二、MyBatis快速入门</h3><h4 id="1、-MyBatis开发步骤"><a href="#1、-MyBatis开发步骤" class="headerlink" title="1、 MyBatis开发步骤"></a>1、 MyBatis开发步骤</h4><p>MyBatis官网地址：<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a> </p><h5 id="1-1、MyBatis开发步骤："><a href="#1-1、MyBatis开发步骤：" class="headerlink" title="1.1、MyBatis开发步骤："></a>1.1、MyBatis开发步骤：</h5><p>①添加MyBatis的依赖坐标</p><p>②创建Brand数据表</p><p>③编写Brand实体类 </p><p>④编写核心配置文件MyBatis-Config.xml</p><p>⑤编写接口文件BrandMapper</p><p>⑥编写映射文件BrandMapper.xml</p><p>⑦编写获取SqlSession的工具类</p><p>⑧编写测试类</p><h5 id="1-2、添加MyBatis依赖坐标"><a href="#1-2、添加MyBatis依赖坐标" class="headerlink" title="1.2、添加MyBatis依赖坐标"></a>1.2、添加MyBatis依赖坐标</h5><p>在pom文件添加以下依赖</p><pre class="language-java" data-language="java"><code class="language-java">&lt;!--  三个依赖  --&gt;&lt;dependencies&gt;    &lt;!--   mybatis依赖     --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--    mysql数据库依赖    --&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.48&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--    用于测试的Junit依赖    --&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h5 id="1-3、创建Brand数据表"><a href="#1-3、创建Brand数据表" class="headerlink" title="1.3、创建Brand数据表"></a>1.3、创建Brand数据表</h5><p>创建brand数据表并添加对应数据</p><pre class="language-none"><code class="language-none">create TABLE brand(id int PRIMARY key auto_increment,brandname varchar(20) UNIQUE,companyname VARCHAR(32),ordered int,description VARCHAR(32),status INT);INSERT INTO brand(brandname,companyname,ordered,description,status) VALUES("三只松鼠","三只松鼠有限公司",100,"三只松鼠，好吃不上火",1),("华为","华为技术有限公司",200,"万物互联，鸿蒙系统",0),("小米","小米科技有限公司",300,"为发烧而生",1);</code></pre><h5 id="1-4、创建Brand实体类"><a href="#1-4、创建Brand实体类" class="headerlink" title="1.4、创建Brand实体类"></a>1.4、创建Brand实体类</h5><p>在src/main/java/com/muban/pojo路径下创建Brand实体类</p><pre class="language-java" data-language="java"><code class="language-java">public class Brand {    private Integer id;    private String brandName;    private String companyName;    private Integer ordered;    private String description;    private Integer status;//此处省略get、set以及构造方法，且数据表中的字段名与实体类中的属性名有所差别}</code></pre><h5 id="1-5、编写核心配置文件MyBatis-Config-xml"><a href="#1-5、编写核心配置文件MyBatis-Config-xml" class="headerlink" title="1.5、编写核心配置文件MyBatis-Config.xml"></a>1.5、编写核心配置文件MyBatis-Config.xml</h5><p>在src/main/resources/路径下添加mybatis-config.xml核心配置文件</p><pre class="language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--configuration核心配置文件--&gt;&lt;configuration&gt;    &lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;    &lt;environments default="development"&gt;        &lt;environment id="development"&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;!--数据库连接信息--&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!--驱动信息--&gt;                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;                &lt;!--     tb_brand代表连接的数据库           --&gt;                &lt;property name="url" value="jdbc:mysql://localhost:3306/tb_brand?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useServerPrepStmts=true"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="123456"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!-- 注意每个mapper.xml都要在此处注册 --&gt;    &lt;!--加载sql映射文件--&gt;    &lt;mappers&gt;        &lt;!--写入mapper文件的路径:有两种方法        1、通过mapper resource获取其路径，其设置的是mapper文件的单一路径        &lt;mapper resource="com/muban/Mapper/BrandMapper.xml"/&gt;        2、通过package name获取mapper文件的上一包名，直接扫描该包名下的所有mapper文件--&gt;        &lt;package name="com.muban.Mapper"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h5 id="1-6、创建BrandMapper接口文件"><a href="#1-6、创建BrandMapper接口文件" class="headerlink" title="1.6、创建BrandMapper接口文件"></a>1.6、创建BrandMapper接口文件</h5><p>在src/main/java/com/muban/Mapper路径下创建BrandMapper.java接口文件</p><pre class="language-java" data-language="java"><code class="language-java">public interface BrandMapper {}</code></pre><h5 id="1-7、创建BrandMapper-xml映射文件"><a href="#1-7、创建BrandMapper-xml映射文件" class="headerlink" title="1.7、创建BrandMapper.xml映射文件"></a>1.7、创建BrandMapper.xml映射文件</h5><p>1、在src/main/resources路径下新建包名，且包名与BrandMapper接口文件的包名一致，包名为com/muban/Mapper</p><p>2、在该路径下创建BrandMapper.xml映射文件</p><pre class="language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--namespace:名称空间,填写Mapper接口的路径--&gt;&lt;mapper namespace="com.muban.Mapper.BrandMapper"&gt;    &lt;!--数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据    需要使用resultMap:id代表该resultMap的别名，type代表返回的实体类--&gt;    &lt;resultMap id="BrandresultMap" type="com.muban.pojo.Brand"&gt;        &lt;!--column代表数据表中的一般字段名，还有一个id代表数据表中的主键字段名；property代表对应实体类中属性名称 --&gt;        &lt;result column="brandname" property="brandName"&gt;&lt;/result&gt;        &lt;result column="companyname" property="companyName"&gt;&lt;/result&gt;    &lt;/resultMap&gt;&lt;/mapper&gt;</code></pre><p>3、映射文件注意事项</p><p>当数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据，可使用以上方法进行操作</p><h5 id="1-8、编写获取SqlSession的工具类"><a href="#1-8、编写获取SqlSession的工具类" class="headerlink" title="1.8、编写获取SqlSession的工具类"></a>1.8、编写获取SqlSession的工具类</h5><p>在src/main/java/com/muban/utils路径下编写获取SqlSession的工具类</p><pre class="language-java" data-language="java"><code class="language-java">public class MyBatisUtil {    private static SqlSessionFactory sqlSessionFactory;    static {        try {            //使用MyBatis第一步：获取sqlSessionFactory对象            String resource = "mybatis-config.xml";            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        } catch (IOException e) {            e.printStackTrace();        }    }    //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。    public static SqlSession getSqlSession(){        return sqlSessionFactory.openSession();    }}</code></pre><h5 id="1-9、编写测试类"><a href="#1-9、编写测试类" class="headerlink" title="1.9、编写测试类"></a>1.9、编写测试类</h5><p>在src/test/java/com/muban/Mapper路径下创建BrandMapperTest.java测试类</p><pre class="language-Java" data-language="Java"><code class="language-Java">public class BrandMapperTest {    //封装sqlSession对象    private SqlSession sqlSession;    }</code></pre><h4 id="2、MyBatis实现CRUD操作"><a href="#2、MyBatis实现CRUD操作" class="headerlink" title="2、MyBatis实现CRUD操作"></a>2、MyBatis实现CRUD操作</h4><h5 id="2-1、MyBatis的所有数据查询操作"><a href="#2-1、MyBatis的所有数据查询操作" class="headerlink" title="2.1、MyBatis的所有数据查询操作"></a>2.1、MyBatis的所有数据查询操作</h5><p>1、在BrandMapper接口文件中添加查询所有数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//查询所有，返回一个集合List&lt;Brand&gt; selectAll();</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;!--  resultType为查询数据后返回的数据类型  --&gt;&lt;select id="selectAll" resultType="com.muban.pojo.Brand"&gt;    select * from brand;&lt;/select&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic void SelectAll(){    try {        //获取sqlSession        sqlSession = MyBatisUtil.getSqlSession();        //获取对应的mapper对象        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);        List&lt;Brand&gt; brands = mapper.selectAll();        for (Brand brand : brands) {            System.out.println(brand);        }    } finally {        //关闭sqlSession        sqlSession.close();    }}</code></pre><h5 id="2-2、MyBatis的数据插入操作"><a href="#2-2、MyBatis的数据插入操作" class="headerlink" title="2.2、MyBatis的数据插入操作"></a>2.2、MyBatis的数据插入操作</h5><p>1、在BrandMapper接口文件中添加插入数据的方法</p><pre class="language-Java" data-language="Java"><code class="language-Java">int addAll(Brand brand);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;insert id="addAll"&gt;    insert into brand    values (null, #{brandName}, #{companyName}, #{ordered}, #{description}, #{status})&lt;/insert&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test   public void addAll(){       try {           //获取sqlSession           sqlSession = MyBatisUtil.getSqlSession();           //获取对应的mapper对象           BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);           //封装需要添加的Brand对象           Brand brand = new Brand(null,"三星","三星科技有限公司",300,"三星财团",0);           //执行添加操作           int i = mapper.addAll(brand);           //提交事务           sqlSession.commit();           System.out.println("输出返回值看是否添加成功，返回值为1则添加成功"+i);       } finally {           //关闭sqlSession           sqlSession.close();       }   }</code></pre><p>4、注意事项</p><p>**插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即sqlSession.commit() </p><h5 id="2-3、MyBatis的数据删除操作"><a href="#2-3、MyBatis的数据删除操作" class="headerlink" title="2.3、MyBatis的数据删除操作"></a>2.3、MyBatis的数据删除操作</h5><p>1、在BrandMapper接口文件中添加通过id删除数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过（指定条件）id删除int deleteById(Integer id);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;delete id="deleteById"&gt;        delete from brand where id = #{id};    &lt;/delete&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test   public void deleteById(){       try {           //获取sqlSession           sqlSession = MyBatisUtil.getSqlSession();           //获取对应的mapper对象           BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);           //执行删除操作           int i = mapper.deleteById(17);           //提交事务           sqlSession.commit();           System.out.println("输出返回值看是否删除成功"+i);       } finally {           //关闭sqlSession           sqlSession.close();       }   }</code></pre><h5 id="2-4、MyBatis的数据更改操作"><a href="#2-4、MyBatis的数据更改操作" class="headerlink" title="2.4、MyBatis的数据更改操作"></a>2.4、MyBatis的数据更改操作</h5><p>1、在BrandMapper接口文件中添加通过id更改数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过（指定条件）id更改int updateById(Brand brand);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;update id="updateById"&gt;        update brand set brandname  = #{brandName},companyname=#{companyName},ordered=#{ordered},description=#{description},status=#{status} where id = #{id};    &lt;/update&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test    public void updateById(){        try {            //获取sqlSession            sqlSession = MyBatisUtil.getSqlSession();            //获取对应的mapper对象            BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);            //封装需要更改的Brand对象            Brand brand = new Brand(1,"三只松鼠","三只松鼠有限公司",300,"你怎么这么好吃",0);            //执行更改操作            int i = mapper.updateById(brand);            //提交事务            sqlSession.commit();            System.out.println("输出返回值看是否更改成功"+i);        } finally {            //关闭sqlSession            sqlSession.close();        }    }</code></pre><h5 id="2-5、MyBatis通过Map集合进行操作"><a href="#2-5、MyBatis通过Map集合进行操作" class="headerlink" title="2.5、MyBatis通过Map集合进行操作"></a>2.5、MyBatis通过Map集合进行操作</h5><p>1、在BrandMapper接口文件中添加通过map集合更改数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过Map进行操作int updateId(Map&lt;String,Integer&gt; map);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;!--  使用map进行操作时，#{}内的内容只需与定义的map中的key相同即可  --&gt;    &lt;update id="updateId"&gt;        update brand set status=#{status} where id = #{updateid};    &lt;/update&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test    public void UpdateId(){        try {            //获取sqlSession            sqlSession = MyBatisUtil.getSqlSession();            //获取对应的mapper对象            BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);            //创建对应的map集合            Map&lt;String,Integer&gt; map= new HashMap&lt;&gt;();            map.put("updateid",2);            map.put("status",1);            //执行更改操作            int i = mapper.updateId(map);            //提交事务            sqlSession.commit();            System.out.println("输出返回值看是否更改成功"+i);        } finally {            //关闭sqlSession            sqlSession.close();        }    }</code></pre><h5 id="2-6、MyBatis实现模糊查询"><a href="#2-6、MyBatis实现模糊查询" class="headerlink" title="2.6、MyBatis实现模糊查询"></a>2.6、MyBatis实现模糊查询</h5><p>1、在BrandMapper接口文件中添加模糊查询的方法</p><pre class="language-java" data-language="java"><code class="language-java">//模糊查询，存在sq注入问题Brand selectById1(Integer id);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;select id="selectById1" resultType="com.muban.pojo.Brand"&gt;        select * from brand  &lt;where&gt; brandname like "%"#{value}"%"&lt;/where&gt;    &lt;/select&gt;</code></pre><p>注意事项：模糊查询中存在sql注入的问题</p><p>解决方法：</p><p>①在sql拼接中使用通配符%  %（常见）；</p><p>②java代码执行时，添加传递通配符%   %；</p><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic void selectById1(){    try {        //获取sqlSession        sqlSession = MyBatisUtil.getSqlSession();        //获取对应的mapper对象        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);        //执行模糊查询操作        Brand brand = mapper.selectById1("华");        System.out.println("输出返回值对象"+brand);    } finally {        //关闭sqlSession        sqlSession.close();    }}</code></pre><h3 id="三、配置解析"><a href="#三、配置解析" class="headerlink" title="三、配置解析"></a>三、配置解析</h3><h4 id="1、核心配置文件MyBatis-Config-xml"><a href="#1、核心配置文件MyBatis-Config-xml" class="headerlink" title="1、核心配置文件MyBatis-Config.xml"></a>1、核心配置文件MyBatis-Config.xml</h4><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><pre class="language-none"><code class="language-none">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre><h5 id="1-1、环境配置（environments）"><a href="#1-1、环境配置（environments）" class="headerlink" title="1.1、环境配置（environments）"></a>1.1、环境配置（environments）</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--数据库连接信息--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--驱动信息--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--     tb_brand代表连接的数据库           --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       添加对应的连接信息         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span></code></pre><p>mybatis默认事务管理器是JDBC，连接池POOLED</p><h5 id="1-2、属性（properties）"><a href="#1-2、属性（properties）" class="headerlink" title="1.2、属性（properties）"></a>1.2、属性（properties）</h5><p>以下这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--     tb_brand代表连接的数据库           --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><p>动态配置过程：</p><p>1、在recourse目录下创建对应的配置文件mybatis-config.properties</p><pre class="language-none"><code class="language-none">driver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/tb_brand?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useServerPrepStmts=trueusername=rootpassword=123456</code></pre><p>2、在核心配置文件mybatis-config.xml文件中引入配置文件对应键值</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  引入mybatis-config.properties配置文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatis-config.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-3、设置（settings）"><a href="#1-3、设置（settings）" class="headerlink" title="1.3、设置（settings）"></a>1.3、设置（settings）</h5><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><p><img src="/posts/9664/1.png"></p><p><img src="/posts/9664/2.png"></p><h5 id="1-4、类型别名（typeAliases）"><a href="#1-4、类型别名（typeAliases）" class="headerlink" title="1.4、类型别名（typeAliases）"></a>1.4、类型别名（typeAliases）</h5><p>类型别名可为 Java 实体类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><p>1、方法一：在MyBatis核心配置文件中设置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  给实体类设置别名  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo.Brand<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span></code></pre><p>2、方法二：指定对应的包名，MyBatis搜索对应包下的Java Bean，其默认别名为该类的类名，且首字母小写</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-5、映射器（mappers）"><a href="#1-5、映射器（mappers）" class="headerlink" title="1.5、映射器（mappers）"></a>1.5、映射器（mappers）</h5><p>每个mapper.xml都要注册，加载sql映射文件</p><p>方法一：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--1、通过mapper resource获取其路径，其设置的是mapper文件的单一路径--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/muban/Mapper/BrandMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><p>方法二：使用该方法时，其接口文件和映射文件的路径名必须同名，且必须在同一个包下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--2、通过package name获取mapper文件的上一包名，直接扫描该包名下的所有mapper文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.Mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><p>方法三：使用该方法时，其接口文件和映射文件的路径名必须同名，且必须在同一个包下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 3、使用映射器接口实现类的完全限定类名  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.Mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-6、生命周期和作用域"><a href="#1-6、生命周期和作用域" class="headerlink" title="1.6、生命周期和作用域"></a>1.6、生命周期和作用域</h5><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的并发问题</p><p><strong>SqlSessionFactoryBuilder</strong></p><ul><li>一旦创建了SqlSessionFactoryBuilder，就不再需要他了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong></p><ul><li>说白了就是可以想像为：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在运行期间一直存在，没有任何理由丢弃或重新创建一个实例</li><li>SqlSessionFactory的最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭，否则资源被占用</li></ul><h4 id="2、解决属性名和字段名不一致的问题"><a href="#2、解决属性名和字段名不一致的问题" class="headerlink" title="2、解决属性名和字段名不一致的问题"></a>2、解决属性名和字段名不一致的问题</h4><p>当数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据，会出现数据不能自动封装为实体类的问题</p><p>解决方法：</p><ul><li><p>起别名：在sql语句中起别名</p></li><li><p>resultMap</p><p>结果集映射</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据需要使用resultMap:id代表该resultMap的别名，type代表返回的实体类--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandresultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo.Brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--column代表数据表中的一般字段名，还有一个id代表数据表中的主键字段名；property代表对应实体类中属性名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span></code></pre></li></ul><h3 id="四、日志"><a href="#四、日志" class="headerlink" title="四、日志"></a>四、日志</h3><h4 id="1、日志工厂"><a href="#1、日志工厂" class="headerlink" title="1、日志工厂"></a>1、日志工厂</h4><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p><p><img src="/posts/9664/3.png"></p><p>在核心配置文件MyBatis-Config.xml文件中配置日志</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  配置标准日志  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2、LOG4J（常用）"><a href="#2、LOG4J（常用）" class="headerlink" title="2、LOG4J（常用）"></a>2、LOG4J（常用）</h4><h3 id="五、分页"><a href="#五、分页" class="headerlink" title="五、分页"></a>五、分页</h3><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><h4 id="1、使用Limit进行分页"><a href="#1、使用Limit进行分页" class="headerlink" title="1、使用Limit进行分页"></a>1、使用Limit进行分页</h4><ul><li>```<br>语法：SELECT * FROM brand LIMIT startIndex,pageSize;<br>startIndex：其实数据下标<br>pageSize：每页显示的数据量<pre class="language-none"><code class="language-none">#### 2、使用RowBounds进行分页通过java代码层面实现分页，使用较少，前期进行使用#### 3、分页插件 PageHelper了解即可### 六、使用注解开发#### 1、什么叫面向接口编程**关于接口的理解**- 接口从更深层次的理解，应是定义（规范、约束）与实现（名实分离的原则）的分离- 接口的本身反映了系统设计人员对系统的抽象理解- 接口应有两类：  第一类是对一个个体的抽象，它可对应为一个抽象体（abstract class）  第二类是对一个个体某一个方面的抽象，即形成一个抽象面（interface）- 一个体可能有多个抽象面，抽象体和抽象面是有区别的**三个面向的区别**- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构#### 2、使用注解开发注解在接口上实现```java//语法@Select("sql语句")接口方法</code></pre></li></ul><p>本质：反射机制实现</p><p>底层：动态代理</p><h4 id="3、使用注解开发实现CRUD"><a href="#3、使用注解开发实现CRUD" class="headerlink" title="3、使用注解开发实现CRUD"></a>3、使用注解开发实现CRUD</h4><p><strong>实现自动提交事务</strong></p><pre class="language-java" data-language="java"><code class="language-java">//在定义MyBatisUtil工具类时，将参数设置为TRUE，可将其变更为自动提交事务public static SqlSession getSqlSession(){    return sqlSessionFactory.openSession(true);}</code></pre><p><strong>利用注解实现CRUD</strong></p><pre class="language-java" data-language="java"><code class="language-java">//使用注解进行开发public interface BrandMapper {    //查询所有，返回一个集合    @Select("select * from brand")    List&lt;Brand&gt; selectAll();    //增加    @Insert("insert into brand values (null, #{brandName}, #{companyName}, #{ordered}, #{description}, #{status})")    int addAll(Brand brand);    //通过（指定条件）id删除    @Delete("delete from brand where id = #{id}")    int deleteById(@Param("id") Integer id);    //通过（指定条件）id更改    @Update("update brand set brandname = #{brandName},companyname=#{companyName},ordered=#{ordered}, description=#{description},status=#{status} where id = #{id};")    int updateById(Brand brand);}</code></pre><p><strong>关于@Param(“”)</strong></p><pre class="language-none"><code class="language-none">/**根据条件进行查询 * 多条件查询时，参数接收方法： *      1、散装参数：方法中有多个参数，需要使用@param（“SQL参数占位符名称”） 参数类型 参数 的方法 *      2、实体类封装参数：保证SQL语句中的参数占位符名和实体类的属性名对应即可 *      3、map集合：保证SQL语句中的参数占位符名和map集合的键的名称对应上即可 * @return */</code></pre><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型，可以忽略，但是建议加上</li></ul><h3 id="七、连表查询"><a href="#七、连表查询" class="headerlink" title="七、连表查询"></a>七、连表查询</h3><h4 id="1、多对一连表查询"><a href="#1、多对一连表查询" class="headerlink" title="1、多对一连表查询"></a>1、多对一连表查询</h4><ul><li><p>多对一：例如对于学生而言，多个学生对应一个老师</p></li><li><p><strong>创建一个学生表和老师表</strong></p></li></ul><pre class="language-none"><code class="language-none">CREATE TABLE teacher(id INT(10) NOT NULL,name VARCHAR(30) DEFAULT NULL,PRIMARY KEY(id))ENGINE = INNODB DEFAULT CHARSET = utf8;INSERT INTO teacher(id,name) VALUES (1,'秦老师');CREATE TABLE student (id INT(10) NOT NULL,name VARCHAR(30) DEFAULT NULL,tid INT(10) DEFAULT NULL,PRIMARY KEY(id),KEY fktid (tid),CONSTRAINT fktid FOREIGN KEY(tid) REFERENCES teacher (id))ENGINE = INNODB DEFAULT CHARSET = utf8;INSERT INTO student (id,name,tid) VALUES (1,'小明',1),(2,'小红',1),(3,'小张',1),(4,'小李',1),(5,'小王',1)</code></pre><ul><li><strong>创建测试环境</strong></li></ul><p><img src="/posts/9664/4.png"></p><p><img src="/posts/9664/5.png">    <img src="/posts/9664/6.png"></p><ul><li><strong>按照查询嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--  按照查询嵌套处理  --&gt;&lt;select id="selectAll" resultMap="StudentTeacher"&gt;    select * from student;&lt;/select&gt;&lt;resultMap id="StudentTeacher" type="com.duoduiyi.pojo.student"&gt;    &lt;result property="id" column="id"/&gt;    &lt;result property="name" column="name"/&gt;    &lt;!--    复杂的属性，我们需要单独处理；对象 association  集合：collection     javaType：指定属性的类型；  集合中的泛型信息，我们使用ofType获取--&gt;    &lt;association property="teacher" column="tid" javaType="com.duoduiyi.pojo.teacher" select="getTeacher"/&gt;&lt;/resultMap&gt;&lt;select id="getTeacher" resultType="com.duoduiyi.pojo.teacher"&gt;    select * from teacher where id = #{tid};&lt;/select&gt;</code></pre><ul><li><strong>按照结果嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--按照结果嵌套处理--&gt;&lt;select id="selectAll1" resultMap="StudentTeacher1"&gt;    select student.id sid, student.name sname, teacher.name tname    from teacher, student    where student.tid = teacher.id;&lt;/select&gt;&lt;resultMap id="StudentTeacher1" type="com.duoduiyi.pojo.student"&gt;    &lt;result property="id" column="sid"/&gt;    &lt;result property="name" column="sname"/&gt;    &lt;association property="teacher" javaType="com.duoduiyi.pojo.teacher"&gt;        &lt;result property="name" column="tname"/&gt;    &lt;/association&gt;&lt;/resultMap&gt;</code></pre><h4 id="2、一对多连表查询"><a href="#2、一对多连表查询" class="headerlink" title="2、一对多连表查询"></a>2、一对多连表查询</h4><ul><li><p>一对多：例如对老师而言，一个老师对应多个学生</p></li><li><p><strong>创建测试环境</strong></p></li></ul><p><img src="/posts/9664/7.png"></p><p><img src="/posts/9664/8.png">    <img src="/posts/9664/9.png"></p><ul><li><strong>按照查询嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!-- 按照查询嵌套处理   --&gt;&lt;select id="selectAll2" resultMap="TeacherStudent1"&gt;    select *    from teacher    where id = #{id};&lt;/select&gt;&lt;resultMap id="TeacherStudent1" type="teacher"&gt;    &lt;result property="id" column="id"/&gt;    &lt;result property="name" column="name"/&gt;    &lt;collection property="studentList" column="id" javaType="ArrayList" ofType="student" select="getStudent"/&gt;&lt;/resultMap&gt;&lt;select id="getStudent" resultType="student"&gt;    select student.id, student.name    from student    where tid = #{id};&lt;/select&gt;</code></pre><ul><li><strong>按照结果嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--  按照结果嵌套处理进行连表查询  --&gt;&lt;select id="selectAll1" resultMap="TeacherStudent"&gt;    select teacher.id tid, teacher.name tname, student.id sid, student.name sname    from student, teacher    where student.tid = teacher.id and teacher.id = #{id};&lt;/select&gt;&lt;resultMap id="TeacherStudent" type="teacher"&gt;    &lt;result property="id" column="tid"/&gt;    &lt;result property="name" column="tname"/&gt;    &lt;collection property="studentList" ofType="student"&gt;        &lt;result property="id" column="sid"/&gt;        &lt;result property="name" column="sname"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;</code></pre><h3 id="八、动态SQL"><a href="#八、动态SQL" class="headerlink" title="八、动态SQL"></a>八、动态SQL</h3><ul><li><p><strong>什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句</strong></p></li><li><p><strong>搭建测试环境</strong></p><ol><li><p>创建数据表：创建一个博客用户表，包括博客id、博客信息、博客作者、博客创建时间、博客点击量</p><pre class="language-none"><code class="language-none">CREATE TABLE blog (id VARCHAR(50),title VARCHAR(100),author VARCHAR(30),createtime datetime,views int(30))ENGINE = INNODB DEFAULT CHARSET = utf8;</code></pre></li><li><p>创建java测试环境</p><p><img src="/posts/9664/10.png"></p></li></ol></li></ul><h4 id="1、动态SQL之if标签"><a href="#1、动态SQL之if标签" class="headerlink" title="1、动态SQL之if标签"></a>1、动态SQL之if标签</h4><pre class="language-none"><code class="language-none">&lt;!--  动态SQL之if标签，条件选择  --&gt;&lt;select id="selectif" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog    &lt;where&gt;1 = 1        &lt;if test="title != null"&gt;            and title = #{title}        &lt;/if&gt;        &lt;if test="author != null"&gt;            and author = #{author}        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h4 id="2、动态SQL之choose标签"><a href="#2、动态SQL之choose标签" class="headerlink" title="2、动态SQL之choose标签"></a>2、动态SQL之choose标签</h4><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><pre class="language-none"><code class="language-none">&lt;!--  动态SQL之choose标签  --&gt;&lt;select id="selectchoose" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog where    &lt;choose&gt;        &lt;when test="title != null"&gt;            title = #{title}        &lt;/when&gt;        &lt;when test="views != null"&gt;            views = #{views}        &lt;/when&gt;        &lt;otherwise&gt;            1=1        &lt;/otherwise&gt;    &lt;/choose&gt;&lt;/select&gt;</code></pre><h4 id="3、动态SQL之foreach标签"><a href="#3、动态SQL之foreach标签" class="headerlink" title="3、动态SQL之foreach标签"></a>3、动态SQL之foreach标签</h4><pre class="language-none"><code class="language-none">&lt;!-- 动态SQL之foreach标签  collection:传入集合  item：遍历时的变量名 open：sql语句开头  separator：sql语句拼接的中间 close：sql语句结尾 --&gt;&lt;select id="selectforeach" resultType="com.dtsql.pojo.Blog"&gt;select * from blog&lt;where&gt;    &lt;foreach collection="titles" item="title" open="(" separator="or" close=")"&gt;        title = #{title}    &lt;/foreach&gt;&lt;/where&gt;&lt;/select&gt;</code></pre><h4 id="4、SQL片段"><a href="#4、SQL片段" class="headerlink" title="4、SQL片段"></a>4、SQL片段</h4><p>有的时候，我们可能会将某些功能抽取出来，方便复用</p><pre class="language-none"><code class="language-none">&lt;!--  使用sql标签抽取公共部分  --&gt;&lt;sql id="sqlif"&gt;    &lt;if test="title != null"&gt;        and title = #{title}    &lt;/if&gt;    &lt;if test="author != null"&gt;        and author = #{author}    &lt;/if&gt;&lt;/sql&gt;&lt;!--  动态SQL之if标签，条件选择  --&gt;&lt;select id="selectif" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog    &lt;where&gt;1 = 1        &lt;!-- 使用include标签引用抽取部分 --&gt;        &lt;include refid="sqlif"&gt;&lt;/include&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h3 id="九、缓存"><a href="#九、缓存" class="headerlink" title="九、缓存"></a>九、缓存</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><ol><li>什么是缓存？<ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户查询数据就不用从磁盘上查询，在缓存中查询，从而提高查询效率，解决高并发系统的性能问题</li></ul></li><li>为什么要用缓存？<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul></li><li>什么样的数据能使用缓存？<ul><li>经常查询且不经常改变的数据</li></ul></li></ol><h4 id="2、MyBatis缓存"><a href="#2、MyBatis缓存" class="headerlink" title="2、MyBatis缓存"></a>2、MyBatis缓存</h4><ul><li>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便的定制和配置缓存，缓存可以较大的提升查询效率</li><li>MyBatis系统中默认定义了两级缓存<ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来定义二级缓存</li></ul></li></ul><h4 id="3、一级缓存"><a href="#3、一级缓存" class="headerlink" title="3、一级缓存"></a>3、一级缓存</h4><ul><li>一级缓存也叫本地缓存：SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放到本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要在查询数据库</li></ul></li><li>缓存失效的情况<ol><li>查询不同的东西</li><li>增删改操作，可能会改变原有的数据，所以必定会刷新缓存</li><li>查询不同的Mapper.xml</li><li>手动清理缓存</li></ol></li><li>一级缓存默认开启</li></ul><h4 id="4、二级缓存"><a href="#4、二级缓存" class="headerlink" title="4、二级缓存"></a>4、二级缓存</h4><ul><li><p>二级缓存也叫全局缓存，一级缓存的作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</p></li><li><p>工作机制</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是我们想要的是，会话关闭了，一级缓存中的数据会保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据会放在自己对应的缓存中</li></ul></li><li><p>全局的二级缓存需要手动开启，开启步骤：</p><ol><li><p>在mybatis核心配置文件mybatis-config.xml文件中开启全局缓存</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>在需要开启二级缓存的mapper映射文件mapper.xml文件中设置</p><pre class="language-xml" data-language="xml"><code class="language-xml">配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span><span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span><span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span><span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门操作</title>
      <link href="/posts/2cb5.html"/>
      <url>/posts/2cb5.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul><li><p>项目的版本管理：在项目的开发过程中，项目每开发到一个关键节点就会对项目进行备份，这个备份就是项目的一个版本</p></li><li><p>Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS） ，分为本地仓库和远程仓库：</p><ul><li>本地仓库：是在开发人员自己电脑上的Git仓库        </li><li>远程仓库：是在远程服务器上的Git仓库</li><li>Clone：克隆，就是将远程仓库复制到本地</li><li>Push：推送，就是将本地仓库代码上传到远程仓库</li><li>Pull：拉取，就是将远程仓库代码下载到本地仓库</li></ul></li></ul><p><img src="/posts/2cb5/1.png"></p><h3 id="1-2、Git工作流程"><a href="#1-2、Git工作流程" class="headerlink" title="1.2、Git工作流程"></a>1.2、Git工作流程</h3><ul><li>工作流程如下：</li></ul><ol><li>从远程仓库中克隆代码到本地仓库</li><li>从本地仓库中checkout代码然后进行代码修改</li><li>在提交前先将代码提交到暂存区</li><li>提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</li></ol><p><img src="/posts/2cb5/2.png"></p><h3 id="1-3、Git下载与安装"><a href="#1-3、Git下载与安装" class="headerlink" title="1.3、Git下载与安装"></a>1.3、Git下载与安装</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>检查是否安装成功：进入cmd。输入git –version</p><h3 id="1-4、架构体系"><a href="#1-4、架构体系" class="headerlink" title="1.4、架构体系"></a>1.4、架构体系</h3><ul><li>工作空间（workspace）：存放项目代码的根目录</li><li>版本仓库（repository）：存放项目历史版本的目录，就是在工作空间执行git init指令后，在工作空间生成的.git目录</li><li>暂存区（index）：就是版本库用于临时存储更新的缓存空间</li></ul><h2 id="二、Git常用指令"><a href="#二、Git常用指令" class="headerlink" title="二、Git常用指令"></a>二、Git常用指令</h2><p><img src="/posts/2cb5/3.png"></p><h3 id="2-1、环境配置"><a href="#2-1、环境配置" class="headerlink" title="2.1、环境配置"></a>2.1、环境配置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><ul><li><p><strong>设置用户信息</strong> </p><ul><li>git config –global user.name “你的用户名”</li><li>git config –global user.email “你的email地址”</li></ul></li><li><p><strong>查看配置信息</strong></p><ul><li>git config –list</li><li>git config user.name</li></ul></li></ul><p>通过上面的命令设置的信息会保存在<code>C:\Users\&lt;username&gt;\.gitconfig</code>文件中</p><h3 id="2-2、获取Git仓库"><a href="#2-2、获取Git仓库" class="headerlink" title="2.2、获取Git仓库"></a>2.2、获取Git仓库</h3><ul><li><strong>获取Git仓库通常有两种方式：</strong><ul><li>  在本地初始化一个Git仓库</li><li>  从远程仓库克隆</li></ul></li></ul><h4 id="2-2-1、在本地初始化仓库"><a href="#2-2-1、在本地初始化仓库" class="headerlink" title="2.2.1、在本地初始化仓库"></a>2.2.1、在本地初始化仓库</h4><ul><li><strong>初始化步骤：</strong><ul><li>在合适的磁盘目录下创建一个文件夹，作为我们的工作空间</li><li>进入工作空间目录，鼠标右键选择<code>Git Bash Here</code></li><li>执行命令<code>git init</code></li></ul></li></ul><p>若在工作空间下见到一个<code>.git</code>文件夹（此文件夹为隐藏文件夹）则说明Git仓库创建成功</p><h4 id="2-2-2、从远程仓库克隆"><a href="#2-2-2、从远程仓库克隆" class="headerlink" title="2.2.2、从远程仓库克隆"></a>2.2.2、从远程仓库克隆</h4><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p>在新建一个工作空间后，输入命令：<code>git clone 远程Git仓库地址</code> ，即可将远程仓库克隆到本地</p><h3 id="2-3、Git工作目录下文件的两种状态"><a href="#2-3、Git工作目录下文件的两种状态" class="headerlink" title="2.3、Git工作目录下文件的两种状态"></a>2.3、Git工作目录下文件的两种状态</h3><ul><li><strong>Git工作目录下的文件存在两种状态：</strong><ul><li>  untracked 未跟踪（未被纳入版本控制）</li><li>  tracked 已跟踪（被纳入版本控制）</li><li>Unmodified 未修改状态</li><li>Modified 已修改状态</li><li>Staged 已暂存状态</li></ul></li></ul><p>这些文件的状态会随着我们执行Git的命令发生变化</p><h3 id="2-4、本地仓库操作"><a href="#2-4、本地仓库操作" class="headerlink" title="2.4、本地仓库操作"></a>2.4、本地仓库操作</h3><ul><li><p>查看版本库状态：<code>git status</code>，也可以使用<code>git status -s</code>使得输出信息更简洁</p></li><li><p>将工作空间的修改添加到暂存区：</p><ul><li>将工作空间中的某个文件添加：<code>git add 文件名</code></li><li>将工作空间中的所有文件添加：<code>git add .</code></li></ul></li><li><p>将暂存区的文件取消暂存：<code>git reset 文件名</code></p></li><li><p>将暂存区内容提交版本仓库：<code>git commit -m "版本说明"</code></p></li><li><p>删除文件：<code>git rm 文件名</code>，仅仅只删除工作空间的文件，需要提交到版本仓库</p></li><li><p>查看版本库中的历史版本及版本号（只会显示第一个版本到当前工作空间版本之间的历史版本）：</p><ul><li><code>git log</code> 显示每个版本的详细信息</li><li><code>git log -- oneline</code> 每个版本信息只显示一行</li></ul></li></ul><h3 id="2-5、远程仓库操作"><a href="#2-5、远程仓库操作" class="headerlink" title="2.5、远程仓库操作"></a>2.5、远程仓库操作</h3><ul><li><p>本地仓库关联远程仓库：<code>git remote add 远程仓库别名  远程仓库链接</code></p></li><li><p>查看远程仓库状态：<code>git remote -v</code></p></li><li><p>移除无效的远程仓库：<code>git remote rm 远程仓库链接或别名</code></p></li><li><p>提交到远程仓库：<code>git push 远程仓库别名 分支名</code></p></li><li><p>从远程仓库拉取到本地仓库：<code>git pull 远程仓库地址 分支名</code>。</p></li></ul><blockquote><p><strong>注意：</strong>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories</p><p><strong>协同开发时存在一方push后，另一方无法push的问题</strong><br>解决方法一：另一方重新进行pull操作并更改后，在进行push操作<br>解决方法二：执行git fetch 远程仓库地址 master（从远程获取最新到本地）</p></blockquote><h2 id="三、Git分支管理"><a href="#三、Git分支管理" class="headerlink" title="三、Git分支管理"></a>三、Git分支管理</h2><h3 id="3-1、分支介绍"><a href="#3-1、分支介绍" class="headerlink" title="3.1、分支介绍"></a>3.1、分支介绍</h3><p><strong>概念</strong>：分支就是版本库中记录版本位置（支线），分支之间项目会影响，使用分支可以对项目起到保护作用</p><p><strong>特性</strong>：创建一个新的仓库后，默认创建一个master分支，每个分支可以进行单独管理，分支是可以合并的</p><h3 id="3-2、分支操作"><a href="#3-2、分支操作" class="headerlink" title="3.2、分支操作"></a>3.2、分支操作</h3><ul><li><p>查看所有本地分支：<code>git branch</code></p></li><li><p>查看所有远程分支：<code>git branch -r</code></p></li><li><p>切换分支：<code>git checkout 分支名</code></p></li><li><p>创建分支：<code>git branch 分支名</code>（从当前版本创建分支），从指定版本号创建分支：<code>git checkout 版本号 -b 分支名</code></p></li><li><p>合并分支：<code>git merge 分支名</code>（将指定分支合并到当前分支）</p></li><li><p>查看所有分支及版本视图：<code>git log --oneline --graph</code></p></li><li><p>删除本地分支：<code>git branch -d 分支名</code></p></li><li><p>删除远程分支：<code>git push 远程仓库链接或别名 -d 分支名</code></p></li></ul><h2 id="四、Git关联IDEA"><a href="#四、Git关联IDEA" class="headerlink" title="四、Git关联IDEA"></a>四、Git关联IDEA</h2><h3 id="4-1、在IDEA中配置Git"><a href="#4-1、在IDEA中配置Git" class="headerlink" title="4.1、在IDEA中配置Git"></a>4.1、在IDEA中配置Git</h3><ul><li>选择IDEA的<code>File→Settings</code>打开设置窗口，找到<code>Version Control</code>下的<code>git</code>选项，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。</li></ul><p><img src="/posts/2cb5/4.png"></p><ul><li>选择git的安装目录后可以点击<code>Test</code>按钮测试是否正确配置</li></ul><h3 id="4-2、在IDEA中使用Git"><a href="#4-2、在IDEA中使用Git" class="headerlink" title="4.2、在IDEA中使用Git"></a>4.2、在IDEA中使用Git</h3><h4 id="4-2-1、在IDEA中创建工程并将工程添加至Git"><a href="#4-2-1、在IDEA中创建工程并将工程添加至Git" class="headerlink" title="4.2.1、在IDEA中创建工程并将工程添加至Git"></a>4.2.1、在IDEA中创建工程并将工程添加至Git</h4><p>创建本地版本库：点击菜单栏VCS下的Enable Version ……并选中git后点击ok即可</p><p> <img src="/posts/2cb5/5.png"></p><h4 id="4-2-2、设置忽略"><a href="#4-2-2、设置忽略" class="headerlink" title="4.2.2、设置忽略"></a>4.2.2、设置忽略</h4><p>当上传到仓库时，某些文件或文件夹如<code>.idea、target、.xml</code>文件不用上传，将<code>.idea</code>文件夹中的<code>.gitignore</code>文件拖到根目录下，填充内容<code>.idea、target、*.xml</code></p><h4 id="4-2-3、将文件提交到暂存区"><a href="#4-2-3、将文件提交到暂存区" class="headerlink" title="4.2.3、将文件提交到暂存区"></a>4.2.3、将文件提交到暂存区</h4><p>选择某个项目或文件，右键并选择<code>git</code>下的<code>add</code>选项</p><p>已提交到缓存区的文件被显示绿色，未被提交到缓存区的文件显示红色</p><p><img src="/posts/2cb5/6.png"></p><h4 id="4-2-4、将文件提交到本地仓库"><a href="#4-2-4、将文件提交到本地仓库" class="headerlink" title="4.2.4、将文件提交到本地仓库"></a>4.2.4、将文件提交到本地仓库</h4><p>将缓存区内容提交到本地仓库：选择某个项目或文件，右键并选择<code>git</code>下的<code>commit changes</code>选项，并在<code>commit message</code>中填写提交说明</p><p>已提交到仓库的文件被显示黑色，对已提交到仓库的文件进行更改后文件显示蓝色</p><p><img src="/posts/2cb5/7.png"></p><p><img src="/posts/2cb5/8.png"></p><h4 id="4-2-5、与远程仓库映射"><a href="#4-2-5、与远程仓库映射" class="headerlink" title="4.2.5、与远程仓库映射"></a>4.2.5、与远程仓库映射</h4><p>在IDEA中使得项目与远程仓库映射：选择某个项目或文件，右键并选择<code>git</code>下的<code>Manage Remotes</code>选项，并在<code>Manage Remotes</code>添加远程仓库的别名和链接地址</p><p><img src="/posts/2cb5/9.png"></p><p><img src="/posts/2cb5/10.png"></p><h4 id="4-2-6、将代码推送到远程仓库"><a href="#4-2-6、将代码推送到远程仓库" class="headerlink" title="4.2.6、将代码推送到远程仓库"></a>4.2.6、将代码推送到远程仓库</h4><p><img src="/posts/2cb5/11.png"></p><h4 id="4-2-7、从远程拉取代码"><a href="#4-2-7、从远程拉取代码" class="headerlink" title="4.2.7、从远程拉取代码"></a>4.2.7、从远程拉取代码</h4><p><img src="/posts/2cb5/12.png"></p><h4 id="4-2-8、创建分支"><a href="#4-2-8、创建分支" class="headerlink" title="4.2.8、创建分支"></a>4.2.8、创建分支</h4><p>创建分支：点击IDEA右下角的<code>Git Branch</code> 按钮，选择<code>new branch</code>创建新分支</p><p><img src="/posts/2cb5/13.png"></p><h4 id="4-2-9、切换分支"><a href="#4-2-9、切换分支" class="headerlink" title="4.2.9、切换分支"></a>4.2.9、切换分支</h4><p>切换分支：选择该分支后点击选择<code>checkout</code></p><p><img src="/posts/2cb5/14.png"></p><h4 id="4-2-10、删除分支"><a href="#4-2-10、删除分支" class="headerlink" title="4.2.10、删除分支"></a>4.2.10、删除分支</h4><p>删除分支：选择该分支后点击选择<code>delete</code></p><p><img src="/posts/2cb5/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小破站创建之旅</title>
      <link href="/posts/5aed.html"/>
      <url>/posts/5aed.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>偶然间了解到了 Hexo 这个静态博客网站，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来。</p><p><strong>如果有错的话，请给我留言，我会及时修改，直接上教程。</strong></p><h2 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h2><ul><li>本文系统环境信息：win10</li><li>Node.js：v16.14.0</li><li>Git：2.34.1</li><li>修改配置文件的软件：Sublime Text</li></ul><hr><h3 id="1-1、下载Node-js和Git"><a href="#1-1、下载Node-js和Git" class="headerlink" title="1.1、下载Node.js和Git"></a>1.1、下载Node.js和Git</h3><h4 id="1-1-1、Node-js-的安装与配置"><a href="#1-1-1、Node-js-的安装与配置" class="headerlink" title="1.1.1、Node.js 的安装与配置"></a>1.1.1、Node.js 的安装与配置</h4><ul><li>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</li></ul><p><img src="/posts/5aed/1.png"></p><p>下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，并测试 Node.js 是否加入环境变量，运行cmd，当出现如下图的情况，Node.js 安装大功告成。</li></ul><p><img src="/posts/5aed/2.png"></p><ul><li>设置npm的镜像源</li></ul><pre class="language-none"><code class="language-none"># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org</code></pre><p>设置完成后就可以进行Git的安装了。</p><h4 id="1-1-2、Git的安装与配置"><a href="#1-1-2、Git的安装与配置" class="headerlink" title="1.1.2、Git的安装与配置"></a>1.1.2、Git的安装与配置</h4><ul><li>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的安装。</li></ul><p><img src="/posts/5aed/3.png"></p><p>同样下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，回到桌面，点击鼠标右键，出现两个选项<code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ul><p><img src="/posts/5aed/4.png"></p><p><img src="/posts/5aed/5.png"></p><hr><h3 id="1-2、Github-注册以及-Github-Pages-创建"><a href="#1-2、Github-注册以及-Github-Pages-创建" class="headerlink" title="1.2、Github 注册以及 Github Pages 创建"></a>1.2、Github 注册以及 Github Pages 创建</h3><ul><li>打开 Github <a href="https://github.com/">官网首页</a>，点击右上角的 <strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ul><p><img src="/posts/5aed/6.png"></p><p>按照流程创建完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code> 为描述仓库，自定义写，填写必要的描述，也可不填。勾选 <code>Add a README file</code> 点击 <code>Creat repository</code> 进行创建。</p><p><img src="/posts/5aed/7.png"></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="/posts/5aed/8.png"></p><p>此时可以进行测试，点击 <code>Create new file</code>，出现如下界面，然后命名文件名为 <code>index.html</code>，在填写如图的内容，再点击 <code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址 <code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="/posts/5aed/9.png"></p><p><img src="/posts/5aed/10.png"></p><p>若出现对应的内容，则Github 的注册以及 Github Pages 已经创建完成了。</p><hr><h3 id="1-3、配置Git用户名和邮箱"><a href="#1-3、配置Git用户名和邮箱" class="headerlink" title="1.3、配置Git用户名和邮箱"></a>1.3、配置Git用户名和邮箱</h3><p>在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，进入git界面：</p><p><img src="/posts/5aed/11.png"></p><p>然后分别输入下面的两个命令，并回车：</p><pre class="language-none"><code class="language-none">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"</code></pre><p>在 <code>C:/Users/[username]/</code>目录下找到<code>.gitconfig</code> 文件,若未找到，开启显示隐藏文件夹的功能即可。同时用编辑器打开，看到如下图所示的信息，即配置成功。</p><p><img src="/posts/5aed/12.png"></p><h2 id="二、本地安装-hexo-静态博客框架并发布到-Github-Pages"><a href="#二、本地安装-hexo-静态博客框架并发布到-Github-Pages" class="headerlink" title="二、本地安装 hexo 静态博客框架并发布到 Github Pages"></a>二、本地安装 hexo 静态博客框架并发布到 Github Pages</h2><h3 id="2-1、本地安装hexo静态博客框架"><a href="#2-1、本地安装hexo静态博客框架" class="headerlink" title="2.1、本地安装hexo静态博客框架"></a>2.1、本地安装hexo静态博客框架</h3><ul><li>选择一个磁盘作为你博客文件的存放位置，并在该位置新建一个文件夹，比如名为MyBlog 的文件夹，创建完成后，不要点进去，在此处点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令：</li></ul><pre class="language-none"><code class="language-none"># hexo框架的安装npm install -g hexo-cli# 初始化文件夹hexo init &lt;新建文件夹的名称&gt; # 切换到该文件夹cd &lt;新建文件夹的名称&gt;# 安装博客所需要的依赖文件npm install  </code></pre><p>依次运行完成后，文件夹内会多出如下图所示的一些文件，此时 Hexo 框架的本地搭建已经完成了，<strong>后续操作均需在该站点目录内进行完成</strong>。</p><p><img src="/posts/5aed/13.png"></p><ul><li><p>此时 Hexo 框架的本地搭建已经完成了，进行本地测试</p><p>进入站点文件夹，鼠标右键选择<code>Git Bash Here</code>，然后依次输入以下命令：</p></li></ul><pre class="language-none"><code class="language-none">hexo ghexo s</code></pre><p>浏览器中打开 [<a href="http://localhost:4000]可以看到一个网页，说明">http://localhost:4000]可以看到一个网页，说明</a> Hexo 博客已经成功在本地运行。</p><p><img src="/posts/5aed/14.png"></p><hr><h3 id="2-2、本地博客发布到-Github-Pages"><a href="#2-2、本地博客发布到-Github-Pages" class="headerlink" title="2.2、本地博客发布到 Github Pages"></a>2.2、本地博客发布到 Github Pages</h3><ul><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><ul><li>将本地目录与github进行关联，执行以下命令</li></ul><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C "github注册邮箱地址"</code></pre><p>输入后一直进行回车，然后在 <code>C:/Users/[username]</code> 目录下找到名为<code>.ssh</code> 的文件夹， 文件夹内有两个文件 <code>id_rsa.pub</code> 、 <code>id_rsa</code>，用文本编辑器打开 </p><p><code>id_rsa.pub</code>，复制里面的的内容。 然后打开 Github，点击右上角的头像 <strong>Settings</strong> 选择 <strong>SSH and GPG keys</strong></p><p><img src="/posts/5aed/15.png"></p><ul><li>测试是否与GitHub链接成功，输入下面的命令行</li></ul><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><p>点击回车，会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi ! You've successfully authenticated, but GitHub doesnot provide shell </code></p><p><code>access.</code>。 说明连接成功。此处这个 `` 应该是你 Github 的用户名。</p><ul><li>进入站点目录，打开博客的配置文件<code>_config.yml</code>，修改如下图所示的几个地方</li></ul><pre class="language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种，中文是zh-CN  timezone: 时区，可以不用管</code></pre><p>同时在该配置文件的最底部修改deploy，修改为如下代码：</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo:       github: git@github.com:Github用户名/Github用户名.github.io.git   branch: master</code></pre><ul><li>执行以下命令，生成页面，并发布至 Github Pages</li></ul><pre class="language-none"><code class="language-none"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 可以直接输入此命令，直接完成渲染和上传hexo g -d</code></pre><h2 id="三、博客主题修改及个性化修改"><a href="#三、博客主题修改及个性化修改" class="headerlink" title="三、博客主题修改及个性化修改"></a>三、博客主题修改及个性化修改</h2><h3 id="3-1、主题的下载与安装"><a href="#3-1、主题的下载与安装" class="headerlink" title="3.1、主题的下载与安装"></a>3.1、主题的下载与安装</h3><p>在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本 (不</p><p>定期更新优化)，自主选择版本。</p><pre class="language-none"><code class="language-none">git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><p>下载完成后，在站点目录的 <code>themes</code>文件夹内会出现一个 <code>matery</code>主题文件夹</p><p><strong>什么是站点配置文件，什么是主题配置文件：</strong></p><ul><li>站点配置文件就是根目录下的配置文件，假设你的博客文件在 <code>D:\MyBlog</code> 下，那么站点配置文件就是 <code>D:\MyBlog\_config.yml</code>，主题配置文件就是 <code>D:\MyBlog\themes\matery\_config.yml</code>。</li></ul><hr><h3 id="3-2、主题配置"><a href="#3-2、主题配置" class="headerlink" title="3.2、主题配置"></a>3.2、主题配置</h3><h4 id="3-2-1、主题切换"><a href="#3-2-1、主题切换" class="headerlink" title="3.2.1、主题切换"></a>3.2.1、主题切换</h4><ul><li><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>matery</code>，那么值就修改为 <code>theme: matery</code>。</p></li><li><p>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</p></li></ul><h4 id="3-2-2、新建-tags-标签页面"><a href="#3-2-2、新建-tags-标签页面" class="headerlink" title="3.2.2、新建 tags 标签页面"></a>3.2.2、新建 tags 标签页面</h4><ul><li><code>tags</code> 页是用来展示所有标签的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>tags/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "tags"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: tagsdate: 2022-02-22 12:23:38type: "tags"layout: "tags"---</code></pre><h4 id="3-2-3、-新建-categories-分类页面"><a href="#3-2-3、-新建-categories-分类页面" class="headerlink" title="3.2.3、 新建 categories 分类页面"></a>3.2.3、 新建 categories 分类页面</h4><p><code>categories</code> 页是用来展示所有分类的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>categories/index.md</code> 文件，如若已有，则此步骤跳过：</p><pre class="language-none"><code class="language-none">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，加入以下内容：</p><pre class="language-none"><code class="language-none">---title: categoriesdate: 2022-02-22 12:24:38type: "categories"layout: "categories"---</code></pre><h4 id="3-2-4、新建-about-关于我页面"><a href="#3-2-4、新建-about-关于我页面" class="headerlink" title="3.2.4、新建 about 关于我页面"></a>3.2.4、新建 about 关于我页面</h4><ul><li><code>about</code> 页是用来展示关于我和我的博客信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>about/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "about"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: aboutdate: 2022-02-22 12:25:32type: "about"layout: "about"---</code></pre><h4 id="3-2-5、新建-contact-留言板页面"><a href="#3-2-5、新建-contact-留言板页面" class="headerlink" title="3.2.5、新建 contact 留言板页面"></a>3.2.5、新建 contact 留言板页面</h4><ul><li><code>contact</code> 页是用来展示留言板信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>contact/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "contact"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: contactdate: 2022-02-22 12:26:32type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p></blockquote><h4 id="3-2-6、新建-friends-友情链接页面"><a href="#3-2-6、新建-friends-友情链接页面" class="headerlink" title="3.2.6、新建 friends 友情链接页面"></a>3.2.6、新建 friends 友情链接页面</h4><ul><li><code>friends</code> 页是用来展示友情链接信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>friends/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "friends"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: friendsdate: 2022-02-22 12:27:02type: "friends"layout: "friends"---</code></pre><ul><li>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</li></ul><pre class="language-none"><code class="language-none">[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h4 id="3-2-7、菜单导航配置"><a href="#3-2-7、菜单导航配置" class="headerlink" title="3.2.7、菜单导航配置"></a>3.2.7、菜单导航配置</h4><ul><li><strong>主题配置文件配置基本菜单导航的名称、路径 url 和图标 icon。</strong><ul><li>菜单导航名称可以是中文也可以是英文 (如：<code>Index</code> 或<code>主页</code>)</li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li></ul></li></ul><pre class="language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><ul><li><strong>二级菜单配置方法</strong><ul><li>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作：<ul><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字 (如:<code>About</code> 菜单下添加 <code>children</code>)</li><li>在 <code>children</code> 下创建二级菜单的 名称 name, 路径 url 和图标 icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ul></li></ul></li></ul><pre class="language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h4 id="3-2-8、添加-emoji-表情支持"><a href="#3-2-8、添加-emoji-表情支持" class="headerlink" title="3.2.8、添加 emoji 表情支持"></a>3.2.8、添加 emoji 表情支持</h4><ul><li>matery主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code> 表情的生成，把对应的 <code>markdown emoji</code> 语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的 <code>emoji</code> 表情，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-filter-github-emojis --save</code></pre><ul><li>在站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h4 id="3-2-9、代码高亮"><a href="#3-2-9、代码高亮" class="headerlink" title="3.2.9、代码高亮"></a>3.2.9、代码高亮</h4><ul><li> Hexo 自带的代码主题显示不好看，主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i -S hexo-prism-plugin</code></pre><ul><li>修改 Hexo 站点目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</li></ul><pre class="language-none"><code class="language-none">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="3-2-10、-搜索"><a href="#3-2-10、-搜索" class="headerlink" title="3.2.10、 搜索"></a>3.2.10、 搜索</h4><ul><li>matery主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-search --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">search:  path: search.xml  field: post</code></pre><h4 id="3-2-11、中文链接转拼音"><a href="#3-2-11、中文链接转拼音" class="headerlink" title="3.2.11、中文链接转拼音"></a>3.2.11、中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> 的Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i hexo-permalink-pinyin --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h4 id="3-2-12、文章字数统计插件"><a href="#3-2-12、文章字数统计插件" class="headerlink" title="3.2.12、文章字数统计插件"></a>3.2.12、文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i --save hexo-wordcount</code></pre><ul><li>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</li></ul><pre class="language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="3-2-13、添加-RSS-订阅支持"><a href="#3-2-13、添加-RSS-订阅支持" class="headerlink" title="3.2.13、添加 RSS 订阅支持"></a>3.2.13、添加 RSS 订阅支持</h4><ul><li>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-feed --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="3-2-14、修改社交链接信息"><a href="#3-2-14、修改社交链接信息" class="headerlink" title="3.2.14、修改社交链接信息"></a>3.2.14、修改社交链接信息</h4><ul><li>在主题配置文件<code>_config.yml</code> 中，修改以下配置项：</li></ul><pre class="language-none"><code class="language-none">socialLink:  github:  # https://github.com/xxx  email: #xxxx  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: #xxxx  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: true # true、false</code></pre><h4 id="3-2-15、修改打赏的二维码图片"><a href="#3-2-15、修改打赏的二维码图片" class="headerlink" title="3.2.15、修改打赏的二维码图片"></a>3.2.15、修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="3-2-16、配置音乐播放器"><a href="#3-2-16、配置音乐播放器" class="headerlink" title="3.2.16、配置音乐播放器"></a>3.2.16、配置音乐播放器</h4><blockquote><p>新版主题支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活 music 配置即可：</p><pre class="language-none"><code class="language-none"># 是否在首页显示音乐music:  enable: true  title:            #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code> 可选 <code>netease</code>（网易云音乐），<code>tencent</code>（QQ 音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code> 可选 <code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code> 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code> 的 <code>id</code> 即为这串数字。</p></blockquote><hr><h3 id="3-3、Front-matter"><a href="#3-3、Front-matter" class="headerlink" title="3.3、Front-matter"></a>3.3、Front-matter</h3><p>在站点目录的 <code>scaffold</code> 的文件夹下找到 <code>post.md</code>文件，进行 Front-matter修改，修改配置如下：</p><pre class="language-none"><code class="language-none">---# 文章标题title: {{ title }}# 文件创建日期date: {{ date }}# 作者author:# 文章摘要summary:# 文章特征图img:# 是否置顶top:# 文章是否需要加入到首页轮播封面中cover:toc: truemathjax: true# 文章分类categories:# 文章标签tags:---</code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code> 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code> 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><hr><h3 id="3-4、自定制修改"><a href="#3-4、自定制修改" class="headerlink" title="3.4、自定制修改"></a>3.4、自定制修改</h3><h4 id="3-4-1、修改主题颜色"><a href="#3-4-1、修改主题颜色" class="headerlink" title="3.4.1、修改主题颜色"></a>3.4.1、修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="3-4-2、修改-banner-图和文章特色图"><a href="#3-4-2、修改-banner-图和文章特色图" class="headerlink" title="3.4.2、修改 banner 图和文章特色图"></a>3.4.2、修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，</p><p>可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="language-none"><code class="language-none">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><h4 id="3-4-3、修改网站相关信息"><a href="#3-4-3、修改网站相关信息" class="headerlink" title="3.4.3、修改网站相关信息"></a>3.4.3、修改网站相关信息</h4><pre class="language-none"><code class="language-none">#这是站点目录下的配置文件信息title:    #这是网站标题subtitle:     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description:   #网站描述keywords:  #网站的关键词author:   #作者，文章版权所显示的language: zh-CN  #网站语言，不填写，默认为英文timezone:   #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png</code></pre><h2 id="四、其他DIY"><a href="#四、其他DIY" class="headerlink" title="四、其他DIY"></a>四、其他DIY</h2><h3 id="4-1、外链跳转插件"><a href="#4-1、外链跳转插件" class="headerlink" title="4.1、外链跳转插件"></a>4.1、外链跳转插件</h3><blockquote><p><a href="https://blog.hvnobug.com/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2h2bm9idWcvaGV4by1leHRlcm5hbC1saW5r">hexo-external-link</a> 是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接，不要将该链接计入权重。 同时自动生成外链跳转页面，默认在根目录下 go.html;</p></blockquote><ul><li>使用 npm安装</li></ul><pre class="language-none"><code class="language-none">## npm 安装npm install hexo-external-link --save</code></pre><ul><li>之后再 hexo 博客站点根目录下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: 'u'  html_file_name: 'go.html'  target_blank: true  link_rel: 'external nofollow noopener noreferrer'  domain: 'your_domain' # 如果开启了防盗链，填写你的域名  safety_chain: true</code></pre><hr><h3 id="4-2、添加动态科技线条背景"><a href="#4-2、添加动态科技线条背景" class="headerlink" title="4.2、添加动态科技线条背景"></a>4.2、添加动态科技线条背景</h3><p>在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre class="language-none"><code class="language-none">&lt;!--动态线条背景--&gt;&lt;script type="text/javascript"color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;</code></pre><ul><li>color：表示线条颜色，三个数字分别为 (R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的 z-index 属性，css 属性用于控制所在层的位置，默认：-1</li></ul><hr><h3 id="4-3、文章生成永久链接"><a href="#4-3、文章生成永久链接" class="headerlink" title="4.3、文章生成永久链接"></a>4.3、文章生成永久链接</h3><p>主题默认的文章链接配置是</p><pre class="language-none"><code class="language-none">permalink: :year/:month/:day/:title</code></pre><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><ul><li>在站点目录下执行下面的命令：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-abbrlink --save</code></pre><ul><li>在站点配置文件下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><ul><li>将站点配置文件的 <code>permalink</code> 的值修改为：</li></ul><pre class="language-none"><code class="language-none">permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code></pre><ul><li>将站点配置文件的 <code>permalink</code> 上方 <code>url</code> 的值修改为：</li></ul><pre class="language-none"><code class="language-none">url: https://username.github.io  # 此处的username为你的github用户名</code></pre><hr><h3 id="4-4、页面获取标题"><a href="#4-4、页面获取标题" class="headerlink" title="4.4、页面获取标题"></a>4.4、页面获取标题</h3><p>修改 <code>themes\matery\layout\_partial</code> 中的 <code>bg-cover-content.ejs</code> 文件，其中原主题中这个文件的代码为 (大约在第 4 行)：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;            &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;            subtitle     &lt;% } %&gt;&lt;/div&gt;</code></pre><p>将其修改为：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;        &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;        &lt;%= page.title %&gt;     &lt;% } %&gt;&lt;/div&gt;</code></pre><h2 id="五、添加评论系统"><a href="#五、添加评论系统" class="headerlink" title="五、添加评论系统"></a>五、添加评论系统</h2><p>只说几个常用的评论系统的配置方法：</p><h3 id="5-1、来必力评论系统"><a href="#5-1、来必力评论系统" class="headerlink" title="5.1、来必力评论系统"></a>5.1、来必力评论系统</h3><ul><li>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：<ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul></li></ul><p><img src="/posts/5aed/16.png"></p><ul><li>进行注册登录，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：</li></ul><p><img src="/posts/5aed/17.png"></p><ul><li>把data_uid的值复制后添加到主题配置文件的对应位置</li></ul><pre class="language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-2、添加-Valine-评论系统"><a href="#5-2、添加-Valine-评论系统" class="headerlink" title="5.2、添加 Valine 评论系统"></a>5.2、添加 Valine 评论系统</h3><p><a href="https://valine.js.org/">Valine 官方文档</a></p><p>如果注册过 LeanCloud，请点击此处进行<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>，未注册的请点击<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a></p><ul><li>经过登录或者注册之后再登录，就会进入如下的页面：</li></ul><p><img src="/posts/5aed/18.png"></p><ul><li>创建应用完成后，会出现如下页面，然后点击设置</li></ul><p><img src="/posts/5aed/19.png"></p><ul><li>会出现下面的页面，将其中 APPID 和 APPKey 复制，添加到主题配置文件中。</li></ul><p><img src="/posts/5aed/20.png"></p><pre class="language-none"><code class="language-none"># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  # true即为开启评论系统  appId:   #此处填写你的appid  appKey:  #此处填写你的appkey  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder  background:  https://cdn.jsdelivr.net/gh/Yafine/cdn@3.1.1/social/comment_bg.png</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-3、添加-Gitalk-评论模块"><a href="#5-3、添加-Gitalk-评论模块" class="headerlink" title="5.3、添加 Gitalk 评论模块"></a>5.3、添加 Gitalk 评论模块</h3><ul><li>注册 OAuth Application</li></ul><p>当别人评论你的文章时，会需要它授权。点击<a href="https://github.com/settings/applications/new">注册 OAuth Application</a> 进行注册，注册界面如下：</p><p><img src="/posts/5aed/21.png"></p><ul><li>点击 <strong>Register application</strong>（注册）会出现 <strong>Client ID/Secret</strong>，接下来就是将信息填入配置文件中。</li></ul><p><img src="/posts/5aed/22.png"></p><ul><li>配置 _config.yml 文件</li></ul><pre class="language-none"><code class="language-none"># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: true    # true即开启评论模块  owner: Yafine  # 填写你的 github 账户名即可  repo: Yafine-gitalks   # 新建一个仓库或者使用博客托管的仓库也可  oauth:    clientId: #填写你的clientId    clientSecret:  #填写你的clientSecret  admin: Yafine  #填写你的 github 账户名即可</code></pre><ul><li>然后再进行部署步骤即可，第一次查看效果需要登录 github 账号，关联授权后，就可以使用评论系统了。</li></ul><h2 id="六、新建文章"><a href="#六、新建文章" class="headerlink" title="六、新建文章"></a>六、新建文章</h2><h3 id="6-1、自动打开本地-Markdown-编辑器"><a href="#6-1、自动打开本地-Markdown-编辑器" class="headerlink" title="6.1、自动打开本地 Markdown 编辑器"></a>6.1、自动打开本地 Markdown 编辑器</h3><p>写新文章时，需要控制台执行 <code>hexo new "文章名字"</code>，这样就会在<code>_posts</code> 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class="language-none"><code class="language-none">var spawn = require('child_process').exec;hexo.on('new', function(data){  spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path);});</code></pre><p>其中 <code>"D:\Program Files\Typorae\Typora.exe"</code> 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 <code>hexo cl &amp;&amp; hexo g -d</code>，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><hr><h3 id="6-2、新建文章插入图片"><a href="#6-2、新建文章插入图片" class="headerlink" title="6.2、新建文章插入图片"></a>6.2、新建文章插入图片</h3><ul><li>打开在hexo根目录下的 _config.yml 配置文件，找到 post_asset_folder 属性，默认为 false 改为 true</li></ul><ul><li>在hexo根目录下执行如下命令</li></ul><pre class="language-none"><code class="language-none">npm install hexo-asset-image</code></pre><p>此时再执行命令 hexo n article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片</p><p>资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</p><pre class="language-none"><code class="language-none">![](img_name.jpg) #文章中的图片资源路径格式</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
