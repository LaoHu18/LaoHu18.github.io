<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven的使用</title>
      <link href="/posts/1029.html"/>
      <url>/posts/1029.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、maven基础知识"><a href="#一、maven基础知识" class="headerlink" title="一、maven基础知识"></a>一、maven基础知识</h2><h3 id="1-1、maven介绍"><a href="#1-1、maven介绍" class="headerlink" title="1.1、maven介绍"></a>1.1、maven介绍</h3><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。</p><p>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。</p><p>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p><p>​              <img src="/posts/1029/1.png"></p><h3 id="1-2-maven的仓库类型"><a href="#1-2-maven的仓库类型" class="headerlink" title="1.2 maven的仓库类型"></a>1.2 maven的仓库类型</h3><p>1.本地仓库 </p><p>2.远程仓库</p><p>①maven中央仓库（地址：<a href="http://repo2.maven.org/maven2/%EF%BC%89">http://repo2.maven.org/maven2/）</a></p><p>②maven私服（公司局域网内的仓库，需要自己搭建）</p><p>③其他公共远程仓库（例如apache提供的远程仓库，地址：<a href="http://repo.maven.apache.org/maven2/%EF%BC%89">http://repo.maven.apache.org/maven2/）</a></p><h3 id="1-3-maven常用命令"><a href="#1-3-maven常用命令" class="headerlink" title="1.3 maven常用命令"></a>1.3 maven常用命令</h3><p>clean：     清理</p><p>compile：编译</p><p>test：        测试</p><p>package：打包</p><p>install：    安装</p><h3 id="1-4-maven坐标书写规范"><a href="#1-4-maven坐标书写规范" class="headerlink" title="1.4 maven坐标书写规范"></a>1.4 maven坐标书写规范</h3><p><img src="/posts/1029/2.png" alt="1559549224408"></p><p>查找依赖坐标：<a href="https://mvnrepository.com/artifact/io.bretty/console-table-builder/1.2">https://mvnrepository.com/artifact/io.bretty/console-table-builder/1.2</a></p><h3 id="1-5-maven的依赖范围"><a href="#1-5-maven的依赖范围" class="headerlink" title="1.5 maven的依赖范围"></a>1.5 maven的依赖范围</h3><h3 id="1-6、仓库配置"><a href="#1-6、仓库配置" class="headerlink" title="1.6、仓库配置"></a>1.6、仓库配置</h3><h4 id="1-6-1、本地仓库配置"><a href="#1-6-1、本地仓库配置" class="headerlink" title="1.6.1、本地仓库配置"></a>1.6.1、本地仓库配置</h4><ol><li>找到Maven文件中conf文件夹下的settings.xml文件并打开</li><li>找到该文件中的<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></li><li>在电脑上创建一个任意文件夹作为本地仓库，并将该文件夹的路径放入步骤2中的<code>&lt;localRepository&gt;文件路径&lt;/localRepository&gt;</code></li></ol><h4 id="1-6-2、配置公共仓库"><a href="#1-6-2、配置公共仓库" class="headerlink" title="1.6.2、配置公共仓库"></a>1.6.2、配置公共仓库</h4><ol><li><p>找到Maven文件中conf文件夹下的settings.xml文件并打开</p></li><li><p>找到该文件中的 <code>&lt;mirrors&gt; &lt;/mirrors&gt;</code></p></li><li><p>将以下阿里云仓库配置添加进去</p><pre class="language-none"><code class="language-none">&lt;mirror&gt;    &lt;id&gt;nexus-aliyun&lt;/id&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;    &lt;name&gt;Nexus aliyun&lt;/name&gt;    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;</code></pre></li></ol><h3 id="1-7、IDEA关联Maven仓库"><a href="#1-7、IDEA关联Maven仓库" class="headerlink" title="1.7、IDEA关联Maven仓库"></a>1.7、IDEA关联Maven仓库</h3><ol><li>打开IDEA工具栏File下的New Project Setup，选择Setting for new Projects</li><li>选中Build下的Build Tools 下的Maven</li><li>设置User setting file为maven安装位置中的setting.xml文件</li><li>设置Local repository为自定义的本地仓库路径</li></ol><h2 id="二、maven的依赖传递"><a href="#二、maven的依赖传递" class="headerlink" title="二、maven的依赖传递"></a>二、maven的依赖传递</h2><h3 id="2-1、什么是依赖传递"><a href="#2-1、什么是依赖传递" class="headerlink" title="2.1、什么是依赖传递"></a>2.1、什么是依赖传递</h3><p>在maven中，依赖是可以传递的，假设存在三个项目，分别是项目A，项目B以及项目C。假设C依赖B，B依赖A，那么我们可以根据maven项目依赖的特征不难推出项目C也依赖A。</p><p><img src="/posts/1029/3.png"></p><p>​                         <img src="/posts/1029/4.png"></p><p>通过上面的图可以看到，我们的web项目直接依赖了spring-webmvc，而spring-webmvc依赖了sping-aop、spring-beans等。最终的结果就是在我们的web项目中间接依赖了spring-aop、spring-beans等。</p><h3 id="2-2、什么是依赖冲突"><a href="#2-2、什么是依赖冲突" class="headerlink" title="2.2、什么是依赖冲突"></a>2.2、什么是依赖冲突</h3><p>由于依赖传递现象的存在， spring-webmvc 依赖 spirng-beans-4.2.4，spring-aop 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4 加入到了工程中，而我们希望 spring-beans-5.0.2 加入工程。这就造成了依赖冲突。</p><p><img src="/posts/1029/5.png"></p><h3 id="2-3、如何解决依赖冲突"><a href="#2-3、如何解决依赖冲突" class="headerlink" title="2.3、如何解决依赖冲突"></a>2.3、如何解决依赖冲突</h3><p>1.使用maven提供的依赖调解原则 </p><pre><code>    第一声明者优先原则</code></pre><p>​     路径近者优先原则</p><p>2.排除依赖</p><p>3.锁定版本 </p><h3 id="2-4、依赖调节原则——第一声明者优先原则"><a href="#2-4、依赖调节原则——第一声明者优先原则" class="headerlink" title="2.4、依赖调节原则——第一声明者优先原则"></a>2.4、依赖调节原则——第一声明者优先原则</h3><p>在 pom 文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</p><p><img src="/posts/1029/6.png"></p><p>结论：通过上图可以看到，spring-aop和spring-webmvc都传递过来了spring-beans，但是因为spring-aop在前面，所以最终使用的spring-beans是由spring-aop传递过来的，而spring-webmvc传递过来的spring-beans则被忽略了。</p><h3 id="2-5、排除依赖"><a href="#2-5、排除依赖" class="headerlink" title="2.5、排除依赖"></a>2.5、排除依赖</h3><p>可以使用exclusions标签将传递过来的依赖排除出去。</p><p><img src="/posts/1029/7.png"></p><h3 id="2-6、版本锁定"><a href="#2-6、版本锁定" class="headerlink" title="2.6、版本锁定"></a>2.6、版本锁定</h3><p>采用直接锁定版本的方法确定依赖jar包的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p><p>版本锁定的使用方式：</p><p>第一步：在dependencyManagement标签中锁定依赖的版本</p><p>第二步：在dependencies标签中声明需要导入的maven坐标</p><p>①在dependencyManagement标签中锁定依赖的版本</p><p><img src="/posts/1029/8.png"></p><p>②在dependencies标签中声明需要导入的maven坐标</p><p><img src="/posts/1029/9.png"></p><h2 id="三、分模块构建maven工程"><a href="#三、分模块构建maven工程" class="headerlink" title="三、分模块构建maven工程"></a>三、分模块构建maven工程</h2><h3 id="3-1、分模块构建maven工程分析"><a href="#3-1、分模块构建maven工程分析" class="headerlink" title="3.1、分模块构建maven工程分析"></a>3.1、分模块构建maven工程分析</h3><p>在现实生活中，汽车厂家进行汽车生产时，由于整个生产过程非常复杂和繁琐，工作量非常大，所以车场都会将整个汽车的部件分开生产，最终再将生产好的部件进行组装，形成一台完整的汽车。</p><p><img src="/posts/1029/12.png"></p><p><img src="/posts/1029/13.png"></p><h3 id="3-2、maven工程的继承"><a href="#3-2、maven工程的继承" class="headerlink" title="3.2、maven工程的继承"></a>3.2、maven工程的继承</h3><p>在Java语言中，类之间是可以继承的，通过继承，子类就可以引用父类中非private的属性和方法。同样，在maven工程之间也可以继承，子工程继承父工程后，就可以使用在父工程中引入的依赖。继承的目的是为了消除重复代码。</p><p><img src="/posts/1029/14.png"></p><h3 id="3-3、maven工程的聚合"><a href="#3-3、maven工程的聚合" class="headerlink" title="3.3、maven工程的聚合"></a>3.3、maven工程的聚合</h3><p>在maven工程的pom.xml文件中可以使用<modules>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。</modules></p><p>例如拆分后的maven工程有多个，如果要进行打包，就需要针对每个工程分别执行打包命令，操作起来非常繁琐。这时就可以使用<modules>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令，其下被聚合的工程就都会被打包了。</modules></p><p><img src="/posts/1029/15.png" alt="1559551000245"></p><h2 id="四、maven私服"><a href="#四、maven私服" class="headerlink" title="四、maven私服"></a>四、maven私服</h2><h3 id="4-1、私服说明"><a href="#4-1、私服说明" class="headerlink" title="4.1、私服说明"></a>4.1、私服说明</h3><p>maven仓库分为本地仓库和远程仓库，而远程仓库又分为maven中央仓库、其他远程仓库和私服（私有服务器）。其中，中央仓库是由maven官方提供的，而私服就需要我们自己搭建了。</p><p>maven私服就是公司局域网内的maven远程仓库，每个员工的电脑上安装maven软件并且连接maven私服，程序员可以将自己开发的项目打成jar并发布到私服，其它项目组成员就可以从私服下载所依赖的jar。私服还充当一个代理服务器的角色，当私服上没有jar包时会从maven中央仓库自动下载。</p><p>nexus 是一个maven仓库管理器（其实就是一个软件），nexus可以充当maven私服，同时nexus还提供强大的仓库管理、构件搜索等功能。</p><h3 id="4-2、搭建maven私服"><a href="#4-2、搭建maven私服" class="headerlink" title="4.2、搭建maven私服"></a>4.2、搭建maven私服</h3><p>①下载nexus</p><p><a href="https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss">https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss</a></p><p>②安装nexus</p><p>将下载的压缩包进行解压，进入bin目录</p><p><img src="/posts/1029/17.png"></p><p>打开cmd窗口并进入上面bin目录下，执行nexus.bat install命令安装服务（注意需要以管理员身份运行cmd命令）</p><p><img src="/posts/1029/18.png"></p><p>③启动nexus</p><p>经过前面命令已经完成nexus的安装，可以通过如下两种方式启动nexus服务：</p><p>在Windows系统服务中启动nexus</p><p><img src="/posts/1029/19.png"></p><p>在命令行执行nexus.bat start命令启动nexus</p><p><img src="/posts/1029/20.png"></p><p>④访问nexus</p><p>启动nexus服务后，访问<a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a></p><p>点击右上角LogIn按钮，进行登录。使用默认用户名admin和密码admin123登录系统</p><p>登录成功后点击左侧菜单Repositories可以看到nexus内置的仓库列表（如下图）</p><p><img src="/posts/1029/21.png"></p><p>nexus仓库类型</p><p>通过前面的仓库列表可以看到，nexus默认内置了很多仓库，这些仓库可以划分为4种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p><p>①hosted，宿主仓库，部署自己的jar到这个类型的仓库，包括Releases和Snapshots两部分，Releases为公司内部发布版本仓库、 Snapshots为公司内部测试版本仓库 </p><p>②proxy，代理仓库，用于代理远程的公共仓库，如maven中央仓库，用户连接私服，私服自动去中央仓库下载jar包或者插件</p><p>③group，仓库组，用来合并多个hosted/proxy仓库，通常我们配置自己的maven连接仓库组</p><p>④virtual(虚拟)：兼容Maven1版本的jar或者插件</p><p><img src="/posts/1029/22.png"></p><p>nexus仓库类型与安装目录对应关系</p><p><img src="/posts/1029/23.png"></p><h3 id="4-3、将项目发布到maven私服"><a href="#4-3、将项目发布到maven私服" class="headerlink" title="4.3、将项目发布到maven私服"></a>4.3、将项目发布到maven私服</h3><p>maven私服是搭建在公司局域网内的maven仓库，公司内的所有开发团队都可以使用。例如技术研发团队开发了一个基础组件，就可以将这个基础组件打成jar包发布到私服，其他团队成员就可以从私服下载这个jar包到本地仓库并在项目中使用。</p><p>将项目发布到maven私服操作步骤如下：</p><ol><li>配置maven的settings.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span></code></pre><p>​      注意：一定要在idea工具中引入的maven的settings.xml文件中配置 </p><ol start="2"><li>配置项目的pom.xml文件</li></ol><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>releases<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/repositories/releases/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">&gt;</span></span></code></pre><ol start="3"><li>执行mvn deploy命令</li></ol><p><img src="/posts/1029/24.png"></p><h3 id="4-4、从私服下载jar到本地仓库"><a href="#4-4、从私服下载jar到本地仓库" class="headerlink" title="4.4、从私服下载jar到本地仓库"></a>4.4、从私服下载jar到本地仓库</h3><p>前面我们已经完成了将本地项目打成jar包发布到maven私服，下面我们就需要从maven私服下载jar包到本地仓库。</p><p>具体操作步骤如下：</p><p>在maven的settings.xml文件中配置下载模板</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>nexus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--是否下载releases构件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--是否下载snapshots构件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Public Repositories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>http://localhost:8081/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">&gt;</span></span></code></pre><p>在maven的settings.xml文件中配置激活下载模板</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">&gt;</span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">&gt;</span></span></code></pre><h2 id="五、将第三方jar安装到本地仓库和maven私服"><a href="#五、将第三方jar安装到本地仓库和maven私服" class="headerlink" title="五、将第三方jar安装到本地仓库和maven私服"></a>五、将第三方jar安装到本地仓库和maven私服</h2><p>在maven工程的pom.xml文件中配置某个jar包的坐标后，如果本地的maven仓库不存在这个jar包，maven工具会自动到配置的maven私服下载，如果私服中也不存在，maven私服就会从maven中央仓库进行下载。</p><p>但是并不是所有的jar包都可以从中央仓库下载到，比如常用的Oracle数据库驱动的jar包在中央仓库就不存在。此时需要到Oracle的官网下载驱动jar包，然后将此jar包通过maven命令安装到我们本地的maven仓库或者maven私服中，这样在maven项目中就可以使用maven坐标引用到此jar包了。</p><h3 id="5-1、将第三方jar安装到本地仓库"><a href="#5-1、将第三方jar安装到本地仓库" class="headerlink" title="5.1、将第三方jar安装到本地仓库"></a>5.1、将第三方jar安装到本地仓库</h3><p>①下载Oracle的jar包（略）</p><p>②mvn install命令进行安装</p><p>​      mvn install:install-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 – </p><p>​      Dversion=10.2.0.4.0 -Dpackaging=jar</p><p>③查看本地maven仓库，确认安装是否成功</p><p><img src="/posts/1029/25.png"></p><h3 id="5-2、将第三方jar安装到maven私服"><a href="#5-2、将第三方jar安装到maven私服" class="headerlink" title="5.2、将第三方jar安装到maven私服"></a>5.2、将第三方jar安装到maven私服</h3><p>①下载Oracle的jar包（略）</p><p>②在maven的settings.xml配置文件中配置第三方仓库的server信息</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>thirdparty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">&gt;</span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">&gt;</span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">&gt;</span></span></code></pre><p>③执行mvn deploy命令进行安装</p><p>​      mvn deploy:deploy-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 –</p><p>​      Dversion=10.2.0.4.0 -Dpackaging=jar –</p><p>​      Durl=<a href="http://localhost:8081/nexus/content/repositories/thirdparty/">http://localhost:8081/nexus/content/repositories/thirdparty/</a> -DrepositoryId=thirdparty</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC基础入门</title>
      <link href="/posts/3377.html"/>
      <url>/posts/3377.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java自学笔记 </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础介绍</title>
      <link href="/posts/8e37.html"/>
      <url>/posts/8e37.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis入门学习</title>
      <link href="/posts/9664.html"/>
      <url>/posts/9664.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、MyBatis简介"><a href="#一、MyBatis简介" class="headerlink" title="一、MyBatis简介"></a>一、MyBatis简介</h3><h4 id="1、原始jdbc存在的问题"><a href="#1、原始jdbc存在的问题" class="headerlink" title="1、原始jdbc存在的问题"></a>1、原始jdbc存在的问题</h4><p>原始jdbc开发存在的问题如下：</p><p>①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能</p><p>②sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。</p><p>③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置</p><p>应对上述问题给出的解决方案：</p><p>①使用数据库连接池初始化连接资源</p><p>②将sql语句抽取到xml配置文件中</p><p>③使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</p><h4 id="2、什么是MyBatis"><a href="#2、什么是MyBatis" class="headerlink" title="2、什么是MyBatis"></a>2、什么是MyBatis</h4><p>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p><p>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p><p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p><h3 id="二、MyBatis快速入门"><a href="#二、MyBatis快速入门" class="headerlink" title="二、MyBatis快速入门"></a>二、MyBatis快速入门</h3><h4 id="1、-MyBatis开发步骤"><a href="#1、-MyBatis开发步骤" class="headerlink" title="1、 MyBatis开发步骤"></a>1、 MyBatis开发步骤</h4><p>MyBatis官网地址：<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a> </p><h5 id="1-1、MyBatis开发步骤："><a href="#1-1、MyBatis开发步骤：" class="headerlink" title="1.1、MyBatis开发步骤："></a>1.1、MyBatis开发步骤：</h5><p>①添加MyBatis的依赖坐标</p><p>②创建Brand数据表</p><p>③编写Brand实体类 </p><p>④编写核心配置文件MyBatis-Config.xml</p><p>⑤编写接口文件BrandMapper</p><p>⑥编写映射文件BrandMapper.xml</p><p>⑦编写获取SqlSession的工具类</p><p>⑧编写测试类</p><h5 id="1-2、添加MyBatis依赖坐标"><a href="#1-2、添加MyBatis依赖坐标" class="headerlink" title="1.2、添加MyBatis依赖坐标"></a>1.2、添加MyBatis依赖坐标</h5><p>在pom文件添加以下依赖</p><pre class="language-java" data-language="java"><code class="language-java">&lt;!--  三个依赖  --&gt;&lt;dependencies&gt;    &lt;!--   mybatis依赖     --&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.5.5&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--    mysql数据库依赖    --&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.48&lt;/version&gt;    &lt;/dependency&gt;    &lt;!--    用于测试的Junit依赖    --&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h5 id="1-3、创建Brand数据表"><a href="#1-3、创建Brand数据表" class="headerlink" title="1.3、创建Brand数据表"></a>1.3、创建Brand数据表</h5><p>创建brand数据表并添加对应数据</p><pre class="language-none"><code class="language-none">create TABLE brand(id int PRIMARY key auto_increment,brandname varchar(20) UNIQUE,companyname VARCHAR(32),ordered int,description VARCHAR(32),status INT);INSERT INTO brand(brandname,companyname,ordered,description,status) VALUES("三只松鼠","三只松鼠有限公司",100,"三只松鼠，好吃不上火",1),("华为","华为技术有限公司",200,"万物互联，鸿蒙系统",0),("小米","小米科技有限公司",300,"为发烧而生",1);</code></pre><h5 id="1-4、创建Brand实体类"><a href="#1-4、创建Brand实体类" class="headerlink" title="1.4、创建Brand实体类"></a>1.4、创建Brand实体类</h5><p>在src/main/java/com/muban/pojo路径下创建Brand实体类</p><pre class="language-java" data-language="java"><code class="language-java">public class Brand {    private Integer id;    private String brandName;    private String companyName;    private Integer ordered;    private String description;    private Integer status;//此处省略get、set以及构造方法，且数据表中的字段名与实体类中的属性名有所差别}</code></pre><h5 id="1-5、编写核心配置文件MyBatis-Config-xml"><a href="#1-5、编写核心配置文件MyBatis-Config-xml" class="headerlink" title="1.5、编写核心配置文件MyBatis-Config.xml"></a>1.5、编写核心配置文件MyBatis-Config.xml</h5><p>在src/main/resources/路径下添加mybatis-config.xml核心配置文件</p><pre class="language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--configuration核心配置文件--&gt;&lt;configuration&gt;    &lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;    &lt;environments default="development"&gt;        &lt;environment id="development"&gt;            &lt;transactionManager type="JDBC"/&gt;            &lt;!--数据库连接信息--&gt;            &lt;dataSource type="POOLED"&gt;                &lt;!--驱动信息--&gt;                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;                &lt;!--     tb_brand代表连接的数据库           --&gt;                &lt;property name="url" value="jdbc:mysql://localhost:3306/tb_brand?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useServerPrepStmts=true"/&gt;                &lt;property name="username" value="root"/&gt;                &lt;property name="password" value="123456"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!-- 注意每个mapper.xml都要在此处注册 --&gt;    &lt;!--加载sql映射文件--&gt;    &lt;mappers&gt;        &lt;!--写入mapper文件的路径:有两种方法        1、通过mapper resource获取其路径，其设置的是mapper文件的单一路径        &lt;mapper resource="com/muban/Mapper/BrandMapper.xml"/&gt;        2、通过package name获取mapper文件的上一包名，直接扫描该包名下的所有mapper文件--&gt;        &lt;package name="com.muban.Mapper"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h5 id="1-6、创建BrandMapper接口文件"><a href="#1-6、创建BrandMapper接口文件" class="headerlink" title="1.6、创建BrandMapper接口文件"></a>1.6、创建BrandMapper接口文件</h5><p>在src/main/java/com/muban/Mapper路径下创建BrandMapper.java接口文件</p><pre class="language-java" data-language="java"><code class="language-java">public interface BrandMapper {}</code></pre><h5 id="1-7、创建BrandMapper-xml映射文件"><a href="#1-7、创建BrandMapper-xml映射文件" class="headerlink" title="1.7、创建BrandMapper.xml映射文件"></a>1.7、创建BrandMapper.xml映射文件</h5><p>1、在src/main/resources路径下新建包名，且包名与BrandMapper接口文件的包名一致，包名为com/muban/Mapper</p><p>2、在该路径下创建BrandMapper.xml映射文件</p><pre class="language-java" data-language="java"><code class="language-java">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--namespace:名称空间,填写Mapper接口的路径--&gt;&lt;mapper namespace="com.muban.Mapper.BrandMapper"&gt;    &lt;!--数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据    需要使用resultMap:id代表该resultMap的别名，type代表返回的实体类--&gt;    &lt;resultMap id="BrandresultMap" type="com.muban.pojo.Brand"&gt;        &lt;!--column代表数据表中的一般字段名，还有一个id代表数据表中的主键字段名；property代表对应实体类中属性名称 --&gt;        &lt;result column="brandname" property="brandName"&gt;&lt;/result&gt;        &lt;result column="companyname" property="companyName"&gt;&lt;/result&gt;    &lt;/resultMap&gt;&lt;/mapper&gt;</code></pre><p>3、映射文件注意事项</p><p>当数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据，可使用以上方法进行操作</p><h5 id="1-8、编写获取SqlSession的工具类"><a href="#1-8、编写获取SqlSession的工具类" class="headerlink" title="1.8、编写获取SqlSession的工具类"></a>1.8、编写获取SqlSession的工具类</h5><p>在src/main/java/com/muban/utils路径下编写获取SqlSession的工具类</p><pre class="language-java" data-language="java"><code class="language-java">public class MyBatisUtil {    private static SqlSessionFactory sqlSessionFactory;    static {        try {            //使用MyBatis第一步：获取sqlSessionFactory对象            String resource = "mybatis-config.xml";            InputStream inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        } catch (IOException e) {            e.printStackTrace();        }    }    //既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    // SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。    public static SqlSession getSqlSession(){        return sqlSessionFactory.openSession();    }}</code></pre><h5 id="1-9、编写测试类"><a href="#1-9、编写测试类" class="headerlink" title="1.9、编写测试类"></a>1.9、编写测试类</h5><p>在src/test/java/com/muban/Mapper路径下创建BrandMapperTest.java测试类</p><pre class="language-Java" data-language="Java"><code class="language-Java">public class BrandMapperTest {    //封装sqlSession对象    private SqlSession sqlSession;    }</code></pre><h4 id="2、MyBatis实现CRUD操作"><a href="#2、MyBatis实现CRUD操作" class="headerlink" title="2、MyBatis实现CRUD操作"></a>2、MyBatis实现CRUD操作</h4><h5 id="2-1、MyBatis的所有数据查询操作"><a href="#2-1、MyBatis的所有数据查询操作" class="headerlink" title="2.1、MyBatis的所有数据查询操作"></a>2.1、MyBatis的所有数据查询操作</h5><p>1、在BrandMapper接口文件中添加查询所有数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//查询所有，返回一个集合List&lt;Brand&gt; selectAll();</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;!--  resultType为查询数据后返回的数据类型  --&gt;&lt;select id="selectAll" resultType="com.muban.pojo.Brand"&gt;    select * from brand;&lt;/select&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic void SelectAll(){    try {        //获取sqlSession        sqlSession = MyBatisUtil.getSqlSession();        //获取对应的mapper对象        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);        List&lt;Brand&gt; brands = mapper.selectAll();        for (Brand brand : brands) {            System.out.println(brand);        }    } finally {        //关闭sqlSession        sqlSession.close();    }}</code></pre><h5 id="2-2、MyBatis的数据插入操作"><a href="#2-2、MyBatis的数据插入操作" class="headerlink" title="2.2、MyBatis的数据插入操作"></a>2.2、MyBatis的数据插入操作</h5><p>1、在BrandMapper接口文件中添加插入数据的方法</p><pre class="language-Java" data-language="Java"><code class="language-Java">int addAll(Brand brand);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;insert id="addAll"&gt;    insert into brand    values (null, #{brandName}, #{companyName}, #{ordered}, #{description}, #{status})&lt;/insert&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test   public void addAll(){       try {           //获取sqlSession           sqlSession = MyBatisUtil.getSqlSession();           //获取对应的mapper对象           BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);           //封装需要添加的Brand对象           Brand brand = new Brand(null,"三星","三星科技有限公司",300,"三星财团",0);           //执行添加操作           int i = mapper.addAll(brand);           //提交事务           sqlSession.commit();           System.out.println("输出返回值看是否添加成功，返回值为1则添加成功"+i);       } finally {           //关闭sqlSession           sqlSession.close();       }   }</code></pre><p>4、注意事项</p><p>**插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即sqlSession.commit() </p><h5 id="2-3、MyBatis的数据删除操作"><a href="#2-3、MyBatis的数据删除操作" class="headerlink" title="2.3、MyBatis的数据删除操作"></a>2.3、MyBatis的数据删除操作</h5><p>1、在BrandMapper接口文件中添加通过id删除数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过（指定条件）id删除int deleteById(Integer id);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;delete id="deleteById"&gt;        delete from brand where id = #{id};    &lt;/delete&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test   public void deleteById(){       try {           //获取sqlSession           sqlSession = MyBatisUtil.getSqlSession();           //获取对应的mapper对象           BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);           //执行删除操作           int i = mapper.deleteById(17);           //提交事务           sqlSession.commit();           System.out.println("输出返回值看是否删除成功"+i);       } finally {           //关闭sqlSession           sqlSession.close();       }   }</code></pre><h5 id="2-4、MyBatis的数据更改操作"><a href="#2-4、MyBatis的数据更改操作" class="headerlink" title="2.4、MyBatis的数据更改操作"></a>2.4、MyBatis的数据更改操作</h5><p>1、在BrandMapper接口文件中添加通过id更改数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过（指定条件）id更改int updateById(Brand brand);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;update id="updateById"&gt;        update brand set brandname  = #{brandName},companyname=#{companyName},ordered=#{ordered},description=#{description},status=#{status} where id = #{id};    &lt;/update&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test    public void updateById(){        try {            //获取sqlSession            sqlSession = MyBatisUtil.getSqlSession();            //获取对应的mapper对象            BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);            //封装需要更改的Brand对象            Brand brand = new Brand(1,"三只松鼠","三只松鼠有限公司",300,"你怎么这么好吃",0);            //执行更改操作            int i = mapper.updateById(brand);            //提交事务            sqlSession.commit();            System.out.println("输出返回值看是否更改成功"+i);        } finally {            //关闭sqlSession            sqlSession.close();        }    }</code></pre><h5 id="2-5、MyBatis通过Map集合进行操作"><a href="#2-5、MyBatis通过Map集合进行操作" class="headerlink" title="2.5、MyBatis通过Map集合进行操作"></a>2.5、MyBatis通过Map集合进行操作</h5><p>1、在BrandMapper接口文件中添加通过map集合更改数据的方法</p><pre class="language-java" data-language="java"><code class="language-java">//通过Map进行操作int updateId(Map&lt;String,Integer&gt; map);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;!--  使用map进行操作时，#{}内的内容只需与定义的map中的key相同即可  --&gt;    &lt;update id="updateId"&gt;        update brand set status=#{status} where id = #{updateid};    &lt;/update&gt;</code></pre><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Test    public void UpdateId(){        try {            //获取sqlSession            sqlSession = MyBatisUtil.getSqlSession();            //获取对应的mapper对象            BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);            //创建对应的map集合            Map&lt;String,Integer&gt; map= new HashMap&lt;&gt;();            map.put("updateid",2);            map.put("status",1);            //执行更改操作            int i = mapper.updateId(map);            //提交事务            sqlSession.commit();            System.out.println("输出返回值看是否更改成功"+i);        } finally {            //关闭sqlSession            sqlSession.close();        }    }</code></pre><h5 id="2-6、MyBatis实现模糊查询"><a href="#2-6、MyBatis实现模糊查询" class="headerlink" title="2.6、MyBatis实现模糊查询"></a>2.6、MyBatis实现模糊查询</h5><p>1、在BrandMapper接口文件中添加模糊查询的方法</p><pre class="language-java" data-language="java"><code class="language-java">//模糊查询，存在sq注入问题Brand selectById1(Integer id);</code></pre><p>2、在BrandMapper.xml文件中添加对应的sql语句</p><pre class="language-none"><code class="language-none">&lt;select id="selectById1" resultType="com.muban.pojo.Brand"&gt;        select * from brand  &lt;where&gt; brandname like "%"#{value}"%"&lt;/where&gt;    &lt;/select&gt;</code></pre><p>注意事项：模糊查询中存在sql注入的问题</p><p>解决方法：</p><p>①在sql拼接中使用通配符%  %（常见）；</p><p>②java代码执行时，添加传递通配符%   %；</p><p>3、在测试类中添加测试方法</p><pre class="language-java" data-language="java"><code class="language-java">@Testpublic void selectById1(){    try {        //获取sqlSession        sqlSession = MyBatisUtil.getSqlSession();        //获取对应的mapper对象        BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);        //执行模糊查询操作        Brand brand = mapper.selectById1("华");        System.out.println("输出返回值对象"+brand);    } finally {        //关闭sqlSession        sqlSession.close();    }}</code></pre><h3 id="三、配置解析"><a href="#三、配置解析" class="headerlink" title="三、配置解析"></a>三、配置解析</h3><h4 id="1、核心配置文件MyBatis-Config-xml"><a href="#1、核心配置文件MyBatis-Config-xml" class="headerlink" title="1、核心配置文件MyBatis-Config.xml"></a>1、核心配置文件MyBatis-Config.xml</h4><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><pre class="language-none"><code class="language-none">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）</code></pre><h5 id="1-1、环境配置（environments）"><a href="#1-1、环境配置（environments）" class="headerlink" title="1.1、环境配置（environments）"></a>1.1、环境配置（environments）</h5><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--数据库连接信息--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--驱动信息--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--     tb_brand代表连接的数据库           --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       添加对应的连接信息         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span></code></pre><p>mybatis默认事务管理器是JDBC，连接池POOLED</p><h5 id="1-2、属性（properties）"><a href="#1-2、属性（properties）" class="headerlink" title="1.2、属性（properties）"></a>1.2、属性（properties）</h5><p>以下这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token comment">&lt;!--     tb_brand代表连接的数据库           --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/tb_brand?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useServerPrepStmts=true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><p>动态配置过程：</p><p>1、在recourse目录下创建对应的配置文件mybatis-config.properties</p><pre class="language-none"><code class="language-none">driver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/tb_brand?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useServerPrepStmts=trueusername=rootpassword=123456</code></pre><p>2、在核心配置文件mybatis-config.xml文件中引入配置文件对应键值</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  引入mybatis-config.properties配置文件 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mybatis-config.properties<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--environments:配置数据库连接环境信息，可以配置多个环境信息，通过default来切换--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-3、设置（settings）"><a href="#1-3、设置（settings）" class="headerlink" title="1.3、设置（settings）"></a>1.3、设置（settings）</h5><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><p><img src="/posts/9664/1.png"></p><p><img src="/posts/9664/2.png"></p><h5 id="1-4、类型别名（typeAliases）"><a href="#1-4、类型别名（typeAliases）" class="headerlink" title="1.4、类型别名（typeAliases）"></a>1.4、类型别名（typeAliases）</h5><p>类型别名可为 Java 实体类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><p>1、方法一：在MyBatis核心配置文件中设置</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  给实体类设置别名  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo.Brand<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span></code></pre><p>2、方法二：指定对应的包名，MyBatis搜索对应包下的Java Bean，其默认别名为该类的类名，且首字母小写</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-5、映射器（mappers）"><a href="#1-5、映射器（mappers）" class="headerlink" title="1.5、映射器（mappers）"></a>1.5、映射器（mappers）</h5><p>每个mapper.xml都要注册，加载sql映射文件</p><p>方法一：</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!--1、通过mapper resource获取其路径，其设置的是mapper文件的单一路径--&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/muban/Mapper/BrandMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><p>方法二：使用该方法时，其接口文件和映射文件的路径名必须同名，且必须在同一个包下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--2、通过package name获取mapper文件的上一包名，直接扫描该包名下的所有mapper文件--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.Mapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><p>方法三：使用该方法时，其接口文件和映射文件的路径名必须同名，且必须在同一个包下</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>   <span class="token comment">&lt;!-- 3、使用映射器接口实现类的完全限定类名  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.Mapper.BrandMapper<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span></code></pre><h5 id="1-6、生命周期和作用域"><a href="#1-6、生命周期和作用域" class="headerlink" title="1.6、生命周期和作用域"></a>1.6、生命周期和作用域</h5><p>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的并发问题</p><p><strong>SqlSessionFactoryBuilder</strong></p><ul><li>一旦创建了SqlSessionFactoryBuilder，就不再需要他了</li><li>局部变量</li></ul><p><strong>SqlSessionFactory</strong></p><ul><li>说白了就是可以想像为：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在运行期间一直存在，没有任何理由丢弃或重新创建一个实例</li><li>SqlSessionFactory的最佳作用域是应用作用域</li><li>最简单的就是使用单例模式或者静态单例模式</li></ul><p><strong>SqlSession</strong></p><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭，否则资源被占用</li></ul><h4 id="2、解决属性名和字段名不一致的问题"><a href="#2、解决属性名和字段名不一致的问题" class="headerlink" title="2、解决属性名和字段名不一致的问题"></a>2、解决属性名和字段名不一致的问题</h4><p>当数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据，会出现数据不能自动封装为实体类的问题</p><p>解决方法：</p><ul><li><p>起别名：在sql语句中起别名</p></li><li><p>resultMap</p><p>结果集映射</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--数据库表的字段名和实体类的属性名称不一样时，不能自动封装数据需要使用resultMap:id代表该resultMap的别名，type代表返回的实体类--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BrandresultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.muban.pojo.Brand<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--column代表数据表中的一般字段名，还有一个id代表数据表中的主键字段名；property代表对应实体类中属性名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>companyName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>result</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span></code></pre></li></ul><h3 id="四、日志"><a href="#四、日志" class="headerlink" title="四、日志"></a>四、日志</h3><h4 id="1、日志工厂"><a href="#1、日志工厂" class="headerlink" title="1、日志工厂"></a>1、日志工厂</h4><p>如果一个数据库操作，出现了异常，我们需要排错，日志就是最好的助手</p><p><img src="/posts/9664/3.png"></p><p>在核心配置文件MyBatis-Config.xml文件中配置日志</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  配置标准日志  --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span></code></pre><h4 id="2、LOG4J（常用）"><a href="#2、LOG4J（常用）" class="headerlink" title="2、LOG4J（常用）"></a>2、LOG4J（常用）</h4><h3 id="五、分页"><a href="#五、分页" class="headerlink" title="五、分页"></a>五、分页</h3><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><h4 id="1、使用Limit进行分页"><a href="#1、使用Limit进行分页" class="headerlink" title="1、使用Limit进行分页"></a>1、使用Limit进行分页</h4><ul><li>```<br>语法：SELECT * FROM brand LIMIT startIndex,pageSize;<br>startIndex：其实数据下标<br>pageSize：每页显示的数据量<pre class="language-none"><code class="language-none">#### 2、使用RowBounds进行分页通过java代码层面实现分页，使用较少，前期进行使用#### 3、分页插件 PageHelper了解即可### 六、使用注解开发#### 1、什么叫面向接口编程**关于接口的理解**- 接口从更深层次的理解，应是定义（规范、约束）与实现（名实分离的原则）的分离- 接口的本身反映了系统设计人员对系统的抽象理解- 接口应有两类：  第一类是对一个个体的抽象，它可对应为一个抽象体（abstract class）  第二类是对一个个体某一个方面的抽象，即形成一个抽象面（interface）- 一个体可能有多个抽象面，抽象体和抽象面是有区别的**三个面向的区别**- 面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法- 面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现- 接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题，更多的体现就是对系统整体的架构#### 2、使用注解开发注解在接口上实现```java//语法@Select("sql语句")接口方法</code></pre></li></ul><p>本质：反射机制实现</p><p>底层：动态代理</p><h4 id="3、使用注解开发实现CRUD"><a href="#3、使用注解开发实现CRUD" class="headerlink" title="3、使用注解开发实现CRUD"></a>3、使用注解开发实现CRUD</h4><p><strong>实现自动提交事务</strong></p><pre class="language-java" data-language="java"><code class="language-java">//在定义MyBatisUtil工具类时，将参数设置为TRUE，可将其变更为自动提交事务public static SqlSession getSqlSession(){    return sqlSessionFactory.openSession(true);}</code></pre><p><strong>利用注解实现CRUD</strong></p><pre class="language-java" data-language="java"><code class="language-java">//使用注解进行开发public interface BrandMapper {    //查询所有，返回一个集合    @Select("select * from brand")    List&lt;Brand&gt; selectAll();    //增加    @Insert("insert into brand values (null, #{brandName}, #{companyName}, #{ordered}, #{description}, #{status})")    int addAll(Brand brand);    //通过（指定条件）id删除    @Delete("delete from brand where id = #{id}")    int deleteById(@Param("id") Integer id);    //通过（指定条件）id更改    @Update("update brand set brandname = #{brandName},companyname=#{companyName},ordered=#{ordered}, description=#{description},status=#{status} where id = #{id};")    int updateById(Brand brand);}</code></pre><p><strong>关于@Param(“”)</strong></p><pre class="language-none"><code class="language-none">/**根据条件进行查询 * 多条件查询时，参数接收方法： *      1、散装参数：方法中有多个参数，需要使用@param（“SQL参数占位符名称”） 参数类型 参数 的方法 *      2、实体类封装参数：保证SQL语句中的参数占位符名和实体类的属性名对应即可 *      3、map集合：保证SQL语句中的参数占位符名和map集合的键的名称对应上即可 * @return */</code></pre><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型，可以忽略，但是建议加上</li></ul><h3 id="七、连表查询"><a href="#七、连表查询" class="headerlink" title="七、连表查询"></a>七、连表查询</h3><h4 id="1、多对一连表查询"><a href="#1、多对一连表查询" class="headerlink" title="1、多对一连表查询"></a>1、多对一连表查询</h4><ul><li><p>多对一：例如对于学生而言，多个学生对应一个老师</p></li><li><p><strong>创建一个学生表和老师表</strong></p></li></ul><pre class="language-none"><code class="language-none">CREATE TABLE teacher(id INT(10) NOT NULL,name VARCHAR(30) DEFAULT NULL,PRIMARY KEY(id))ENGINE = INNODB DEFAULT CHARSET = utf8;INSERT INTO teacher(id,name) VALUES (1,'秦老师');CREATE TABLE student (id INT(10) NOT NULL,name VARCHAR(30) DEFAULT NULL,tid INT(10) DEFAULT NULL,PRIMARY KEY(id),KEY fktid (tid),CONSTRAINT fktid FOREIGN KEY(tid) REFERENCES teacher (id))ENGINE = INNODB DEFAULT CHARSET = utf8;INSERT INTO student (id,name,tid) VALUES (1,'小明',1),(2,'小红',1),(3,'小张',1),(4,'小李',1),(5,'小王',1)</code></pre><ul><li><strong>创建测试环境</strong></li></ul><p><img src="/posts/9664/4.png"></p><p><img src="/posts/9664/5.png">    <img src="/posts/9664/6.png"></p><ul><li><strong>按照查询嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--  按照查询嵌套处理  --&gt;&lt;select id="selectAll" resultMap="StudentTeacher"&gt;    select * from student;&lt;/select&gt;&lt;resultMap id="StudentTeacher" type="com.duoduiyi.pojo.student"&gt;    &lt;result property="id" column="id"/&gt;    &lt;result property="name" column="name"/&gt;    &lt;!--    复杂的属性，我们需要单独处理；对象 association  集合：collection     javaType：指定属性的类型；  集合中的泛型信息，我们使用ofType获取--&gt;    &lt;association property="teacher" column="tid" javaType="com.duoduiyi.pojo.teacher" select="getTeacher"/&gt;&lt;/resultMap&gt;&lt;select id="getTeacher" resultType="com.duoduiyi.pojo.teacher"&gt;    select * from teacher where id = #{tid};&lt;/select&gt;</code></pre><ul><li><strong>按照结果嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--按照结果嵌套处理--&gt;&lt;select id="selectAll1" resultMap="StudentTeacher1"&gt;    select student.id sid, student.name sname, teacher.name tname    from teacher, student    where student.tid = teacher.id;&lt;/select&gt;&lt;resultMap id="StudentTeacher1" type="com.duoduiyi.pojo.student"&gt;    &lt;result property="id" column="sid"/&gt;    &lt;result property="name" column="sname"/&gt;    &lt;association property="teacher" javaType="com.duoduiyi.pojo.teacher"&gt;        &lt;result property="name" column="tname"/&gt;    &lt;/association&gt;&lt;/resultMap&gt;</code></pre><h4 id="2、一对多连表查询"><a href="#2、一对多连表查询" class="headerlink" title="2、一对多连表查询"></a>2、一对多连表查询</h4><ul><li><p>一对多：例如对老师而言，一个老师对应多个学生</p></li><li><p><strong>创建测试环境</strong></p></li></ul><p><img src="/posts/9664/7.png"></p><p><img src="/posts/9664/8.png">    <img src="/posts/9664/9.png"></p><ul><li><strong>按照查询嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!-- 按照查询嵌套处理   --&gt;&lt;select id="selectAll2" resultMap="TeacherStudent1"&gt;    select *    from teacher    where id = #{id};&lt;/select&gt;&lt;resultMap id="TeacherStudent1" type="teacher"&gt;    &lt;result property="id" column="id"/&gt;    &lt;result property="name" column="name"/&gt;    &lt;collection property="studentList" column="id" javaType="ArrayList" ofType="student" select="getStudent"/&gt;&lt;/resultMap&gt;&lt;select id="getStudent" resultType="student"&gt;    select student.id, student.name    from student    where tid = #{id};&lt;/select&gt;</code></pre><ul><li><strong>按照结果嵌套处理</strong></li></ul><pre class="language-none"><code class="language-none">&lt;!--  按照结果嵌套处理进行连表查询  --&gt;&lt;select id="selectAll1" resultMap="TeacherStudent"&gt;    select teacher.id tid, teacher.name tname, student.id sid, student.name sname    from student, teacher    where student.tid = teacher.id and teacher.id = #{id};&lt;/select&gt;&lt;resultMap id="TeacherStudent" type="teacher"&gt;    &lt;result property="id" column="tid"/&gt;    &lt;result property="name" column="tname"/&gt;    &lt;collection property="studentList" ofType="student"&gt;        &lt;result property="id" column="sid"/&gt;        &lt;result property="name" column="sname"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;</code></pre><h3 id="八、动态SQL"><a href="#八、动态SQL" class="headerlink" title="八、动态SQL"></a>八、动态SQL</h3><ul><li><p><strong>什么是动态SQL：动态SQL就是根据不同的条件生成不同的SQL语句</strong></p></li><li><p><strong>搭建测试环境</strong></p><ol><li><p>创建数据表：创建一个博客用户表，包括博客id、博客信息、博客作者、博客创建时间、博客点击量</p><pre class="language-none"><code class="language-none">CREATE TABLE blog (id VARCHAR(50),title VARCHAR(100),author VARCHAR(30),createtime datetime,views int(30))ENGINE = INNODB DEFAULT CHARSET = utf8;</code></pre></li><li><p>创建java测试环境</p><p><img src="/posts/9664/10.png"></p></li></ol></li></ul><h4 id="1、动态SQL之if标签"><a href="#1、动态SQL之if标签" class="headerlink" title="1、动态SQL之if标签"></a>1、动态SQL之if标签</h4><pre class="language-none"><code class="language-none">&lt;!--  动态SQL之if标签，条件选择  --&gt;&lt;select id="selectif" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog    &lt;where&gt;1 = 1        &lt;if test="title != null"&gt;            and title = #{title}        &lt;/if&gt;        &lt;if test="author != null"&gt;            and author = #{author}        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h4 id="2、动态SQL之choose标签"><a href="#2、动态SQL之choose标签" class="headerlink" title="2、动态SQL之choose标签"></a>2、动态SQL之choose标签</h4><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><pre class="language-none"><code class="language-none">&lt;!--  动态SQL之choose标签  --&gt;&lt;select id="selectchoose" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog where    &lt;choose&gt;        &lt;when test="title != null"&gt;            title = #{title}        &lt;/when&gt;        &lt;when test="views != null"&gt;            views = #{views}        &lt;/when&gt;        &lt;otherwise&gt;            1=1        &lt;/otherwise&gt;    &lt;/choose&gt;&lt;/select&gt;</code></pre><h4 id="3、动态SQL之foreach标签"><a href="#3、动态SQL之foreach标签" class="headerlink" title="3、动态SQL之foreach标签"></a>3、动态SQL之foreach标签</h4><pre class="language-none"><code class="language-none">&lt;!-- 动态SQL之foreach标签  collection:传入集合  item：遍历时的变量名 open：sql语句开头  separator：sql语句拼接的中间 close：sql语句结尾 --&gt;&lt;select id="selectforeach" resultType="com.dtsql.pojo.Blog"&gt;select * from blog&lt;where&gt;    &lt;foreach collection="titles" item="title" open="(" separator="or" close=")"&gt;        title = #{title}    &lt;/foreach&gt;&lt;/where&gt;&lt;/select&gt;</code></pre><h4 id="4、SQL片段"><a href="#4、SQL片段" class="headerlink" title="4、SQL片段"></a>4、SQL片段</h4><p>有的时候，我们可能会将某些功能抽取出来，方便复用</p><pre class="language-none"><code class="language-none">&lt;!--  使用sql标签抽取公共部分  --&gt;&lt;sql id="sqlif"&gt;    &lt;if test="title != null"&gt;        and title = #{title}    &lt;/if&gt;    &lt;if test="author != null"&gt;        and author = #{author}    &lt;/if&gt;&lt;/sql&gt;&lt;!--  动态SQL之if标签，条件选择  --&gt;&lt;select id="selectif" resultType="com.dtsql.pojo.Blog"&gt;    select * from blog    &lt;where&gt;1 = 1        &lt;!-- 使用include标签引用抽取部分 --&gt;        &lt;include refid="sqlif"&gt;&lt;/include&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h3 id="九、缓存"><a href="#九、缓存" class="headerlink" title="九、缓存"></a>九、缓存</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><ol><li>什么是缓存？<ul><li>存在内存中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户查询数据就不用从磁盘上查询，在缓存中查询，从而提高查询效率，解决高并发系统的性能问题</li></ul></li><li>为什么要用缓存？<ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率</li></ul></li><li>什么样的数据能使用缓存？<ul><li>经常查询且不经常改变的数据</li></ul></li></ol><h4 id="2、MyBatis缓存"><a href="#2、MyBatis缓存" class="headerlink" title="2、MyBatis缓存"></a>2、MyBatis缓存</h4><ul><li>MyBatis包含一个非常强大的查询缓存特性，他可以非常方便的定制和配置缓存，缓存可以较大的提升查询效率</li><li>MyBatis系统中默认定义了两级缓存<ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache，我们可以通过实现Cache接口来定义二级缓存</li></ul></li></ul><h4 id="3、一级缓存"><a href="#3、一级缓存" class="headerlink" title="3、一级缓存"></a>3、一级缓存</h4><ul><li>一级缓存也叫本地缓存：SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放到本地缓存中</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要在查询数据库</li></ul></li><li>缓存失效的情况<ol><li>查询不同的东西</li><li>增删改操作，可能会改变原有的数据，所以必定会刷新缓存</li><li>查询不同的Mapper.xml</li><li>手动清理缓存</li></ol></li><li>一级缓存默认开启</li></ul><h4 id="4、二级缓存"><a href="#4、二级缓存" class="headerlink" title="4、二级缓存"></a>4、二级缓存</h4><ul><li><p>二级缓存也叫全局缓存，一级缓存的作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存</p></li><li><p>工作机制</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了，但是我们想要的是，会话关闭了，一级缓存中的数据会保存到二级缓存中</li><li>新的会话查询信息，就可以从二级缓存中获取内容</li><li>不同的mapper查出的数据会放在自己对应的缓存中</li></ul></li><li><p>全局的二级缓存需要手动开启，开启步骤：</p><ol><li><p>在mybatis核心配置文件mybatis-config.xml文件中开启全局缓存</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>在需要开启二级缓存的mapper映射文件mapper.xml文件中设置</p><pre class="language-xml" data-language="xml"><code class="language-xml">配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span><span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span><span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span><span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span></code></pre><p>可用的清除策略有：</p><ul><li><code>LRU</code> – 最近最少使用：移除最长时间不被使用的对象。</li><li><code>FIFO</code> – 先进先出：按对象进入缓存的顺序来移除它们。</li><li><code>SOFT</code> – 软引用：基于垃圾回收器状态和软引用规则移除对象。</li><li><code>WEAK</code> – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。</li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门操作</title>
      <link href="/posts/2cb5.html"/>
      <url>/posts/2cb5.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul><li><p>项目的版本管理：在项目的开发过程中，项目每开发到一个关键节点就会对项目进行备份，这个备份就是项目的一个版本</p></li><li><p>Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS） ，分为本地仓库和远程仓库：</p><ul><li>本地仓库：是在开发人员自己电脑上的Git仓库        </li><li>远程仓库：是在远程服务器上的Git仓库</li><li>Clone：克隆，就是将远程仓库复制到本地</li><li>Push：推送，就是将本地仓库代码上传到远程仓库</li><li>Pull：拉取，就是将远程仓库代码下载到本地仓库</li></ul></li></ul><p><img src="/posts/2cb5/1.png"></p><h3 id="1-2、Git工作流程"><a href="#1-2、Git工作流程" class="headerlink" title="1.2、Git工作流程"></a>1.2、Git工作流程</h3><ul><li>工作流程如下：</li></ul><ol><li>从远程仓库中克隆代码到本地仓库</li><li>从本地仓库中checkout代码然后进行代码修改</li><li>在提交前先将代码提交到暂存区</li><li>提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li>修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</li></ol><p><img src="/posts/2cb5/2.png"></p><h3 id="1-3、Git下载与安装"><a href="#1-3、Git下载与安装" class="headerlink" title="1.3、Git下载与安装"></a>1.3、Git下载与安装</h3><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>检查是否安装成功：进入cmd。输入git –version</p><h3 id="1-4、架构体系"><a href="#1-4、架构体系" class="headerlink" title="1.4、架构体系"></a>1.4、架构体系</h3><ul><li>工作空间（workspace）：存放项目代码的根目录</li><li>版本仓库（repository）：存放项目历史版本的目录，就是在工作空间执行git init指令后，在工作空间生成的.git目录</li><li>暂存区（index）：就是版本库用于临时存储更新的缓存空间</li></ul><h2 id="二、Git常用指令"><a href="#二、Git常用指令" class="headerlink" title="二、Git常用指令"></a>二、Git常用指令</h2><p><img src="/posts/2cb5/3.png"></p><h3 id="2-1、环境配置"><a href="#2-1、环境配置" class="headerlink" title="2.1、环境配置"></a>2.1、环境配置</h3><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p><ul><li><p><strong>设置用户信息</strong> </p><ul><li>git config –global user.name “你的用户名”</li><li>git config –global user.email “你的email地址”</li></ul></li><li><p><strong>查看配置信息</strong></p><ul><li>git config –list</li><li>git config user.name</li></ul></li></ul><p>通过上面的命令设置的信息会保存在<code>C:\Users\&lt;username&gt;\.gitconfig</code>文件中</p><h3 id="2-2、获取Git仓库"><a href="#2-2、获取Git仓库" class="headerlink" title="2.2、获取Git仓库"></a>2.2、获取Git仓库</h3><ul><li><strong>获取Git仓库通常有两种方式：</strong><ul><li>  在本地初始化一个Git仓库</li><li>  从远程仓库克隆</li></ul></li></ul><h4 id="2-2-1、在本地初始化仓库"><a href="#2-2-1、在本地初始化仓库" class="headerlink" title="2.2.1、在本地初始化仓库"></a>2.2.1、在本地初始化仓库</h4><ul><li><strong>初始化步骤：</strong><ul><li>在合适的磁盘目录下创建一个文件夹，作为我们的工作空间</li><li>进入工作空间目录，鼠标右键选择<code>Git Bash Here</code></li><li>执行命令<code>git init</code></li></ul></li></ul><p>若在工作空间下见到一个<code>.git</code>文件夹（此文件夹为隐藏文件夹）则说明Git仓库创建成功</p><h4 id="2-2-2、从远程仓库克隆"><a href="#2-2-2、从远程仓库克隆" class="headerlink" title="2.2.2、从远程仓库克隆"></a>2.2.2、从远程仓库克隆</h4><p>可以通过Git提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p><p>在新建一个工作空间后，输入命令：<code>git clone 远程Git仓库地址</code> ，即可将远程仓库克隆到本地</p><h3 id="2-3、Git工作目录下文件的两种状态"><a href="#2-3、Git工作目录下文件的两种状态" class="headerlink" title="2.3、Git工作目录下文件的两种状态"></a>2.3、Git工作目录下文件的两种状态</h3><ul><li><strong>Git工作目录下的文件存在两种状态：</strong><ul><li>  untracked 未跟踪（未被纳入版本控制）</li><li>  tracked 已跟踪（被纳入版本控制）</li><li>Unmodified 未修改状态</li><li>Modified 已修改状态</li><li>Staged 已暂存状态</li></ul></li></ul><p>这些文件的状态会随着我们执行Git的命令发生变化</p><h3 id="2-4、本地仓库操作"><a href="#2-4、本地仓库操作" class="headerlink" title="2.4、本地仓库操作"></a>2.4、本地仓库操作</h3><ul><li><p>查看版本库状态：<code>git status</code>，也可以使用<code>git status -s</code>使得输出信息更简洁</p></li><li><p>将工作空间的修改添加到暂存区：</p><ul><li>将工作空间中的某个文件添加：<code>git add 文件名</code></li><li>将工作空间中的所有文件添加：<code>git add .</code></li></ul></li><li><p>将暂存区的文件取消暂存：<code>git reset 文件名</code></p></li><li><p>将暂存区内容提交版本仓库：<code>git commit -m "版本说明"</code></p></li><li><p>删除文件：<code>git rm 文件名</code>，仅仅只删除工作空间的文件，需要提交到版本仓库</p></li><li><p>查看版本库中的历史版本及版本号（只会显示第一个版本到当前工作空间版本之间的历史版本）：</p><ul><li><code>git log</code> 显示每个版本的详细信息</li><li><code>git log -- oneline</code> 每个版本信息只显示一行</li></ul></li></ul><h3 id="2-5、远程仓库操作"><a href="#2-5、远程仓库操作" class="headerlink" title="2.5、远程仓库操作"></a>2.5、远程仓库操作</h3><ul><li><p>本地仓库关联远程仓库：<code>git remote add 远程仓库别名  远程仓库链接</code></p></li><li><p>查看远程仓库状态：<code>git remote -v</code></p></li><li><p>移除无效的远程仓库：<code>git remote rm 远程仓库链接或别名</code></p></li><li><p>提交到远程仓库：<code>git push 远程仓库别名 分支名</code></p></li><li><p>从远程仓库拉取到本地仓库：<code>git pull 远程仓库地址 分支名</code>。</p></li></ul><blockquote><p><strong>注意：</strong>如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories</p><p><strong>协同开发时存在一方push后，另一方无法push的问题</strong><br>解决方法一：另一方重新进行pull操作并更改后，在进行push操作<br>解决方法二：执行git fetch 远程仓库地址 master（从远程获取最新到本地）</p></blockquote><h2 id="三、Git分支管理"><a href="#三、Git分支管理" class="headerlink" title="三、Git分支管理"></a>三、Git分支管理</h2><h3 id="3-1、分支介绍"><a href="#3-1、分支介绍" class="headerlink" title="3.1、分支介绍"></a>3.1、分支介绍</h3><p><strong>概念</strong>：分支就是版本库中记录版本位置（支线），分支之间项目会影响，使用分支可以对项目起到保护作用</p><p><strong>特性</strong>：创建一个新的仓库后，默认创建一个master分支，每个分支可以进行单独管理，分支是可以合并的</p><h3 id="3-2、分支操作"><a href="#3-2、分支操作" class="headerlink" title="3.2、分支操作"></a>3.2、分支操作</h3><ul><li><p>查看所有本地分支：<code>git branch</code></p></li><li><p>查看所有远程分支：<code>git branch -r</code></p></li><li><p>切换分支：<code>git checkout 分支名</code></p></li><li><p>创建分支：<code>git branch 分支名</code>（从当前版本创建分支），从指定版本号创建分支：<code>git checkout 版本号 -b 分支名</code></p></li><li><p>合并分支：<code>git merge 分支名</code>（将指定分支合并到当前分支）</p></li><li><p>查看所有分支及版本视图：<code>git log --oneline --graph</code></p></li><li><p>删除本地分支：<code>git branch -d 分支名</code></p></li><li><p>删除远程分支：<code>git push 远程仓库链接或别名 -d 分支名</code></p></li></ul><h2 id="四、Git关联IDEA"><a href="#四、Git关联IDEA" class="headerlink" title="四、Git关联IDEA"></a>四、Git关联IDEA</h2><h3 id="4-1、在IDEA中配置Git"><a href="#4-1、在IDEA中配置Git" class="headerlink" title="4.1、在IDEA中配置Git"></a>4.1、在IDEA中配置Git</h3><ul><li>选择IDEA的<code>File→Settings</code>打开设置窗口，找到<code>Version Control</code>下的<code>git</code>选项，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。</li></ul><p><img src="/posts/2cb5/4.png"></p><ul><li>选择git的安装目录后可以点击<code>Test</code>按钮测试是否正确配置</li></ul><h3 id="4-2、在IDEA中使用Git"><a href="#4-2、在IDEA中使用Git" class="headerlink" title="4.2、在IDEA中使用Git"></a>4.2、在IDEA中使用Git</h3><h4 id="4-2-1、在IDEA中创建工程并将工程添加至Git"><a href="#4-2-1、在IDEA中创建工程并将工程添加至Git" class="headerlink" title="4.2.1、在IDEA中创建工程并将工程添加至Git"></a>4.2.1、在IDEA中创建工程并将工程添加至Git</h4><p>创建本地版本库：点击菜单栏VCS下的Enable Version ……并选中git后点击ok即可</p><p> <img src="/posts/2cb5/5.png"></p><h4 id="4-2-2、设置忽略"><a href="#4-2-2、设置忽略" class="headerlink" title="4.2.2、设置忽略"></a>4.2.2、设置忽略</h4><p>当上传到仓库时，某些文件或文件夹如<code>.idea、target、.xml</code>文件不用上传，将<code>.idea</code>文件夹中的<code>.gitignore</code>文件拖到根目录下，填充内容<code>.idea、target、*.xml</code></p><h4 id="4-2-3、将文件提交到暂存区"><a href="#4-2-3、将文件提交到暂存区" class="headerlink" title="4.2.3、将文件提交到暂存区"></a>4.2.3、将文件提交到暂存区</h4><p>选择某个项目或文件，右键并选择<code>git</code>下的<code>add</code>选项</p><p>已提交到缓存区的文件被显示绿色，未被提交到缓存区的文件显示红色</p><p><img src="/posts/2cb5/6.png"></p><h4 id="4-2-4、将文件提交到本地仓库"><a href="#4-2-4、将文件提交到本地仓库" class="headerlink" title="4.2.4、将文件提交到本地仓库"></a>4.2.4、将文件提交到本地仓库</h4><p>将缓存区内容提交到本地仓库：选择某个项目或文件，右键并选择<code>git</code>下的<code>commit changes</code>选项，并在<code>commit message</code>中填写提交说明</p><p>已提交到仓库的文件被显示黑色，对已提交到仓库的文件进行更改后文件显示蓝色</p><p><img src="/posts/2cb5/7.png"></p><p><img src="/posts/2cb5/8.png"></p><h4 id="4-2-5、与远程仓库映射"><a href="#4-2-5、与远程仓库映射" class="headerlink" title="4.2.5、与远程仓库映射"></a>4.2.5、与远程仓库映射</h4><p>在IDEA中使得项目与远程仓库映射：选择某个项目或文件，右键并选择<code>git</code>下的<code>Manage Remotes</code>选项，并在<code>Manage Remotes</code>添加远程仓库的别名和链接地址</p><p><img src="/posts/2cb5/9.png"></p><p><img src="/posts/2cb5/10.png"></p><h4 id="4-2-6、将代码推送到远程仓库"><a href="#4-2-6、将代码推送到远程仓库" class="headerlink" title="4.2.6、将代码推送到远程仓库"></a>4.2.6、将代码推送到远程仓库</h4><p><img src="/posts/2cb5/11.png"></p><h4 id="4-2-7、从远程拉取代码"><a href="#4-2-7、从远程拉取代码" class="headerlink" title="4.2.7、从远程拉取代码"></a>4.2.7、从远程拉取代码</h4><p><img src="/posts/2cb5/12.png"></p><h4 id="4-2-8、创建分支"><a href="#4-2-8、创建分支" class="headerlink" title="4.2.8、创建分支"></a>4.2.8、创建分支</h4><p>创建分支：点击IDEA右下角的<code>Git Branch</code> 按钮，选择<code>new branch</code>创建新分支</p><p><img src="/posts/2cb5/13.png"></p><h4 id="4-2-9、切换分支"><a href="#4-2-9、切换分支" class="headerlink" title="4.2.9、切换分支"></a>4.2.9、切换分支</h4><p>切换分支：选择该分支后点击选择<code>checkout</code></p><p><img src="/posts/2cb5/14.png"></p><h4 id="4-2-10、删除分支"><a href="#4-2-10、删除分支" class="headerlink" title="4.2.10、删除分支"></a>4.2.10、删除分支</h4><p>删除分支：选择该分支后点击选择<code>delete</code></p><p><img src="/posts/2cb5/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小破站创建之旅</title>
      <link href="/posts/5aed.html"/>
      <url>/posts/5aed.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你了解 <a href="https://hexo.io/zh-cn/">Hexo</a> 吗？ Hexo 是一个静态博客框架，基于 Node.js，将 Markdown 文章通过渲染引擎，生成一个静态网页，再结合 Git 命令（ssh），Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>偶然间了解到了 Hexo 这个静态博客网站，里面有许多的博客主题模板，这些主题都是一些很牛的大佬们开发的，而且设计的主题都很棒，让我很心动，心动不如行动，于是开始整理搭建属于自己的博客。这中间经历了许多的坎坷荆棘，我将我的博客搭建的流程分享出来。</p><p><strong>如果有错的话，请给我留言，我会及时修改，直接上教程。</strong></p><h2 id="一、博客环境搭建"><a href="#一、博客环境搭建" class="headerlink" title="一、博客环境搭建"></a>一、博客环境搭建</h2><ul><li>本文系统环境信息：win10</li><li>Node.js：v16.14.0</li><li>Git：2.34.1</li><li>修改配置文件的软件：Sublime Text</li></ul><hr><h3 id="1-1、下载Node-js和Git"><a href="#1-1、下载Node-js和Git" class="headerlink" title="1.1、下载Node.js和Git"></a>1.1、下载Node.js和Git</h3><h4 id="1-1-1、Node-js-的安装与配置"><a href="#1-1-1、Node-js-的安装与配置" class="headerlink" title="1.1.1、Node.js 的安装与配置"></a>1.1.1、Node.js 的安装与配置</h4><ul><li>首先去 <a href="https://nodejs.org/en/download/">Node.js 官网</a> 下载 node.js 的安装程序，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的步骤。</li></ul><p><img src="/posts/5aed/1.png"></p><p>下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，并测试 Node.js 是否加入环境变量，运行cmd，当出现如下图的情况，Node.js 安装大功告成。</li></ul><p><img src="/posts/5aed/2.png"></p><ul><li>设置npm的镜像源</li></ul><pre class="language-none"><code class="language-none"># 查看npm的配置npm config list# 默认源npm config set registry https://registry.npmjs.org# 临时改变镜像源npm --registry=https://registry.npm.taobao.org# 永久设置为淘宝镜像源npm config set registry https://registry.npm.taobao.org</code></pre><p>设置完成后就可以进行Git的安装了。</p><h4 id="1-1-2、Git的安装与配置"><a href="#1-1-2、Git的安装与配置" class="headerlink" title="1.1.2、Git的安装与配置"></a>1.1.2、Git的安装与配置</h4><ul><li>首先就是去 <a href="https://git-scm.com/">Git 官网</a>下载 Git，根据你电脑系统的配置信息，下载对应的安装程序，然后开始进行下面的安装。</li></ul><p><img src="/posts/5aed/3.png"></p><p>同样下载完成后就是无脑安装过程，期间只需改变你的安装路径</p><ul><li>验证安装，回到桌面，点击鼠标右键，出现两个选项<code>Git GUI Here</code> 和 <code>Git Bash Here</code>，在打开 Cmd (Win+R)，分别输入 <code>git</code> 和 <code>git --version</code>，如果出现如下图的情况，即安装成功！</li></ul><p><img src="/posts/5aed/4.png"></p><p><img src="/posts/5aed/5.png"></p><hr><h3 id="1-2、Github-注册以及-Github-Pages-创建"><a href="#1-2、Github-注册以及-Github-Pages-创建" class="headerlink" title="1.2、Github 注册以及 Github Pages 创建"></a>1.2、Github 注册以及 Github Pages 创建</h3><ul><li>打开 Github <a href="https://github.com/">官网首页</a>，点击右上角的 <strong>Sign Up</strong> ，然后在出现的页面上填写你的相关信息，进行注册：</li></ul><p><img src="/posts/5aed/6.png"></p><p>按照流程创建完成后，开始创建库，如下图所示，仓库名创建格式必须为：<code>&lt;用户名&gt;.github.io</code>，<code>Description</code> 为描述仓库，自定义写，填写必要的描述，也可不填。勾选 <code>Add a README file</code> 点击 <code>Creat repository</code> 进行创建。</p><p><img src="/posts/5aed/7.png"></p><p>然后就会出现如图所示的界面，即仓库创建成功！</p><p><img src="/posts/5aed/8.png"></p><p>此时可以进行测试，点击 <code>Create new file</code>，出现如下界面，然后命名文件名为 <code>index.html</code>，在填写如图的内容，再点击 <code>Commit new file</code>，即创建成功，然后打开一个新的网页，输入网址 <code>https://&lt;你的用户名&gt;.github.io</code>，即可以看见一个新的网页，其中的内容就是你写的内容。</p><p><img src="/posts/5aed/9.png"></p><p><img src="/posts/5aed/10.png"></p><p>若出现对应的内容，则Github 的注册以及 Github Pages 已经创建完成了。</p><hr><h3 id="1-3、配置Git用户名和邮箱"><a href="#1-3、配置Git用户名和邮箱" class="headerlink" title="1.3、配置Git用户名和邮箱"></a>1.3、配置Git用户名和邮箱</h3><p>在桌面点击鼠标右键，点击 <code>Git Bash Here</code>，进入git界面：</p><p><img src="/posts/5aed/11.png"></p><p>然后分别输入下面的两个命令，并回车：</p><pre class="language-none"><code class="language-none">git config --global user.name "此处填写你注册时的用户名"git config --global user.email "此处填写你注册时的邮箱"</code></pre><p>在 <code>C:/Users/[username]/</code>目录下找到<code>.gitconfig</code> 文件,若未找到，开启显示隐藏文件夹的功能即可。同时用编辑器打开，看到如下图所示的信息，即配置成功。</p><p><img src="/posts/5aed/12.png"></p><h2 id="二、本地安装-hexo-静态博客框架并发布到-Github-Pages"><a href="#二、本地安装-hexo-静态博客框架并发布到-Github-Pages" class="headerlink" title="二、本地安装 hexo 静态博客框架并发布到 Github Pages"></a>二、本地安装 hexo 静态博客框架并发布到 Github Pages</h2><h3 id="2-1、本地安装hexo静态博客框架"><a href="#2-1、本地安装hexo静态博客框架" class="headerlink" title="2.1、本地安装hexo静态博客框架"></a>2.1、本地安装hexo静态博客框架</h3><ul><li>选择一个磁盘作为你博客文件的存放位置，并在该位置新建一个文件夹，比如名为MyBlog 的文件夹，创建完成后，不要点进去，在此处点击鼠标右键，选择 <code>Git Bash Here</code>，然后依次输入如下命令：</li></ul><pre class="language-none"><code class="language-none"># hexo框架的安装npm install -g hexo-cli# 初始化文件夹hexo init &lt;新建文件夹的名称&gt; # 切换到该文件夹cd &lt;新建文件夹的名称&gt;# 安装博客所需要的依赖文件npm install  </code></pre><p>依次运行完成后，文件夹内会多出如下图所示的一些文件，此时 Hexo 框架的本地搭建已经完成了，<strong>后续操作均需在该站点目录内进行完成</strong>。</p><p><img src="/posts/5aed/13.png"></p><ul><li><p>此时 Hexo 框架的本地搭建已经完成了，进行本地测试</p><p>进入站点文件夹，鼠标右键选择<code>Git Bash Here</code>，然后依次输入以下命令：</p></li></ul><pre class="language-none"><code class="language-none">hexo ghexo s</code></pre><p>浏览器中打开 [<a href="http://localhost:4000]可以看到一个网页，说明">http://localhost:4000]可以看到一个网页，说明</a> Hexo 博客已经成功在本地运行。</p><p><img src="/posts/5aed/14.png"></p><hr><h3 id="2-2、本地博客发布到-Github-Pages"><a href="#2-2、本地博客发布到-Github-Pages" class="headerlink" title="2.2、本地博客发布到 Github Pages"></a>2.2、本地博客发布到 Github Pages</h3><ul><li>首先需要安装发布的插件，在站点目录下执行下面的命令，也就是创建的博客目录下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-deployer-git --save</code></pre><ul><li>将本地目录与github进行关联，执行以下命令</li></ul><pre class="language-none"><code class="language-none">ssh-keygen -t rsa -C "github注册邮箱地址"</code></pre><p>输入后一直进行回车，然后在 <code>C:/Users/[username]</code> 目录下找到名为<code>.ssh</code> 的文件夹， 文件夹内有两个文件 <code>id_rsa.pub</code> 、 <code>id_rsa</code>，用文本编辑器打开 </p><p><code>id_rsa.pub</code>，复制里面的的内容。 然后打开 Github，点击右上角的头像 <strong>Settings</strong> 选择 <strong>SSH and GPG keys</strong></p><p><img src="/posts/5aed/15.png"></p><ul><li>测试是否与GitHub链接成功，输入下面的命令行</li></ul><pre class="language-none"><code class="language-none">ssh -T git@github.com</code></pre><p>点击回车，会出现一个询问内容，输入 <code>yes</code>，回车，会出现一段内容，<code>Hi ! You've successfully authenticated, but GitHub doesnot provide shell </code></p><p><code>access.</code>。 说明连接成功。此处这个 `` 应该是你 Github 的用户名。</p><ul><li>进入站点目录，打开博客的配置文件<code>_config.yml</code>，修改如下图所示的几个地方</li></ul><pre class="language-none"><code class="language-none">title: 你的博客名subtitle: 博客的副标题，有些主题支持description: 博客描述keywords: 博客关键词author: 作者，在文章中显示language: 博客语言语种，中文是zh-CN  timezone: 时区，可以不用管</code></pre><p>同时在该配置文件的最底部修改deploy，修改为如下代码：</p><pre class="language-none"><code class="language-none">deploy:  type: git  repo:       github: git@github.com:Github用户名/Github用户名.github.io.git   branch: master</code></pre><ul><li>执行以下命令，生成页面，并发布至 Github Pages</li></ul><pre class="language-none"><code class="language-none"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 可以直接输入此命令，直接完成渲染和上传hexo g -d</code></pre><h2 id="三、博客主题修改及个性化修改"><a href="#三、博客主题修改及个性化修改" class="headerlink" title="三、博客主题修改及个性化修改"></a>三、博客主题修改及个性化修改</h2><h3 id="3-1、主题的下载与安装"><a href="#3-1、主题的下载与安装" class="headerlink" title="3.1、主题的下载与安装"></a>3.1、主题的下载与安装</h3><p>在你的站点目录文件夹下使用 <code>git clone</code> 命令来下载：直接在站点根目录下执行下面的命令，即可进行主题的下载，主题有两个版本，稳定版本和最新版本 (不</p><p>定期更新优化)，自主选择版本。</p><pre class="language-none"><code class="language-none">git clone https://github.com/blinkfox/hexo-theme-matery themes/matery     # 稳定版git clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery   #最新版(不定期进行优化更新)</code></pre><p>下载完成后，在站点目录的 <code>themes</code>文件夹内会出现一个 <code>matery</code>主题文件夹</p><p><strong>什么是站点配置文件，什么是主题配置文件：</strong></p><ul><li>站点配置文件就是根目录下的配置文件，假设你的博客文件在 <code>D:\MyBlog</code> 下，那么站点配置文件就是 <code>D:\MyBlog\_config.yml</code>，主题配置文件就是 <code>D:\MyBlog\themes\matery\_config.yml</code>。</li></ul><hr><h3 id="3-2、主题配置"><a href="#3-2、主题配置" class="headerlink" title="3.2、主题配置"></a>3.2、主题配置</h3><h4 id="3-2-1、主题切换"><a href="#3-2-1、主题切换" class="headerlink" title="3.2.1、主题切换"></a>3.2.1、主题切换</h4><ul><li><p>主题下载完成后，将站点配置文件中的 <code>theme</code> 值修改为你下载主题的文件名，此处为 <code>matery</code>，那么值就修改为 <code>theme: matery</code>。</p></li><li><p>站点配置文件有个 <code>per_page属性</code>，建议修改为 6 的倍数，这样网站在适应设备时，有较好的显示效果。</p></li></ul><h4 id="3-2-2、新建-tags-标签页面"><a href="#3-2-2、新建-tags-标签页面" class="headerlink" title="3.2.2、新建 tags 标签页面"></a>3.2.2、新建 tags 标签页面</h4><ul><li><code>tags</code> 页是用来展示所有标签的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>tags/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "tags"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: tagsdate: 2022-02-22 12:23:38type: "tags"layout: "tags"---</code></pre><h4 id="3-2-3、-新建-categories-分类页面"><a href="#3-2-3、-新建-categories-分类页面" class="headerlink" title="3.2.3、 新建 categories 分类页面"></a>3.2.3、 新建 categories 分类页面</h4><p><code>categories</code> 页是用来展示所有分类的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>categories/index.md</code> 文件，如若已有，则此步骤跳过：</p><pre class="language-none"><code class="language-none">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，加入以下内容：</p><pre class="language-none"><code class="language-none">---title: categoriesdate: 2022-02-22 12:24:38type: "categories"layout: "categories"---</code></pre><h4 id="3-2-4、新建-about-关于我页面"><a href="#3-2-4、新建-about-关于我页面" class="headerlink" title="3.2.4、新建 about 关于我页面"></a>3.2.4、新建 about 关于我页面</h4><ul><li><code>about</code> 页是用来展示关于我和我的博客信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>about/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "about"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: aboutdate: 2022-02-22 12:25:32type: "about"layout: "about"---</code></pre><h4 id="3-2-5、新建-contact-留言板页面"><a href="#3-2-5、新建-contact-留言板页面" class="headerlink" title="3.2.5、新建 contact 留言板页面"></a>3.2.5、新建 contact 留言板页面</h4><ul><li><code>contact</code> 页是用来展示留言板信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>contact/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "contact"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: contactdate: 2022-02-22 12:26:32type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的 “<strong>菜单</strong>” 配置，取消关于留言板的注释即可。</p></blockquote><h4 id="3-2-6、新建-friends-友情链接页面"><a href="#3-2-6、新建-friends-友情链接页面" class="headerlink" title="3.2.6、新建 friends 友情链接页面"></a>3.2.6、新建 friends 友情链接页面</h4><ul><li><code>friends</code> 页是用来展示友情链接信息的页面，执行以下命令在站点目录的 <code>source</code> 目录下新建 <code>friends/index.md</code> 文件，如若已有，则此步骤跳过：</li></ul><pre class="language-none"><code class="language-none">hexo new page "friends"</code></pre><ul><li>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，加入以下内容：</li></ul><pre class="language-none"><code class="language-none">---title: friendsdate: 2022-02-22 12:27:02type: "friends"layout: "friends"---</code></pre><ul><li>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</li></ul><pre class="language-none"><code class="language-none">[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/4027734.jpeg",    "name": "闪烁之狐",    "introduction": "编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬",    "url": "https://blinkfox.github.io/",    "title": "前去学习"}, {    "avatar": "http://image.luokangyuan.com/avatar.jpg",    "name": "ja_rome",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://me.csdn.net/jlh912008548",    "title": "前去学习"}]</code></pre><h4 id="3-2-7、菜单导航配置"><a href="#3-2-7、菜单导航配置" class="headerlink" title="3.2.7、菜单导航配置"></a>3.2.7、菜单导航配置</h4><ul><li><strong>主题配置文件配置基本菜单导航的名称、路径 url 和图标 icon。</strong><ul><li>菜单导航名称可以是中文也可以是英文 (如：<code>Index</code> 或<code>主页</code>)</li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</li></ul></li></ul><pre class="language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><ul><li><strong>二级菜单配置方法</strong><ul><li>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作：<ul><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字 (如:<code>About</code> 菜单下添加 <code>children</code>)</li><li>在 <code>children</code> 下创建二级菜单的 名称 name, 路径 url 和图标 icon.</li><li>注意每个二级菜单模块前要加 <code>-</code>.</li><li>注意缩进格式</li></ul></li></ul></li></ul><pre class="language-none"><code class="language-none">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><h4 id="3-2-8、添加-emoji-表情支持"><a href="#3-2-8、添加-emoji-表情支持" class="headerlink" title="3.2.8、添加 emoji 表情支持"></a>3.2.8、添加 emoji 表情支持</h4><ul><li>matery主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code> 表情的生成，把对应的 <code>markdown emoji</code> 语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的 <code>emoji</code> 表情，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-filter-github-emojis --save</code></pre><ul><li>在站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h4 id="3-2-9、代码高亮"><a href="#3-2-9、代码高亮" class="headerlink" title="3.2.9、代码高亮"></a>3.2.9、代码高亮</h4><ul><li> Hexo 自带的代码主题显示不好看，主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i -S hexo-prism-plugin</code></pre><ul><li>修改 Hexo 站点目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</li></ul><pre class="language-none"><code class="language-none">prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h4 id="3-2-10、-搜索"><a href="#3-2-10、-搜索" class="headerlink" title="3.2.10、 搜索"></a>3.2.10、 搜索</h4><ul><li>matery主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-search --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">search:  path: search.xml  field: post</code></pre><h4 id="3-2-11、中文链接转拼音"><a href="#3-2-11、中文链接转拼音" class="headerlink" title="3.2.11、中文链接转拼音"></a>3.2.11、中文链接转拼音</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> 的Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i hexo-permalink-pinyin --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h4 id="3-2-12、文章字数统计插件"><a href="#3-2-12、文章字数统计插件" class="headerlink" title="3.2.12、文章字数统计插件"></a>3.2.12、文章字数统计插件</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><ul><li>安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm i --save hexo-wordcount</code></pre><ul><li>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</li></ul><pre class="language-none"><code class="language-none">wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h4 id="3-2-13、添加-RSS-订阅支持"><a href="#3-2-13、添加-RSS-订阅支持" class="headerlink" title="3.2.13、添加 RSS 订阅支持"></a>3.2.13、添加 RSS 订阅支持</h4><ul><li>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-generator-feed --save</code></pre><ul><li>在 Hexo 站点目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</li></ul><pre class="language-none"><code class="language-none">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="3-2-14、修改社交链接信息"><a href="#3-2-14、修改社交链接信息" class="headerlink" title="3.2.14、修改社交链接信息"></a>3.2.14、修改社交链接信息</h4><ul><li>在主题配置文件<code>_config.yml</code> 中，修改以下配置项：</li></ul><pre class="language-none"><code class="language-none">socialLink:  github:  # https://github.com/xxx  email: #xxxx  facebook: # https://www.facebook.com/xxx  twitter: # https://twitter.com/xxx  qq: #xxxx  weibo: # https://weibo.com/xxx  zhihu: # https://www.zhihu.com/xxx  rss: true # true、false</code></pre><h4 id="3-2-15、修改打赏的二维码图片"><a href="#3-2-15、修改打赏的二维码图片" class="headerlink" title="3.2.15、修改打赏的二维码图片"></a>3.2.15、修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="3-2-16、配置音乐播放器"><a href="#3-2-16、配置音乐播放器" class="headerlink" title="3.2.16、配置音乐播放器"></a>3.2.16、配置音乐播放器</h4><blockquote><p>新版主题支持接入第三方音乐，如 QQ 音乐，网易云音乐，酷狗音乐等等</p></blockquote><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活 music 配置即可：</p><pre class="language-none"><code class="language-none"># 是否在首页显示音乐music:  enable: true  title:            #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code> 可选 <code>netease</code>（网易云音乐），<code>tencent</code>（QQ 音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code> 可选 <code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code> 获取示例：浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，<code>playlist</code> 的 <code>id</code> 即为这串数字。</p></blockquote><hr><h3 id="3-3、Front-matter"><a href="#3-3、Front-matter" class="headerlink" title="3.3、Front-matter"></a>3.3、Front-matter</h3><p>在站点目录的 <code>scaffold</code> 的文件夹下找到 <code>post.md</code>文件，进行 Front-matter修改，修改配置如下：</p><pre class="language-none"><code class="language-none">---# 文章标题title: {{ title }}# 文件创建日期date: {{ date }}# 作者author:# 文章摘要summary:# 文章特征图img:# 是否置顶top:# 文章是否需要加入到首页轮播封面中cover:toc: truemathjax: true# 文章分类categories:# 文章标签tags:---</code></pre><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床 (腾讯云、七牛云、又拍云等) 来做图片的路径。如: <a href="http://xxx.com/xxx.jpg">http://xxx.com/xxx.jpg</a></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code> 版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code> 版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><hr><h3 id="3-4、自定制修改"><a href="#3-4、自定制修改" class="headerlink" title="3.4、自定制修改"></a>3.4、自定制修改</h3><h4 id="3-4-1、修改主题颜色"><a href="#3-4-1、修改主题颜色" class="headerlink" title="3.4.1、修改主题颜色"></a>3.4.1、修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}/*如果想去掉banner图的颜色渐变效果，请将以下的css属性注释掉或者删除掉即可*/@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="3-4-2、修改-banner-图和文章特色图"><a href="#3-4-2、修改-banner-图和文章特色图" class="headerlink" title="3.4.2、修改 banner 图和文章特色图"></a>3.4.2、修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，</p><p>可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="language-none"><code class="language-none">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><p>如果想改为每小时或者每分钟切换 banner 图的话，需要将 <code>getDay()</code> 改为 <code>getHours()</code> 或者 <code>getMinutes()</code> 即可。</p><h4 id="3-4-3、修改网站相关信息"><a href="#3-4-3、修改网站相关信息" class="headerlink" title="3.4.3、修改网站相关信息"></a>3.4.3、修改网站相关信息</h4><pre class="language-none"><code class="language-none">#这是站点目录下的配置文件信息title:    #这是网站标题subtitle:     #这是网站副标题subtitler# 下面两个description,keywords，需要填上，如果想让搜索引擎收录，这个做SEO优化必不可忽视的两个属性description:   #网站描述keywords:  #网站的关键词author:   #作者，文章版权所显示的language: zh-CN  #网站语言，不填写，默认为英文timezone:   #时区，可以不填写# 这是主题配置文件的相关信息# 配置网站favicon和网站LOGO# 此处我用的CDN，也可以使用本地文件favicon: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/favicon.pnglogo: https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/logo.png</code></pre><h2 id="四、其他DIY"><a href="#四、其他DIY" class="headerlink" title="四、其他DIY"></a>四、其他DIY</h2><h3 id="4-1、外链跳转插件"><a href="#4-1、外链跳转插件" class="headerlink" title="4.1、外链跳转插件"></a>4.1、外链跳转插件</h3><blockquote><p><a href="https://blog.hvnobug.com/go.html?url=aHR0cHM6Ly9naXRodWIuY29tL2h2bm9idWcvaGV4by1leHRlcm5hbC1saW5r">hexo-external-link</a> 是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置 <code>target=’_blank’, rel=’external nofollow noopener noreferrer’</code> 告诉搜索引擎这是外部链接，不要将该链接计入权重。 同时自动生成外链跳转页面，默认在根目录下 go.html;</p></blockquote><ul><li>使用 npm安装</li></ul><pre class="language-none"><code class="language-none">## npm 安装npm install hexo-external-link --save</code></pre><ul><li>之后再 hexo 博客站点根目录下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: 'u'  html_file_name: 'go.html'  target_blank: true  link_rel: 'external nofollow noopener noreferrer'  domain: 'your_domain' # 如果开启了防盗链，填写你的域名  safety_chain: true</code></pre><hr><h3 id="4-2、添加动态科技线条背景"><a href="#4-2、添加动态科技线条背景" class="headerlink" title="4.2、添加动态科技线条背景"></a>4.2、添加动态科技线条背景</h3><p>在 <code>themes/matery/layout/layout.ejs</code> 文件中添加如下代码：</p><pre class="language-none"><code class="language-none">&lt;!--动态线条背景--&gt;&lt;script type="text/javascript"color="122 103 238" opacity='0.7' zIndex="-2" count="200" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"&gt;&lt;/script&gt;</code></pre><ul><li>color：表示线条颜色，三个数字分别为 (R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的 z-index 属性，css 属性用于控制所在层的位置，默认：-1</li></ul><hr><h3 id="4-3、文章生成永久链接"><a href="#4-3、文章生成永久链接" class="headerlink" title="4.3、文章生成永久链接"></a>4.3、文章生成永久链接</h3><p>主题默认的文章链接配置是</p><pre class="language-none"><code class="language-none">permalink: :year/:month/:day/:title</code></pre><p>这种生成的链接地址很长，文章版权的链接地址会出现一大串字符编码，一点也不好看。因此需要修改文章生成链接的格式。</p><ul><li>在站点目录下执行下面的命令：</li></ul><pre class="language-none"><code class="language-none">npm install hexo-abbrlink --save</code></pre><ul><li>在站点配置文件下添加如下配置：</li></ul><pre class="language-none"><code class="language-none">abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre><ul><li>将站点配置文件的 <code>permalink</code> 的值修改为：</li></ul><pre class="language-none"><code class="language-none">permalink: posts/:abbrlink.html  # 此处可以自己设置，也可以直接使用 :/abbrlink</code></pre><ul><li>将站点配置文件的 <code>permalink</code> 上方 <code>url</code> 的值修改为：</li></ul><pre class="language-none"><code class="language-none">url: https://username.github.io  # 此处的username为你的github用户名</code></pre><hr><h3 id="4-4、页面获取标题"><a href="#4-4、页面获取标题" class="headerlink" title="4.4、页面获取标题"></a>4.4、页面获取标题</h3><p>修改 <code>themes\matery\layout\_partial</code> 中的 <code>bg-cover-content.ejs</code> 文件，其中原主题中这个文件的代码为 (大约在第 4 行)：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;            &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;            subtitle     &lt;% } %&gt;&lt;/div&gt;</code></pre><p>将其修改为：</p><pre class="language-none"><code class="language-none">&lt;div class="title center-align"&gt;     &lt;% if (is_home() &amp;&amp; config.subtitle &amp;&amp; config.subtitle.length &gt; 0) { %&gt;        &lt;%= config.subtitle %&gt;     &lt;% } else { %&gt;        &lt;%= page.title %&gt;     &lt;% } %&gt;&lt;/div&gt;</code></pre><h2 id="五、添加评论系统"><a href="#五、添加评论系统" class="headerlink" title="五、添加评论系统"></a>五、添加评论系统</h2><p>只说几个常用的评论系统的配置方法：</p><h3 id="5-1、来必力评论系统"><a href="#5-1、来必力评论系统" class="headerlink" title="5.1、来必力评论系统"></a>5.1、来必力评论系统</h3><ul><li>首先去<a href="https://livere.com/">来必力官网</a>，点击导航栏上的安装，会出现如下图的页面：<ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul></li></ul><p><img src="/posts/5aed/16.png"></p><ul><li>进行注册登录，会提示你填写网站的相关信息，如网站链接，网站名称等等，填写完毕之后，会给你一段代码，如下图所示：</li></ul><p><img src="/posts/5aed/17.png"></p><ul><li>把data_uid的值复制后添加到主题配置文件的对应位置</li></ul><pre class="language-none"><code class="language-none"># Livere comment configuration, the default is not activated# Livere 来必力评论模块的配置，默认为不激活livere:  enable: true   # true即为开启评论系统  uid: #这里填写你的uid</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-2、添加-Valine-评论系统"><a href="#5-2、添加-Valine-评论系统" class="headerlink" title="5.2、添加 Valine 评论系统"></a>5.2、添加 Valine 评论系统</h3><p><a href="https://valine.js.org/">Valine 官方文档</a></p><p>如果注册过 LeanCloud，请点击此处进行<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>，未注册的请点击<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a></p><ul><li>经过登录或者注册之后再登录，就会进入如下的页面：</li></ul><p><img src="/posts/5aed/18.png"></p><ul><li>创建应用完成后，会出现如下页面，然后点击设置</li></ul><p><img src="/posts/5aed/19.png"></p><ul><li>会出现下面的页面，将其中 APPID 和 APPKey 复制，添加到主题配置文件中。</li></ul><p><img src="/posts/5aed/20.png"></p><pre class="language-none"><code class="language-none"># The configuration of the Valine comment module is not activated by default.# To use it, activate the configuration item and set appId and appKey.# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.valine:  enable: false  # true即为开启评论系统  appId:   #此处填写你的appid  appKey:  #此处填写你的appkey  notify: false  verify: false  visitor: true  avatar: 'mm' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'just go go' # Comment Box placeholder  background:  https://cdn.jsdelivr.net/gh/Yafine/cdn@3.1.1/social/comment_bg.png</code></pre><ul><li>然后执行相关部署命令，查看效果即可。</li></ul><hr><h3 id="5-3、添加-Gitalk-评论模块"><a href="#5-3、添加-Gitalk-评论模块" class="headerlink" title="5.3、添加 Gitalk 评论模块"></a>5.3、添加 Gitalk 评论模块</h3><ul><li>注册 OAuth Application</li></ul><p>当别人评论你的文章时，会需要它授权。点击<a href="https://github.com/settings/applications/new">注册 OAuth Application</a> 进行注册，注册界面如下：</p><p><img src="/posts/5aed/21.png"></p><ul><li>点击 <strong>Register application</strong>（注册）会出现 <strong>Client ID/Secret</strong>，接下来就是将信息填入配置文件中。</li></ul><p><img src="/posts/5aed/22.png"></p><ul><li>配置 _config.yml 文件</li></ul><pre class="language-none"><code class="language-none"># the Gitalk config，default disabled# Gitalk 评论模块的配置，默认为不激活gitalk:  enable: true    # true即开启评论模块  owner: Yafine  # 填写你的 github 账户名即可  repo: Yafine-gitalks   # 新建一个仓库或者使用博客托管的仓库也可  oauth:    clientId: #填写你的clientId    clientSecret:  #填写你的clientSecret  admin: Yafine  #填写你的 github 账户名即可</code></pre><ul><li>然后再进行部署步骤即可，第一次查看效果需要登录 github 账号，关联授权后，就可以使用评论系统了。</li></ul><h2 id="六、新建文章"><a href="#六、新建文章" class="headerlink" title="六、新建文章"></a>六、新建文章</h2><h3 id="6-1、自动打开本地-Markdown-编辑器"><a href="#6-1、自动打开本地-Markdown-编辑器" class="headerlink" title="6.1、自动打开本地 Markdown 编辑器"></a>6.1、自动打开本地 Markdown 编辑器</h3><p>写新文章时，需要控制台执行 <code>hexo new "文章名字"</code>，这样就会在<code>_posts</code> 下生成一篇新文章，但需要手动打开，挺麻烦，只需要在站点根目录下新建 <code>scripts</code> 目录，然后在新建 <code>auto_open.js</code>，在文件填入一下内容：</p><pre class="language-none"><code class="language-none">var spawn = require('child_process').exec;hexo.on('new', function(data){  spawn('start  "D:\Program Files\Typora\Typora.exe" ' + data.path);});</code></pre><p>其中 <code>"D:\Program Files\Typorae\Typora.exe"</code> 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 <code>hexo cl &amp;&amp; hexo g -d</code>，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><hr><h3 id="6-2、新建文章插入图片"><a href="#6-2、新建文章插入图片" class="headerlink" title="6.2、新建文章插入图片"></a>6.2、新建文章插入图片</h3><ul><li>打开在hexo根目录下的 _config.yml 配置文件，找到 post_asset_folder 属性，默认为 false 改为 true</li></ul><ul><li>在hexo根目录下执行如下命令</li></ul><pre class="language-none"><code class="language-none">npm install hexo-asset-image</code></pre><p>此时再执行命令 hexo n article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片</p><p>资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了</p><pre class="language-none"><code class="language-none">![](img_name.jpg) #文章中的图片资源路径格式</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客创建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
